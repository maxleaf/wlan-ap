From 25dfb026b5ee7283413ec19afe2221840492b360 Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Fri, 13 May 2022 17:15:28 +0530
Subject: [PATCH] ath11k: add qmi changes to fetch memory region

Add qmi changes to fectch various memory region
as per the upstream dtsi changes.

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.c |  10 +++
 drivers/net/wireless/ath/ath11k/hw.h   |   5 ++
 drivers/net/wireless/ath/ath11k/qmi.c  | 142 +++++++++++++++++++--------------
 drivers/net/wireless/ath/ath11k/qmi.h  |  15 ++++
 4 files changed, 111 insertions(+), 61 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -140,6 +140,9 @@ static const struct ath11k_hw_params ath
 		.wakeup_mhi = false,
 		.reo_status_poll = false,
 		.num_vdevs_peers = ath11k_vdevs_peers,
+		.m3_offset = ATH11K_QMI_IPQ8074_M3_DUMP_OFFSET,
+		.caldb_offset = ATH11K_QMI_IPQ8074_CALDB_OFFSET,
+		.bdf_offset = ATH11K_QMI_IPQ8074_BDF_OFFSET,
 	},
 	{
 		.hw_rev = ATH11K_HW_IPQ6018_HW10,
@@ -196,6 +199,9 @@ static const struct ath11k_hw_params ath
 		.wakeup_mhi = false,
 		.reo_status_poll = false,
 		.num_vdevs_peers = ath11k_vdevs_peers,
+		.m3_offset = ATH11K_QMI_IPQ6018_M3_DUMP_OFFSET,
+		.caldb_offset = ATH11K_QMI_IPQ6018_CALDB_OFFSET,
+		.bdf_offset = ATH11K_QMI_IPQ6018_BDF_OFFSET,
 	},
 	{
 		.name = "qca6390 hw2.0",
@@ -308,6 +314,10 @@ static const struct ath11k_hw_params ath
 		.wakeup_mhi = false,
 		.reo_status_poll = false,
 		.num_vdevs_peers = ath11k_vdevs_peers,
+		.m3_offset = ATH11K_QMI_QCN9074_M3_OFFSET,
+		.caldb_offset = ATH11K_QMI_QCN9074_CALDB_OFFSET,
+		.qdss_offset = ATH11K_QMI_QCN9074_QDSS_OFFSET,
+		.pageable_offset = ATH11K_QMI_QCN9074_PAGEABLE_OFFSET,
 	},
 	{
 		.hw_rev = ATH11K_HW_IPQ5018,
@@ -372,6 +382,9 @@ static const struct ath11k_hw_params ath
 		 * max cfr payload(4096 bytes)
 		 */
 		.cfr_stream_buf_size = 4292,
+		.m3_offset = ATH11K_QMI_IPQ5018_M3_OFFSET,
+		.qdss_offset = ATH11K_QMI_IPQ5018_QDSS_OFFSET,
+		.caldb_offset = ATH11K_QMI_IPQ5018_CALDB_OFFSET,
 	},
 	{
 		.hw_rev = ATH11K_HW_QCN6122,
@@ -436,6 +449,9 @@ static const struct ath11k_hw_params ath
 		 * cfr payload(16384 bytes)
 		*/
 		.cfr_stream_buf_size = 16580,
+		.m3_offset = ATH11K_QMI_QCN6122_M3_OFFSET,
+		.qdss_offset = ATH11K_QMI_QCN6122_QDSS_OFFSET,
+		.caldb_offset = ATH11K_QMI_QCN6122_CALDB_OFFSET,
  	},
 	{
 		.hw_rev = ATH11K_HW_IPQ9574,
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -219,6 +219,11 @@ struct ath11k_hw_params {
 	u8 max_tx_ring;
 	bool reo_status_poll;
 	const struct ath11k_num_vdevs_peers *num_vdevs_peers;
+	u32 bdf_offset;
+	u32 m3_offset;
+	u32 caldb_offset;
+	u32 qdss_offset;
+	u32 pageable_offset;
 };
 
 struct ath11k_hw_ops {
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -2788,39 +2788,62 @@ static int ath11k_qmi_alloc_target_mem_c
 static int ath11k_qmi_assign_target_mem_chunk(struct ath11k_base *ab)
 {
 	struct device *dev = ab->dev;
+	struct device_node *hremote_node = NULL;
+	struct resource res;
+	u32 host_ddr_sz, addr;
 	int i, idx, ret;
-	u32 addr = 0;
-	u32 location[3];
+
+	hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
+	if (hremote_node) {
+		ret = of_address_to_resource(hremote_node, 0, &res);
+		of_node_put(hremote_node);
+		if (ret)
+			ath11k_dbg(ab, ATH11K_DBG_QMI,
+				   "qmi fail to get reg from hremote\n");
+	} else {
+		ath11k_dbg(ab, ATH11K_DBG_QMI,
+			   "qmi fail to get hremote_node\n");
+	}
 
 	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
 		switch (ab->qmi.target_mem[i].type) {
 		case HOST_DDR_REGION_TYPE:
+			if (!hremote_node) {
+				ath11k_dbg(ab, ATH11K_DBG_QMI,
+						"qmi fail to get hremote_node\n");
+				return -ENODEV;
+			}
+
+			if (res.end - res.start + 1 < ab->qmi.target_mem[i].size) {
+				ath11k_dbg(ab, ATH11K_DBG_QMI,
+						"qmi fail to assign memory of sz\n");
+				return -EINVAL;
+			}
+
 			/* This is HACK
 			 * QCN9074 Firmware needs contiguous 60MB HOST DDR memory
 			 * use reserve memory from bootargs x86
 			 * HACK reserve memory using memmap=60M$0x70000000
 			 */
 
-			if (ath11k_host_ddr_addr) {
-				addr = ath11k_host_ddr_addr;
-			} else if (of_property_read_u32(dev->of_node, "base-addr", &addr)) {
-				ath11k_warn(ab, "qmi fail to get base-addr in dt\n");
-				return -EINVAL;
-			}
-
-			ab->qmi.target_mem[idx].paddr = (phys_addr_t)addr;
-			ab->qmi.target_mem[idx].vaddr =
-				ioremap(ab->qmi.target_mem[idx].paddr,
-					ab->qmi.target_mem[i].size);
-			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
-			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
-			idx++;
+            if (ath11k_host_ddr_addr)
+                ab->qmi.target_mem[idx].paddr = ath11k_host_ddr_addr;
+            else
+                ab->qmi.target_mem[idx].paddr = res.start;
+
+            ab->qmi.target_mem[idx].vaddr =
+                ioremap(ab->qmi.target_mem[idx].paddr,
+                    ab->qmi.target_mem[i].size);
+            ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
+            host_ddr_sz = ab->qmi.target_mem[i].size;
+            ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
+            idx++;
 			break;
 		case BDF_MEM_REGION_TYPE:
-			if (!of_property_read_u32_array(dev->of_node, "qcom,bdf-addr", location,
-							ARRAY_SIZE(location))) {
-				ab->hw_params.bdf_addr = location[ab->qmi.target_mem_mode];
-			}
+			if (hremote_node)
+				ab->hw_params.bdf_addr =
+					res.start + ab->hw_params.bdf_offset;
+
 			ab->qmi.target_mem[idx].paddr = ab->hw_params.bdf_addr;
 			ab->qmi.target_mem[idx].vaddr = NULL;
 			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
@@ -2828,32 +2851,25 @@ static int ath11k_qmi_assign_target_mem_
 			idx++;
 			break;
 		case CALDB_MEM_REGION_TYPE:
-			if (ath11k_host_ddr_addr) {
-				addr = ath11k_host_ddr_addr +
-					ATH11K_HOST_DDR_CALDB_OFFSET;
-			} else {
-				if (!of_property_read_u32_array(dev->of_node,
-								"qcom,caldb-addr",
-								location,
-								ARRAY_SIZE(location)))
-					addr = location[ab->qmi.target_mem_mode];
-				else if (of_property_read_u32(dev->of_node,
-							      "qcom,caldb-addr",
-							      &addr))
-					ath11k_warn(ab, "qmi fail to get caldb-addr in dt\n");
-			}
+			if (ath11k_cold_boot_cal && ab->hw_params.cold_boot_calib &&
+					ab->enable_cold_boot_cal) {
+				if (hremote_node) {
+					ab->qmi.target_mem[idx].paddr =
+						res.start + ab->hw_params.caldb_offset;
+				} else if (ath11k_host_ddr_addr) {
+					ab->qmi.target_mem[idx].paddr =
+						ath11k_host_ddr_addr + ab->hw_params.caldb_offset;
+				} else {
+					ab->qmi.target_mem[idx].paddr = ATH11K_QMI_CALDB_ADDRESS;
+				}
 
-			if (!ab->enable_cold_boot_cal ||
-			    !ab->hw_params.cold_boot_calib) {
-				ab->qmi.target_mem[idx].paddr = 0;
-				ab->qmi.target_mem[idx].vaddr = NULL;
-			} else {
-				ab->qmi.target_mem[idx].paddr = (u32)addr;
 				ab->qmi.target_mem[idx].vaddr =
 					ioremap(ab->qmi.target_mem[idx].paddr,
 							ab->qmi.target_mem[i].size);
+			} else {
+				ab->qmi.target_mem[idx].paddr = 0;
+				ab->qmi.target_mem[idx].vaddr = NULL;
 			}
-
 			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
 			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
 			idx++;
@@ -2870,43 +2886,46 @@ static int ath11k_qmi_assign_target_mem_
 
 			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
 			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
-
-			if (ath11k_host_ddr_addr) {
-				addr = ath11k_host_ddr_addr +
-					ATH11K_HOST_DDR_M3_OFFSET;
-			} else if (of_property_read_u32(dev->of_node, "m3-dump-addr", &addr)) {
-				addr = ab->hw_params.m3_addr;
+			if (hremote_node) {
+				ab->qmi.target_mem[idx].paddr =
+					res.start + ab->hw_params.m3_offset;
+			} else if (ath11k_host_ddr_addr) {
+				ab->qmi.target_mem[idx].paddr =
+					ath11k_host_ddr_addr + ab->hw_params.m3_offset;
+			} else {
+				ab->qmi.target_mem[idx].paddr = ab->hw_params.m3_addr;
 			}
-			ab->qmi.target_mem[idx].paddr =  (phys_addr_t)addr;
 
-				ab->qmi.target_mem[idx].vaddr =
-					ioremap(ab->qmi.target_mem[idx].paddr,
-							ab->qmi.target_mem[i].size);
+			ab->qmi.target_mem[idx].vaddr =
+				ioremap(ab->qmi.target_mem[idx].paddr,
+						ab->qmi.target_mem[i].size);
 			idx++;
 			break;
 		case PAGEABLE_MEM_TYPE:
-			if (ath11k_host_ddr_addr) {
+			if (hremote_node) {
+				addr = res.start + ab->hw_params.pageable_offset;
+			} else if (ath11k_host_ddr_addr) {
 				addr = ath11k_host_ddr_addr +
-					ATH11K_HOST_DDR_PAGEABLE_OFFSET;
-			} else if (of_property_read_u32(dev->of_node,
-						"pageable-addr", &addr)) {
+					ab->hw_params.pageable_offset;
+			} else {
 				ath11k_dbg(ab, ATH11K_DBG_QMI,
 						"pageable-addr is not in dt\n");
 			}
+
 			ab->qmi.target_mem[idx].paddr =  (phys_addr_t)addr;
 			ab->qmi.target_mem[idx].vaddr =
-					ioremap(ab->qmi.target_mem[idx].paddr,
-							ab->qmi.target_mem[i].size);
+				ioremap(ab->qmi.target_mem[idx].paddr,
+						ab->qmi.target_mem[i].size);
 			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
 			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
 
 			ret = ath11k_coredump_mhi_update_bhie_table(ab,
-						ab->qmi.target_mem[idx].vaddr,
-						ab->qmi.target_mem[idx].paddr,
-						ab->qmi.target_mem[idx].size);
+					ab->qmi.target_mem[idx].vaddr,
+					ab->qmi.target_mem[idx].paddr,
+					ab->qmi.target_mem[idx].size);
 			if (ret < 0)
 				ath11k_warn(ab, "qmi fail to update BHI table %d\n",
-					    ret);
+						ret);
 
 			idx++;
 			break;
@@ -3833,7 +3852,9 @@ int ath11k_qmi_pci_alloc_qdss_mem(struct
 {
 	struct ath11k_base *ab = qmi->ab;
 	struct device *dev = ab->dev;
-	int i;
+	struct device_node *hremote_node = NULL;
+	struct resource res;
+	int i, ret;
 	u32 addr = 0;
 
 	if (ab->qmi.qdss_mem_seg_len  > 1) {
@@ -3851,14 +3872,32 @@ int ath11k_qmi_pci_alloc_qdss_mem(struct
 				return -ENOMEM;
 			}
 
-			if (ath11k_host_ddr_addr) {
-				addr = ath11k_host_ddr_addr +
-				       ATH11K_HOST_DDR_QDSS_OFFSET;
-			} else if (of_property_read_u32(dev->of_node,
-						 "etr-addr", &addr)) {
-				ath11k_warn(ab, "qmi fail to get etr-addr in dt\n");
-				return -ENOMEM;
+			hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
+			if (!hremote_node) {
+				ath11k_dbg(ab, ATH11K_DBG_QMI,
+					   "qmi fail to get hremote_node\n");
+				return -ENODEV;
+			}
+
+			ret = of_address_to_resource(hremote_node, 0, &res);
+			of_node_put(hremote_node);
+			if (ret) {
+				ath11k_dbg(ab, ATH11K_DBG_QMI,
+					   "qmi fail to get reg from hremote\n");
+				return ret;
 			}
+
+			if (res.end - res.start + 1 < ab->qmi.target_mem[i].size) {
+				ath11k_dbg(ab, ATH11K_DBG_QMI,
+					   "qmi fail to assign memory of sz\n");
+				return -EINVAL;
+			}
+
+			if (ath11k_host_ddr_addr)
+				addr = ath11k_host_ddr_addr + ab->hw_params.qdss_offset;
+			else
+				addr = res.start + ab->hw_params.qdss_offset;
+
 			ab->qmi.qdss_mem[i].paddr = (phys_addr_t)addr;
 			ab->qmi.qdss_mem[i].vaddr =
 				ioremap(ab->qmi.qdss_mem[i].paddr,
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -35,11 +35,23 @@
 #define ATH11K_QMI_DEFAULT_QDSS_CONFIG_FILE_NAME "qdss_trace_config.bin"
 
 #ifdef CPTCFG_ATH11K_MEM_PROFILE_512M
+#define ATH11K_QMI_QCN9074_M3_OFFSET		0xC00000
+#define ATH11K_QMI_QCN9074_QDSS_OFFSET		0xD00000
+#define ATH11K_QMI_QCN9074_CALDB_OFFSET		0xE00000
+#define ATH11K_QMI_QCN9074_PAGEABLE_OFFSET	0x1600000
 #define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS	0x4E800000
+#define ATH11K_QMI_IPQ8074_M3_DUMP_OFFSET	0x3800000
 #define ATH11K_QMI_IPQ6018_M3_DUMP_ADDRESS	0x4E300000
+#define ATH11K_QMI_IPQ6018_M3_DUMP_OFFSET	0x3800000
 #else
+#define ATH11K_QMI_QCN9074_M3_OFFSET		0x2300000
+#define ATH11K_QMI_QCN9074_QDSS_OFFSET		0x2400000
+#define ATH11K_QMI_QCN9074_CALDB_OFFSET		0x2500000
+#define ATH11K_QMI_QCN9074_PAGEABLE_OFFSET	0x2D00000
 #define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS	0x51000000
+#define ATH11K_QMI_IPQ8074_M3_DUMP_OFFSET	0x6000000
 #define ATH11K_QMI_IPQ6018_M3_DUMP_ADDRESS	0x50100000
+#define ATH11K_QMI_IPQ6018_M3_DUMP_OFFSET	0x5600000
 #endif
 
 #define ATH11K_QMI_IPQ5018_M3_DUMP_ADDRESS	0x4C800000
@@ -47,6 +59,17 @@
 #define ATH11K_QMI_IPQ9574_M3_DUMP_ADDRESS	0x4D600000
 #define ATH11K_QMI_M3_DUMP_SIZE			0x100000
 
+#define ATH11K_QMI_IPQ8074_CALDB_OFFSET		0xA00000
+#define ATH11K_QMI_IPQ8074_BDF_OFFSET		0xC0000
+#define ATH11K_QMI_IPQ6018_CALDB_OFFSET		0xA00000
+#define ATH11K_QMI_IPQ6018_BDF_OFFSET		0xC0000
+#define ATH11K_QMI_IPQ5018_M3_OFFSET		0xD00000
+#define ATH11K_QMI_IPQ5018_QDSS_OFFSET		0xE00000
+#define ATH11K_QMI_IPQ5018_CALDB_OFFSET		0xF00000
+#define ATH11K_QMI_QCN6122_M3_OFFSET		0xD00000
+#define ATH11K_QMI_QCN6122_QDSS_OFFSET		0xE00000
+#define ATH11K_QMI_QCN6122_CALDB_OFFSET		0xF00000
+
 #define QMI_WLFW_REQUEST_MEM_IND_V01		0x0035
 #define QMI_WLFW_FW_MEM_READY_IND_V01		0x0037
 #define QMI_WLFW_COLD_BOOT_CAL_DONE_IND_V01	0x0021
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -1429,7 +1429,7 @@ static int ath11k_pci_probe(struct pci_d
 	 * these pltforms supports reserved memory.
 	 */
 	if (ath11k_host_ddr_addr ||
-	    !of_property_read_u32(ab->dev->of_node, "base-addr", &addr))
+	    !of_property_read_u32(ab->dev->of_node, "memory-region", &addr))
 		ab->bus_params.fixed_mem_region = true;
 
 	/* This is HACK to bring up the QCN9074 with segemnted memory */
