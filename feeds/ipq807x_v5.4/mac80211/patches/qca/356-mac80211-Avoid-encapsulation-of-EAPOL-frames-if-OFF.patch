From 6e8fef711e44160b963b0cfd214060724808d3ab Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Thu, 21 Jul 2022 12:10:22 +0530
Subject: [PATCH] mac80211: Avoid encapsulation of EAPOL frames if
 OFFLOAD_ENCAP is enabled
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

EAP Frames over NL80211 Control port are 802.11 Native WiFi
encapsulated by default, but for a vdev operating in 802.3, when FW doesnâ€™t
advertise WMI_SERVICE_EAPOL_OVER_NWIFI, it cannot accept an 802.11
Native WiFi frame.

Allow EAP Frames over NL80211 Control port to be passed as 802.3
if vif has IEEE80211_OFFLOAD_ENCAP_ENABLED set.

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 net/mac80211/ieee80211_i.h |  5 ++++
 net/mac80211/tx.c          | 58 +++++++++++++++++++++++++++++++++-------------
 2 files changed, 47 insertions(+), 16 deletions(-)

diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 541a15a..87e38c4 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1842,6 +1842,11 @@ netdev_tx_t ieee80211_subif_start_xmit(struct sk_buff *skb,
 				       struct net_device *dev);
 netdev_tx_t ieee80211_subif_start_xmit_8023(struct sk_buff *skb,
 					    struct net_device *dev);
+netdev_tx_t __ieee80211_subif_start_xmit_8023(struct sk_buff *skb,
+					      struct net_device *dev,
+					      u32 info_flags,
+					      u32 ctrl_flags,
+					      u64 *cookie);
 void __ieee80211_subif_start_xmit(struct sk_buff *skb,
 				  struct net_device *dev,
 				  u32 info_flags,
diff --git a/net/mac80211/tx.c b/net/mac80211/tx.c
index 132cc62..8e40769 100644
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -38,7 +38,8 @@
 
 static void ieee80211_8023_xmit(struct ieee80211_sub_if_data *sdata,
 				struct net_device *dev, struct sta_info *sta,
-				struct ieee80211_key *key, struct sk_buff *skb);
+				struct ieee80211_key *key, struct sk_buff *skb,
+				u32 info_flags, u32 ctrl_flags, u64 *cookie);
 
 static inline void ieee80211_tx_stats(struct net_device *dev, u32 len)
 {
@@ -4087,7 +4088,7 @@ void __ieee80211_subif_start_xmit(struct sk_buff *skb,
 		    !is_multicast_ether_addr(skb->data)) {
 		    	if (sta)
 				key = rcu_dereference(sta->ptk[sta->ptk_idx]);
-			ieee80211_8023_xmit(sdata, dev, sta, key, skb);
+			ieee80211_8023_xmit(sdata, dev, sta, key, skb, info_flags, ctrl_flags, cookie);
 			rcu_read_unlock();
 			return;
 		}
@@ -4157,7 +4158,7 @@ void __ieee80211_subif_start_xmit(struct sk_buff *skb,
 		if (info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP) {
 		    	if (sta)
 				key = rcu_dereference(sta->ptk[sta->ptk_idx]);
-			ieee80211_8023_xmit(sdata, dev, sta, key, skb);
+			ieee80211_8023_xmit(sdata, dev, sta, key, skb, info_flags, ctrl_flags, cookie);
 		} else {
 			ieee80211_tx_stats(dev, skb->len);
 			ieee80211_xmit(sdata, sta, skb);
@@ -4385,7 +4386,8 @@ static bool ieee80211_tx_8023(struct ieee80211_sub_if_data *sdata,
 
 static void ieee80211_8023_xmit(struct ieee80211_sub_if_data *sdata,
 				struct net_device *dev, struct sta_info *sta,
-				struct ieee80211_key *key, struct sk_buff *skb)
+				struct ieee80211_key *key, struct sk_buff *skb,
+				u32 info_flags, u32 ctrl_flags, u64 *cookie)
 {
 	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 	struct ethhdr *ehdr = (struct ethhdr *)skb->data;
@@ -4412,6 +4414,7 @@ static void ieee80211_8023_xmit(struct ieee80211_sub_if_data *sdata,
 		goto out_free;
 
 	memset(info, 0, sizeof(*info));
+	info->flags |= info_flags;
 
 	tid = skb->priority & IEEE80211_QOS_CTL_TAG1D_MASK;
 	if (!ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD) && sta) {
@@ -4428,11 +4431,13 @@ static void ieee80211_8023_xmit(struct ieee80211_sub_if_data *sdata,
 				tid_tx->last_tx = jiffies;
 		}
 	}
-	if (unlikely(skb->sk &&
-		     skb_shinfo(skb)->tx_flags & SKBTX_WIFI_STATUS &&
+
+	if (unlikely(((skb->sk &&
+		     skb_shinfo(skb)->tx_flags & SKBTX_WIFI_STATUS) ||
+		     ((ctrl_flags & IEEE80211_TX_CTL_REQ_TX_STATUS) && !multicast)) &&
 		     !ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD)))
 		info->ack_frame_id = ieee80211_store_ack_skb(local, skb,
-							     &info->flags, NULL);
+							     &info->flags, cookie);
 
 	info->hw_queue = sdata->vif.hw_queue[skb_get_queue_mapping(skb)];
 
@@ -4467,7 +4472,8 @@ out_free:
 
 void ieee80211_8023_xmit_ap(struct ieee80211_sub_if_data *sdata,
 			    struct net_device *dev, struct sta_info *sta,
-			    struct ieee80211_key *key, struct sk_buff *skb)
+			    struct ieee80211_key *key, struct sk_buff *skb,
+			    u32 info_flags, u32 ctrl_flags, u64* cookie)
 {
 	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 	struct ieee80211_local *local = sdata->local;
@@ -4476,13 +4482,18 @@ void ieee80211_8023_xmit_ap(struct ieee80211_sub_if_data *sdata,
 	unsigned long flags;
 	int q;
 	u16 q_map;
+	struct ethhdr *ehdr = (struct ethhdr *)skb->data;
+	unsigned char *ra = ehdr->h_dest;
+	bool multicast = is_multicast_ether_addr(ra);
 
 	memset(info, 0, sizeof(*info));
+	info->flags |= info_flags;
 
-	if (unlikely(skb->sk &&
-		     skb_shinfo(skb)->tx_flags & SKBTX_WIFI_STATUS))
+	if (unlikely((skb->sk &&
+		     skb_shinfo(skb)->tx_flags & SKBTX_WIFI_STATUS) ||
+		     ((ctrl_flags & IEEE80211_TX_CTL_REQ_TX_STATUS) && !multicast)))
 		info->ack_frame_id = ieee80211_store_ack_skb(local, skb,
-							     &info->flags, NULL);
+							     &info->flags, cookie);
 
 	info->flags |= IEEE80211_TX_CTL_HW_80211_ENCAP;
 	info->control.vif = &sdata->vif;
@@ -4525,10 +4536,20 @@ void ieee80211_8023_xmit_ap(struct ieee80211_sub_if_data *sdata,
 netdev_tx_t ieee80211_subif_start_xmit_8023(struct sk_buff *skb,
 					    struct net_device *dev)
 {
+	return __ieee80211_subif_start_xmit_8023(skb, dev, 0, 0, NULL);
+}
+
+netdev_tx_t __ieee80211_subif_start_xmit_8023(struct sk_buff *skb,
+					      struct net_device *dev,
+					      u32 info_flags,
+					      u32 ctrl_flags,
+					      u64 *cookie)
+{
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ethhdr *ehdr = (struct ethhdr *)skb->data;
 	struct ieee80211_key *key = NULL;
 	struct sta_info *sta;
+	bool is_eapol;
 
 #ifdef CPTCFG_MAC80211_NSS_SUPPORT
 	ieee80211_xmit_nss_fixup(skb, dev);
@@ -4545,13 +4566,15 @@ netdev_tx_t ieee80211_subif_start_xmit_8023(struct sk_buff *skb,
 		goto out;
 	}
 
+	is_eapol = (sdata->control_port_protocol == ehdr->h_proto);
+
 	if (ieee80211_hw_check(&sdata->local->hw, SUPPORTS_NSS_OFFLOAD)) {
 		if (unlikely(IS_ERR_OR_NULL(sta) || !sta->uploaded))
 			sta = NULL;
 		goto tx_offload;
 	} else if (unlikely(IS_ERR_OR_NULL(sta) || !sta->uploaded ||
-		   !test_sta_flag(sta, WLAN_STA_AUTHORIZED) ||
-		   sdata->control_port_protocol == ehdr->h_proto))
+		   (!test_sta_flag(sta, WLAN_STA_AUTHORIZED) && !is_eapol) ||
+		   (is_eapol && !(sdata->vif.offload_flags & IEEE80211_OFFLOAD_ENCAP_ENABLED))))
 		goto skip_offload;
 
 	key = rcu_dereference(sta->ptk[sta->ptk_idx]);
@@ -4562,12 +4585,12 @@ netdev_tx_t ieee80211_subif_start_xmit_8023(struct sk_buff *skb,
 		goto skip_offload;
 
 	if (sdata->vif.type == NL80211_IFTYPE_AP) {
-		ieee80211_8023_xmit_ap(sdata, dev, sta, key, skb);
+		ieee80211_8023_xmit_ap(sdata, dev, sta, key, skb, info_flags, ctrl_flags, cookie);
 		goto out;
 	}
 
 tx_offload:
-	ieee80211_8023_xmit(sdata, dev, sta, key, skb);
+	ieee80211_8023_xmit(sdata, dev, sta, key, skb, info_flags, ctrl_flags, cookie);
 	goto out;
 
 skip_offload:
@@ -5914,7 +5937,10 @@ int ieee80211_tx_control_port(struct wiphy *wiphy, struct net_device *dev,
 	mutex_lock(&local->mtx);
 
 	local_bh_disable();
-	__ieee80211_subif_start_xmit(skb, skb->dev, flags, ctrl_flags, cookie);
+	if (sdata->vif.offload_flags & IEEE80211_OFFLOAD_ENCAP_ENABLED)
+		__ieee80211_subif_start_xmit_8023(skb, skb->dev, flags, ctrl_flags, cookie);
+	else
+		__ieee80211_subif_start_xmit(skb, skb->dev, flags, ctrl_flags, cookie);
 	local_bh_enable();
 
 	mutex_unlock(&local->mtx);
-- 
2.7.4

