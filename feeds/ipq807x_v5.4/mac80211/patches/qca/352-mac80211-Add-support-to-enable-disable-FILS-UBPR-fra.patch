From 82a39d045ccaf5e0411f511c53983b01e9e2a656 Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Fri, 29 Apr 2022 20:21:36 +0530
Subject: [PATCH] mac80211: Add support to enable/disable FILS/UBPR frames

Add Support to enabled/disable the Fast initial Link Setup(FILS)
ands Unsolicited Broadcast Probe response frames in run time.

Currently FILS or UBPR config with interval 0 is considered
as invalid config, Allow user to set the fils max_interval and
ubpr interval to be set to 0 in which is case it is disabled.
This will allow run time disbable of FILS/UBPR rather doing
a BSS restart.

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 net/mac80211/cfg.c     | 30 ++++++++++++++++++++++--------
 net/wireless/nl80211.c | 13 +++++++++++++
 2 files changed, 35 insertions(+), 8 deletions(-)

diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index bdaac04..a929352 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -927,21 +927,28 @@ static int ieee80211_set_fils_discovery(struct wiphy *wiphy,
 	struct ieee80211_fils_discovery *fd;
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 
-	if (!params->tmpl || !params->tmpl_len)
-		return -EINVAL;
-
 	fd = &sdata->vif.bss_conf.fils_discovery;
 	fd->min_interval = params->min_interval;
 	fd->max_interval = params->max_interval;
 
 	old = sdata_dereference(sdata->u.ap.fils_discovery, sdata);
+
+	if (!fd->max_interval) {
+		new = NULL;
+		goto notify_fils;
+	}
+
+	if (!params->tmpl || !params->tmpl_len)
+		return -EINVAL;
+
 	new = kzalloc(sizeof(*new) + params->tmpl_len, GFP_KERNEL);
 	if (!new)
 		return -ENOMEM;
 	new->len = params->tmpl_len;
 	memcpy(new->data, params->tmpl, params->tmpl_len);
-	rcu_assign_pointer(sdata->u.ap.fils_discovery, new);
 
+notify_fils:
+	rcu_assign_pointer(sdata->u.ap.fils_discovery, new);
 	if (old)
 		kfree_rcu(old, rcu_head);
 
@@ -957,19 +964,26 @@ ieee80211_set_unsol_bcast_probe_resp(struct wiphy *wiphy,
 	struct unsol_bcast_probe_resp_data *new, *old = NULL;
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 
-	if (!params->tmpl || !params->tmpl_len)
-		return -EINVAL;
-
 	sdata->vif.bss_conf.unsol_bcast_probe_resp_interval = params->interval;
 
 	old = sdata_dereference(sdata->u.ap.unsol_bcast_probe_resp, sdata);
+
+	if (!params->interval) {
+		new = NULL;
+		goto notify_ubpr;
+	}
+
+	if (!params->tmpl || !params->tmpl_len)
+		return -EINVAL;
+
 	new = kzalloc(sizeof(*new) + params->tmpl_len, GFP_KERNEL);
 	if (!new)
 		return -ENOMEM;
 	new->len = params->tmpl_len;
 	memcpy(new->data, params->tmpl, params->tmpl_len);
-	rcu_assign_pointer(sdata->u.ap.unsol_bcast_probe_resp, new);
 
+notify_ubpr:
+	rcu_assign_pointer(sdata->u.ap.unsol_bcast_probe_resp, new);
 	if (old)
 		kfree_rcu(old, rcu_head);
 
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 58ff2df..a58ec60 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -5274,6 +5274,12 @@ static int nl80211_set_fils_discovery(struct sk_buff *skb,
 	if (ret)
 		return ret;
 
+	fd.max_interval = nla_get_u32(tb[NL80211_FILS_DISCOVERY_ATTR_INT_MAX]);
+
+	if (!fd.max_interval)
+		goto set_fils;
+
+
 	if (!tb[NL80211_FILS_DISCOVERY_ATTR_INT_MIN] ||
 	    !tb[NL80211_FILS_DISCOVERY_ATTR_INT_MAX] ||
 	    !tb[NL80211_FILS_DISCOVERY_ATTR_TMPL])
@@ -5284,6 +5290,7 @@ static int nl80211_set_fils_discovery(struct sk_buff *skb,
 	fd.min_interval = nla_get_u32(tb[NL80211_FILS_DISCOVERY_ATTR_INT_MIN]);
 	fd.max_interval = nla_get_u32(tb[NL80211_FILS_DISCOVERY_ATTR_INT_MAX]);
 
+set_fils:
 	wdev_lock(wdev);
 	ret = rdev_set_fils_discovery(rdev, dev, &fd);
 	wdev_unlock(wdev);
@@ -5312,6 +5319,11 @@ nl80211_set_unsol_bcast_probe_resp(struct sk_buff *skb, struct genl_info *info)
 	if (ret)
 		return ret;
 
+	params.interval = nla_get_u32(tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT]);
+
+	if (!params.interval)
+		goto set_ubpr;
+
 	if (!tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT] ||
 	    !tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL])
 		return -EINVAL;
@@ -5320,6 +5332,7 @@ nl80211_set_unsol_bcast_probe_resp(struct sk_buff *skb, struct genl_info *info)
 	params.tmpl_len = nla_len(tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL]);
 	params.interval = nla_get_u32(tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT]);
 
+set_ubpr:
 	wdev_lock(wdev);
 	ret = rdev_set_unsol_bcast_probe_resp(rdev, dev, &params);
 	wdev_unlock(wdev);
-- 
2.7.4

