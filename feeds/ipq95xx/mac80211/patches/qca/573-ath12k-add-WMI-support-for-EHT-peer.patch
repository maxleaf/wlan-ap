From 1c160478f4d8785cd796f7c74cdc0bc0d2f33675 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Wed, 25 Aug 2021 11:26:45 -0700
Subject: [PATCH 11/27] ath12k: add WMI support for EHT peer

Add new WMI tag and pass the EHT parameters for peer association
to target.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 51 +++++++++++++++++++++++++--
 drivers/net/wireless/ath/ath12k/wmi.h | 19 ++++++++++
 2 files changed, 67 insertions(+), 3 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1731,6 +1731,7 @@ ath12k_wmi_copy_peer_flags(struct wmi_pe
 			   bool hw_crypto_disabled)
 {
 	cmd->peer_flags = 0;
+	cmd->peer_flags_ext = 0;
 
 	if (param->is_wme_set) {
 		if (param->qos_flag)
@@ -1745,7 +1746,8 @@ ath12k_wmi_copy_peer_flags(struct wmi_pe
 			cmd->peer_flags |= WMI_PEER_80MHZ;
 		if (param->bw_160)
 			cmd->peer_flags |= WMI_PEER_160MHZ;
-
+		if (param->bw_320)
+			cmd->peer_flags_ext |= WMI_PEER_EXT_320MHZ;
 		/* Typically if STBC is enabled for VHT it should be enabled
 		 * for HT as well
 		 **/
@@ -1772,6 +1774,8 @@ ath12k_wmi_copy_peer_flags(struct wmi_pe
 			cmd->peer_flags |= WMI_PEER_TWT_REQ;
 		if (param->twt_responder)
 			cmd->peer_flags |= WMI_PEER_TWT_RESP;
+		if (param->eht_flag)
+			cmd->peer_flags_ext |= WMI_PEER_EXT_EHT;
 	}
 
 	/* Suppress authorization for all AUTH modes that need 4-way handshake
@@ -1816,6 +1820,7 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 	struct wmi_peer_assoc_complete_cmd *cmd;
 	struct wmi_vht_rate_set *mcs;
 	struct wmi_he_rate_set *he_mcs;
+	struct wmi_eht_rate_set *eht_mcs;
 	struct sk_buff *skb;
 	struct wmi_tlv *tlv;
 	void *ptr;
@@ -1832,7 +1837,9 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 	      TLV_HDR_SIZE + (peer_legacy_rates_align * sizeof(u8)) +
 	      TLV_HDR_SIZE + (peer_ht_rates_align * sizeof(u8)) +
 	      sizeof(*mcs) + TLV_HDR_SIZE +
-	      (sizeof(*he_mcs) * param->peer_he_mcs_count);
+	      (sizeof(*he_mcs) * param->peer_he_mcs_count) +
+	      TLV_HDR_SIZE + (sizeof(*eht_mcs) * param->peer_eht_mcs_count) +
+	      TLV_HDR_SIZE + TLV_HDR_SIZE;/* For MLO */
 
 	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
 	if (!skb)
@@ -1876,6 +1883,16 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 	memcpy(&cmd->peer_ppet, &param->peer_ppet,
 	       sizeof(param->peer_ppet));
 
+	/* Update 11be capabilities */
+	memcpy_and_pad(cmd->peer_eht_cap_mac, sizeof(cmd->peer_eht_cap_mac),
+		       param->peer_eht_cap_mac, sizeof(param->peer_eht_cap_mac),
+		       0);
+	memcpy_and_pad(cmd->peer_eht_cap_phy, sizeof(cmd->peer_eht_cap_phy),
+		       param->peer_eht_cap_phy, sizeof(param->peer_eht_cap_phy),
+		       0);
+	memcpy_and_pad(&cmd->peer_eht_ppet, sizeof(cmd->peer_eht_ppet),
+		       &param->peer_eht_ppet, sizeof(param->peer_eht_ppet), 0);
+
 	/* Update peer legacy rate information */
 	ptr += sizeof(*cmd);
 
@@ -1947,6 +1964,32 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 		ptr += sizeof(*he_mcs);
 	}
 
+	/* WAR fill MLO Header TAG with 0 length */
+	len = 0;
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, len);
+	ptr += TLV_HDR_SIZE;
+
+	/* Loop through the EHT rate set.
+	 */
+	len = param->peer_eht_mcs_count * sizeof(*eht_mcs);
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, len);
+	ptr += TLV_HDR_SIZE;
+
+	for (i = 0; i < param->peer_eht_mcs_count; i++) {
+		eht_mcs = ptr;
+		eht_mcs->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+						 WMI_TAG_EHT_RATE_SET) |
+				      FIELD_PREP(WMI_TLV_LEN,
+						 sizeof(*eht_mcs) - TLV_HDR_SIZE);
+		eht_mcs->rx_mcs_set = param->peer_eht_rx_mcs_set[i];
+		eht_mcs->tx_mcs_set = param->peer_eht_tx_mcs_set[i];
+		ptr += sizeof(*eht_mcs);
+	}
+
 	/* fill ML Partner links Header TAG */
 	len = 0;
 	tlv = ptr;
@@ -1962,7 +2005,7 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 	}
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
-		   "wmi peer assoc vdev id %d assoc id %d peer mac %pM peer_flags %x rate_caps %x peer_caps %x listen_intval %d ht_caps %x max_mpdu %d nss %d phymode %d peer_mpdu_density %d vht_caps %x he cap_info %x he ops %x he cap_info_ext %x he phy %x %x %x peer_bw_rxnss_override %x\n",
+		   "wmi peer assoc vdev id %d assoc id %d peer mac %pM peer_flags %x rate_caps %x peer_caps %x listen_intval %d ht_caps %x max_mpdu %d nss %d phymode %d peer_mpdu_density %d vht_caps %x he cap_info %x he ops %x he cap_info_ext %x he phy %x %x %x peer_bw_rxnss_override %x peer_flags_ext %x eht mac_cap %x %x eht phy_cap %x %x %x\n",
 		   cmd->vdev_id, cmd->peer_associd, param->peer_mac,
 		   cmd->peer_flags, cmd->peer_rate_caps, cmd->peer_caps,
 		   cmd->peer_listen_intval, cmd->peer_ht_caps,
@@ -1972,7 +2015,10 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 		   cmd->peer_he_ops, cmd->peer_he_cap_info_ext,
 		   cmd->peer_he_cap_phy[0], cmd->peer_he_cap_phy[1],
 		   cmd->peer_he_cap_phy[2],
-		   cmd->peer_bw_rxnss_override);
+		   cmd->peer_bw_rxnss_override, cmd->peer_flags_ext,
+		   cmd->peer_eht_cap_mac[0], cmd->peer_eht_cap_mac[1],
+		   cmd->peer_eht_cap_phy[0], cmd->peer_eht_cap_phy[1],
+		   cmd->peer_eht_cap_phy[2]);
 
 	return ret;
 }
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -1840,6 +1840,7 @@ enum wmi_tlv_tag {
 	WMI_TAG_MAC_PHY_CAPABILITIES_EXT = 0x36F,
 	WMI_TAG_REGULATORY_RULE_EXT_STRUCT = 0x3A9,
 	WMI_TAG_REG_CHAN_LIST_CC_EXT_EVENT,
+	WMI_TAG_EHT_RATE_SET = 0x3C4,
 	WMI_TAG_MAX
 };
 
@@ -3738,6 +3739,7 @@ struct peer_assoc_params {
 	bool bw_40;
 	bool bw_80;
 	bool bw_160;
+	bool bw_320;
 	bool stbc_flag;
 	bool ldpc_flag;
 	bool static_mimops_flag;
@@ -3803,6 +3805,15 @@ struct  wmi_peer_assoc_complete_cmd {
 	u32 peer_he_cap_info_internal;
 	u32 min_data_rate;
 	u32 peer_he_caps_6ghz;
+	u32 sta_type;
+	u32 bss_max_idle_option;
+	u32 auth_mode;
+	u32 peer_flags_ext;
+	u32 puncture_20mhz_bitmap;
+	u32 peer_eht_cap_mac[WMI_MAX_EHTCAP_MAC_SIZE];
+	u32 peer_eht_cap_phy[WMI_MAX_EHTCAP_PHY_SIZE];
+	u32 peer_eht_ops;
+	struct wmi_ppe_threshold peer_eht_ppet;
 } __packed;
 
 struct wmi_stop_scan_cmd {
@@ -4100,6 +4111,9 @@ struct wmi_unit_test_cmd {
 #define WMI_PEER_160MHZ		0x40000000
 #define WMI_PEER_SAFEMODE_EN	0x80000000
 
+#define WMI_PEER_EXT_EHT        0x00000001
+#define WMI_PEER_EXT_320MHZ     0x00000002
+
 struct beacon_tmpl_params {
 	u8 vdev_id;
 	u32 tim_ie_offset;
@@ -4132,6 +4146,12 @@ struct wmi_he_rate_set {
 	u32 tx_mcs_set;
 } __packed;
 
+struct wmi_eht_rate_set {
+	u32 tlv_header;
+	u32 rx_mcs_set;
+	u32 tx_mcs_set;
+} __packed;
+
 #define MAX_REG_RULES 10
 #define REG_ALPHA2_LEN 2
 #define MAX_6G_REG_RULES 5
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -2065,6 +2065,12 @@ static void ath12k_peer_assoc_h_eht(stru
 		return;
 
 	arg->eht_flag = true;
+	if (sta->bandwidth == IEEE80211_STA_RX_BW_320) {
+		arg->bw_40 = true;
+		arg->bw_80 = true;
+		arg->bw_160 = true;
+		arg->bw_320 = true;
+	}
 	if (eht_cap->eht_cap_elem.phy_cap_info[5] &
 	    IEEE80211_EHT_PHY_CAP5_PPE_THRESHOLD_PRESENT &&
 	    eht_cap->eht_ppe_thres[0] != 0)
