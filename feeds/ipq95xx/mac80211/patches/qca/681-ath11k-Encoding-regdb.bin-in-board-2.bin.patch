From 280215228b96d7a6a4000a5f65bd015d7c21ffac Mon Sep 17 00:00:00 2001
From: Karthik M <quic_karm@quicinc.com>
Date: Fri, 14 Oct 2022 20:28:38 +0530
Subject: [PATCH] ath11k: Encoding regdb.bin in board-2.bin

Add support to encode regdb.bin in board-2.bin along with the bdf files.

Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.c | 96 ++++++++++++--------------
 drivers/net/wireless/ath/ath11k/core.h |  6 +-
 drivers/net/wireless/ath/ath11k/hw.h   |  2 +
 drivers/net/wireless/ath/ath11k/qmi.c  | 56 ++++++++++-----
 drivers/net/wireless/ath/ath11k/qmi.h  |  3 +
 5 files changed, 96 insertions(+), 67 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -149,7 +149,7 @@ static const struct ath11k_hw_params ath
 		.supports_suspend = false,
 		.hal_desc_sz = sizeof(struct hal_rx_desc_ipq8074),
 		.reo_dest_ring_map_shift = HAL_REO_DEST_RING_CTRL_HASH_RING_SHIFT,
-		.supports_regdb = false,
+		.supports_regdb = true,
 		.fix_l1ss = true,
 		.credit_flow = false,
 		.hal_params = &ath11k_hw_hal_params_ipq8074,
@@ -228,7 +228,7 @@ static const struct ath11k_hw_params ath
 		.supports_suspend = false,
 		.hal_desc_sz = sizeof(struct hal_rx_desc_ipq8074),
 		.reo_dest_ring_map_shift = HAL_REO_DEST_RING_CTRL_HASH_RING_SHIFT,
-		.supports_regdb = false,
+		.supports_regdb = true,
 		.fix_l1ss = true,
 		.credit_flow = false,
 		.max_tx_ring = DP_TCL_NUM_RING_MAX,
@@ -378,7 +378,7 @@ static const struct ath11k_hw_params ath
 		.supports_suspend = false,
 		.hal_desc_sz = sizeof(struct hal_rx_desc_qcn9074),
 		.reo_dest_ring_map_shift = HAL_REO_DEST_RING_CTRL_HASH_RING_SHIFT,
-		.supports_regdb = false,
+		.supports_regdb = true,
 		.fix_l1ss = true,
 		.credit_flow = false,
 		.hal_params = &ath11k_hw_hal_params_ipq8074,
@@ -589,6 +589,7 @@ static const struct ath11k_hw_params ath
 		.hal_params = &ath11k_hw_hal_params_ipq8074,
 		.host_ce_config = ath11k_host_ce_config_qcn9074,
 		.reo_dest_ring_map_shift = HAL_REO_DEST_RING_CTRL_HASH_RING_SHIFT,
+		.supports_regdb = true,
 		.ce_count = 6,
 		.target_ce_config = ath11k_target_ce_config_wlan_ipq5018,
 		.target_ce_count = 9,
@@ -669,6 +670,7 @@ static const struct ath11k_hw_params ath
 		.idle_ps = false,
 		.supports_suspend = false,
 		.host_ce_config = ath11k_host_ce_config_qcn9074,
+		.supports_regdb = true,
 		.ce_count = 6,
 		.target_ce_config = ath11k_target_ce_config_wlan_ipq5018,
 		.target_ce_count = 9,
@@ -720,6 +722,7 @@ static const struct ath11k_hw_params ath
 		.regs = &ipq8074_regs,
 		.qmi_service_ins_id = ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_IPQ8074,
 		.host_ce_config = ath11k_host_ce_config_ipq9574,
+		.supports_regdb = true,
 		.ce_count = 10,
 		.target_ce_config = ath11k_target_ce_config_wlan_ipq9574,
 		.target_ce_count = 10,
@@ -956,7 +959,7 @@ int ath11k_core_check_dt(struct ath11k_b
 }
 
 static int ath11k_core_create_board_name(struct ath11k_base *ab, char *name,
-					 size_t name_len)
+					 char *defaultname, size_t name_len)
 {
 	/* strlen(',variant=') + strlen(ab->qmi.target.bdf_ext) */
 	char variant[9 + ATH11K_QMI_BDF_EXT_STR_LENGTH] = { 0 };
@@ -968,7 +971,8 @@ static int ath11k_core_create_board_name
 	switch (ab->id.bdf_search) {
 	case ATH11K_BDF_SEARCH_BUS_AND_BOARD:
 		scnprintf(name, name_len,
-			  "bus=%s,vendor=%04x,device=%04x,subsystem-vendor=%04x,subsystem-device=%04x,qmi-chip-id=%d,qmi-board-id=%d%s",
+			  "bus=%s,vendor=%04x,device=%04x,subsystem-vendor=%04x,"
+			  "subsystem-device=%04x,qmi-chip-id=%d,qmi-board-id=%d%s",
 			  ath11k_bus_str(ab->hif.bus),
 			  ab->id.vendor, ab->id.device,
 			  ab->id.subsystem_vendor,
@@ -983,6 +987,12 @@ static int ath11k_core_create_board_name
 			  ath11k_bus_str(ab->hif.bus),
 			  ab->qmi.target.chip_id,
 			  ab->qmi.target.board_id, variant);
+
+		scnprintf(defaultname, name_len,
+			  "bus=%s,qmi-chip-id=%d,qmi-board-id=%d%s",
+			  ath11k_bus_str(ab->hif.bus),
+			  ab->qmi.target.chip_id,
+			  ATH11K_DEFAULT_ID, variant);
 		break;
 	}
 
@@ -1025,7 +1035,9 @@ static int ath11k_core_parse_bd_ie_board
 					 struct ath11k_board_data *bd,
 					 const void *buf, size_t buf_len,
 					 const char *boardname,
-					 int bd_ie_type)
+					 int ie_id,
+					 int name_id,
+					 int data_id)
 {
 	const struct ath11k_fw_ie *hdr;
 	bool name_match_found;
@@ -1035,7 +1047,7 @@ static int ath11k_core_parse_bd_ie_board
 
 	name_match_found = false;
 
-	/* go through ATH11K_BD_IE_BOARD_ elements */
+	/* go through ATH11K_BD_IE_BOARD_/ATH11K_BD_IE_REGDB_ elements */
 	while (buf_len > sizeof(struct ath11k_fw_ie)) {
 		hdr = buf;
 		board_ie_id = le32_to_cpu(hdr->id);
@@ -1046,48 +1058,51 @@ static int ath11k_core_parse_bd_ie_board
 		buf += sizeof(*hdr);
 
 		if (buf_len < ALIGN(board_ie_len, 4)) {
-			ath11k_err(ab, "invalid ATH11K_BD_IE_BOARD length: %zu < %zu\n",
+			ath11k_err(ab, "invalid %s length: %zu < %zu\n",
+				   ath11k_bd_ie_type_str(ie_id),
 				   buf_len, ALIGN(board_ie_len, 4));
 			ret = -EINVAL;
 			goto out;
 		}
 
-		switch (board_ie_id) {
-		case ATH11K_BD_IE_BOARD_NAME:
+		if (board_ie_id == name_id) {
 			ath11k_dbg_dump(ab, ATH11K_DBG_BOOT, "board name", "",
 					board_ie_data, board_ie_len);
 
 			if (board_ie_len != strlen(boardname))
-				break;
+				goto next;
 
 			ret = memcmp(board_ie_data, boardname, strlen(boardname));
 			if (ret)
-				break;
+				goto next;
 
 			name_match_found = true;
 			ath11k_dbg(ab, ATH11K_DBG_BOOT,
-				   "boot found match for name '%s'",
+				   "boot found match %s for name '%s'",
+				   ath11k_bd_ie_type_str(ie_id),
 				   boardname);
-			break;
-		case ATH11K_BD_IE_BOARD_DATA:
+		} else if (board_ie_id == data_id) {
 			if (!name_match_found)
 				/* no match found */
-				break;
+				goto next;
 
 			ath11k_dbg(ab, ATH11K_DBG_BOOT,
-				   "boot found board data for '%s'", boardname);
+				   "boot found %s for '%s'",
+                                   ath11k_bd_ie_type_str(ie_id),
+				   boardname);
 
 			bd->data = board_ie_data;
 			bd->len = board_ie_len;
 
 			ret = 0;
 			goto out;
-		default:
-			ath11k_warn(ab, "unknown ATH11K_BD_IE_BOARD found: %d\n",
+		} else {
+			ath11k_warn(ab, "unknown %s id found: %d\n",
+				    ath11k_bd_ie_type_str(ie_id),
 				    board_ie_id);
-			break;
 		}
 
+next:
 		/* jump over the padding */
 		board_ie_len = ALIGN(board_ie_len, 4);
 
@@ -1104,7 +1119,10 @@ out:
 
 static int ath11k_core_fetch_board_data_api_n(struct ath11k_base *ab,
 					      struct ath11k_board_data *bd,
-					      const char *boardname)
+					      const char *boardname,
+					      int ie_id_match,
+					      int name_id,
+					      int data_id)
 {
 	size_t len, magic_len;
 	const u8 *data;
@@ -1169,22 +1187,23 @@ static int ath11k_core_fetch_board_data_
 			goto err;
 		}
 
-		switch (ie_id) {
-		case ATH11K_BD_IE_BOARD:
+		if (ie_id == ie_id_match) {
 			ret = ath11k_core_parse_bd_ie_board(ab, bd, data,
 							    ie_len,
 							    boardname,
-							    ATH11K_BD_IE_BOARD);
+							    ie_id_match,
+							    name_id,
+							    data_id);
 			if (ret == -ENOENT)
 				/* no match found, continue */
-				break;
+				goto next;
 			else if (ret)
 				/* there was an error, bail out */
 				goto err;
 			/* either found or error, so stop searching */
 			goto out;
 		}
-
+next:
 		/* jump over the padding */
 		ie_len = ALIGN(ie_len, 4);
 
@@ -1194,8 +1213,9 @@ static int ath11k_core_fetch_board_data_
 
 out:
 	if (!bd->data || !bd->len) {
-		ath11k_err(ab,
-			   "failed to fetch board data for %s from %s\n",
+		ath11k_dbg(ab, ATH11K_DBG_BOOT,
+			   "failed to fetch %s for %s from %s\n",
+			   ath11k_bd_ie_type_str(ie_id_match),
 			   boardname, filepath);
 		ret = -ENODATA;
 		goto err;
@@ -1223,28 +1243,43 @@ int ath11k_core_fetch_board_data_api_1(s
 	return 0;
 }
 
-#define BOARD_NAME_SIZE 200
 int ath11k_core_fetch_bdf(struct ath11k_base *ab, struct ath11k_board_data *bd)
 {
-	char boardname[BOARD_NAME_SIZE];
+	char boardname[BOARD_NAME_SIZE], boarddefaultname[BOARD_NAME_SIZE];
 	int ret;
 
-	ret = ath11k_core_create_board_name(ab, boardname, BOARD_NAME_SIZE);
+	ret = ath11k_core_create_board_name(ab, boardname, boarddefaultname,
+			                    BOARD_NAME_SIZE);
 	if (ret) {
 		ath11k_err(ab, "failed to create board name: %d", ret);
 		return ret;
 	}
 
 	ab->bd_api = 2;
-	ret = ath11k_core_fetch_board_data_api_n(ab, bd, boardname);
+	ret = ath11k_core_fetch_board_data_api_n(ab, bd, boardname,
+			                         ATH11K_BD_IE_BOARD,
+						 ATH11K_BD_IE_BOARD_NAME,
+						 ATH11K_BD_IE_BOARD_DATA);
+	if (!ret)
+		goto success;
+
+	ret = ath11k_core_fetch_board_data_api_n(ab, bd, boarddefaultname,
+			                         ATH11K_BD_IE_BOARD,
+						 ATH11K_BD_IE_BOARD_NAME,
+						 ATH11K_BD_IE_BOARD_DATA);
 	if (!ret)
 		goto success;
 
 	ab->bd_api = 1;
 	ret = ath11k_core_fetch_board_data_api_1(ab, bd, ATH11K_DEFAULT_BOARD_FILE);
 	if (ret) {
-		ath11k_err(ab, "failed to fetch board-2.bin or board.bin from %s\n",
+		ath11k_err(ab, "failed to fetch board.bin from %s\n",
 			   ab->hw_params.fw.dir);
+	} else {
+		ret = ath11k_core_fetch_board_data_api_1(ab, bd, ATH11K_BOARD_API2_FILE);
+		if (ret)
+			ath11k_err(ab, "failed to fetch board-2.bin from %s\n",
+				   ab->hw_params.fw.dir);
 		return ret;
 	}
 
@@ -1255,14 +1290,42 @@ success:
 
 int ath11k_core_fetch_regdb(struct ath11k_base *ab, struct ath11k_board_data *bd)
 {
+	char regdbname[REGDB_NAME_SIZE], regdbdefaultname[REGDB_NAME_SIZE];
 	int ret;
 
+	ret = ath11k_core_create_board_name(ab, regdbname, regdbdefaultname,
+			                    REGDB_NAME_SIZE);
+
+	if (ret) {
+		ath11k_err(ab, "failed to create regdb name: %d", ret);
+		return ret;
+	}
+
+	ab->bd_api = 2;
+	ret = ath11k_core_fetch_board_data_api_n(ab, bd, regdbname,
+			                         ATH11K_BD_IE_REGDB,
+						 ATH11K_BD_IE_REGDB_NAME,
+						 ATH11K_BD_IE_REGDB_DATA);
+	if (!ret)
+		goto success;
+
+	ret = ath11k_core_fetch_board_data_api_n(ab, bd, regdbdefaultname,
+			                         ATH11K_BD_IE_REGDB,
+						 ATH11K_BD_IE_REGDB_NAME,
+						 ATH11K_BD_IE_REGDB_DATA);
+	if (!ret)
+		goto success;
+
+	ab->bd_api = 1;
 	ret = ath11k_core_fetch_board_data_api_1(ab, bd, ATH11K_REGDB_FILE_NAME);
-	if (ret)
-		ath11k_dbg(ab, ATH11K_DBG_BOOT, "failed to fetch %s from %s\n",
+	if (ret) {
+		ath11k_err(ab, "failed to fetch %s file from %s\n",
 			   ATH11K_REGDB_FILE_NAME, ab->hw_params.fw.dir);
-
-	return ret;
+		return ret;
+	}
+success:
+	ath11k_dbg(ab, ATH11K_DBG_BOOT, "using board api %d\n", ab->bd_api);
+	return 0;
 }
 
 static void ath11k_core_stop(struct ath11k_base *ab)
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -84,6 +84,9 @@ enum ath11k_bdf_search {
 	ATH11K_BDF_SEARCH_BUS_AND_BOARD,
 };
 
+#define BOARD_NAME_SIZE 100
+#define REGDB_NAME_SIZE 100
+
 enum wme_ac {
 	WME_AC_BE,
 	WME_AC_BK,
@@ -1466,7 +1469,8 @@ void ath11k_core_free(struct ath11k_base
 int ath11k_core_fetch_bdf(struct ath11k_base *ath11k,
 			  struct ath11k_board_data *bd);
 int ath11k_config_qdss(struct ath11k_base *ab);
-int ath11k_core_fetch_regdb(struct ath11k_base *ab, struct ath11k_board_data *bd);
+int ath11k_core_fetch_regdb(struct ath11k_base *ab,
+			    struct ath11k_board_data *bd);
 int ath11k_core_fetch_board_data_api_1(struct ath11k_base *ab,
 				       struct ath11k_board_data *bd,
 				       const char *name);
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -106,6 +106,8 @@ struct ath11k_cfr_peer_tx_param;
 #define ATH11K_AMSS_FILE		"amss.bin"
 #define ATH11K_M3_FILE			"m3.bin"
 #define ATH11K_REGDB_FILE_NAME		"regdb.bin"
+#define ATH11K_REGDB_BINARY		"regdb"
+#define ATH11K_DEFAULT_ID		255
 #define NODE_ID_BASE			0x27
 
 enum ath11k_hw_rate_cck {
@@ -364,12 +366,32 @@ enum ath11k_bd_ie_board_type {
 	ATH11K_BD_IE_BOARD_DATA = 1,
 };
 
+enum ath12k_bd_ie_regdb_type {
+	ATH11K_BD_IE_REGDB_NAME = 0,
+	ATH11K_BD_IE_REGDB_DATA = 1,
+};
+
 enum ath11k_bd_ie_type {
 	/* contains sub IEs of enum ath11k_bd_ie_board_type */
 	ATH11K_BD_IE_BOARD = 0,
-	ATH11K_BD_IE_BOARD_EXT = 1,
+	ATH11K_BD_IE_REGDB = 1,
+	ATH11K_BD_IE_BOARD_EXT = 2,
 };
 
+static inline const char *ath11k_bd_ie_type_str(enum ath11k_bd_ie_type type)
+{
+	switch (type) {
+	case ATH11K_BD_IE_BOARD:
+		return "board data";
+	case ATH11K_BD_IE_REGDB:
+		return "regdb data";
+	case ATH11K_BD_IE_BOARD_EXT:
+		return "board data ext";
+	}
+
+	return "unknown";
+}
+
 struct ath11k_hw_regs {
 	u32 hal_tcl1_ring_base_lsb;
 	u32 hal_tcl1_ring_base_msb;
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -1409,6 +1409,24 @@ static struct qmi_elem_info qmi_wlanfw_c
 					   eeprom_read_timeout),
 	},
 	{
+                .data_type      = QMI_OPT_FLAG,
+                .elem_len       = 1,
+                .elem_size      = sizeof(u8),
+                .array_type     = NO_ARRAY,
+                .tlv_type       = 0x24,
+                .offset         = offsetof(struct qmi_wlanfw_cap_resp_msg_v01,
+                                           regdb_support_valid),
+        },
+        {
+                .data_type      = QMI_UNSIGNED_1_BYTE,
+                .elem_len       = 1,
+                .elem_size      = sizeof(u8),
+                .array_type     = NO_ARRAY,
+                .tlv_type       = 0x24,
+                .offset         = offsetof(struct qmi_wlanfw_cap_resp_msg_v01,
+                                           regdb_support),
+        },
+        {
 		.data_type	= QMI_EOTI,
 		.array_type	= NO_ARRAY,
 		.tlv_type	= QMI_COMMON_TLV_TYPE,
@@ -3165,6 +3183,11 @@ static int ath11k_qmi_request_target_cap
 		ath11k_dbg(ab, ATH11K_DBG_QMI, "qmi cal data supported from eeprom\n");
 	}
 
+	if (resp.regdb_support_valid) {
+		ab->qmi.target.regdb = resp.regdb_support;
+		ath11k_dbg(ab, ATH11K_DBG_QMI, "qmi regdb download is supported\n");
+	}
+
 	ath11k_info(ab, "chip_id 0x%x chip_family 0x%x board_id 0x%x soc_id 0x%x\n",
 		    ab->qmi.target.chip_id, ab->qmi.target.chip_family,
 		    ab->qmi.target.board_id, ab->qmi.target.soc_id);
@@ -3199,7 +3222,7 @@ static int ath11k_qmi_load_file_target_m
 
 	memset(&resp, 0, sizeof(resp));
 
-	if (ab->bus_params.fixed_bdf_addr) {
+	if (ab->bus_params.fixed_bdf_addr  && !ab->qmi.target.regdb) {
 		bdf_addr = ioremap(ab->hw_params.bdf_addr, ab->hw_params.fw.board_size);
 		if (!bdf_addr) {
 			ath11k_warn(ab, "qmi ioremap error for bdf_addr\n");
@@ -3228,7 +3251,7 @@ static int ath11k_qmi_load_file_target_m
 			req->end = 1;
 		}
 
-		if (ab->bus_params.fixed_bdf_addr ||
+		if ((ab->bus_params.fixed_bdf_addr && !ab->qmi.target.regdb) ||
 		    type == ATH11K_QMI_FILE_TYPE_EEPROM) {
 			req->data_valid = 0;
 			req->end = 1;
@@ -3237,7 +3260,7 @@ static int ath11k_qmi_load_file_target_m
 			memcpy(req->data, temp, req->data_len);
 		}
 
-		if (ab->bus_params.fixed_bdf_addr) {
+		if (ab->bus_params.fixed_bdf_addr  && !ab->qmi.target.regdb) {
 			if (type == ATH11K_QMI_FILE_TYPE_CALDATA)
 				bdf_addr += ab->hw_params.fw.cal_offset;
 
@@ -3276,7 +3299,7 @@ static int ath11k_qmi_load_file_target_m
 			goto err_iounmap;
 		}
 
-		if (ab->bus_params.fixed_bdf_addr ||
+		if ((ab->bus_params.fixed_bdf_addr && !ab->qmi.target.regdb) ||
 		    type == ATH11K_QMI_FILE_TYPE_EEPROM) {
 			remaining = 0;
 		} else {
@@ -3289,7 +3312,7 @@ static int ath11k_qmi_load_file_target_m
 	}
 
 err_iounmap:
-	if (ab->bus_params.fixed_bdf_addr)
+	if (ab->bus_params.fixed_bdf_addr  && !ab->qmi.target.regdb)
 		iounmap(bdf_addr);
 
 err_free_req:
@@ -3335,22 +3358,23 @@ static int ath11k_qmi_load_bdf_qmi(struc
 
 	if (regdb) {
 		ret = ath11k_core_fetch_regdb(ab, &bd);
+		if (ret) {
+			ath11k_warn(ab, "qmi failed to fetch regdb file: %d\n", ret);
+			goto out;
+		}
+		bdf_type = ATH11K_QMI_BDF_TYPE_REGDB;
 	} else {
 		ret = ath11k_core_fetch_bdf(ab, &bd);
-		if (ret)
+		if (ret) {
 			ath11k_warn(ab, "qmi failed to fetch board file: %d\n", ret);
+			goto out;
+		}
+		if (bd.len >= SELFMAG && memcmp(bd.data, ELFMAG, SELFMAG) == 0)
+			bdf_type = ATH11K_QMI_BDF_TYPE_ELF;
+		else
+			bdf_type = ATH11K_QMI_BDF_TYPE_BIN;
 	}
 
-	if (ret)
-		goto out;
-
-	if (regdb)
-		bdf_type = ATH11K_QMI_BDF_TYPE_REGDB;
-	else if (bd.len >= SELFMAG && memcmp(bd.data, ELFMAG, SELFMAG) == 0)
-		bdf_type = ATH11K_QMI_BDF_TYPE_ELF;
-	else
-		bdf_type = ATH11K_QMI_BDF_TYPE_BIN;
-
 	ath11k_dbg(ab, ATH11K_DBG_QMI, "qmi bdf_type %d\n", bdf_type);
 
 	fw_size = min_t(u32, ab->hw_params.fw.board_size, bd.len);
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -177,6 +177,7 @@ struct target_info {
 	u32 soc_id;
 	u32 fw_version;
 	u32 eeprom_caldata;
+	u8 regdb;
 	char fw_build_timestamp[ATH11K_QMI_WLANFW_MAX_TIMESTAMP_LEN_V01 + 1];
 	char fw_build_id[ATH11K_QMI_WLANFW_MAX_BUILD_ID_LEN_V01 + 1];
 	char bdf_ext[ATH11K_QMI_BDF_EXT_STR_LENGTH];
@@ -574,6 +575,8 @@ struct qmi_wlanfw_cap_resp_msg_v01 {
 	u32 otp_version;
 	u8 eeprom_read_timeout_valid;
 	u32 eeprom_read_timeout;
+	u8 regdb_support_valid;
+	u8 regdb_support;
 };
 
 struct qmi_wlanfw_cap_req_msg_v01 {
