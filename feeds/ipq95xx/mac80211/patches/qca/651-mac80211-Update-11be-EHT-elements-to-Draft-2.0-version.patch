From 9b729b3e18e90684ac94c0c92f1b515293fb6027 Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Tue, 26 Jul 2022 00:45:34 -0700
Subject: [PATCH] ath12k: Update 11be EHT elements to Draft 2.0 version

Update the EHT operations elements to Draft 2.0 and fix interop
issues with stations

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 include/linux/ieee80211.h | 25 +++++++++++++++++++------
 include/net/mac80211.h    |  3 ++-
 net/mac80211/eht.c        |  5 +++--
 net/mac80211/mesh.c       |  8 ++++++++
 net/mac80211/mesh_plink.c | 13 ++++++++++---
 net/mac80211/spectmgmt.c  |  3 ++-
 net/mac80211/util.c       | 23 ++++++++++++++++-------
 7 files changed, 60 insertions(+), 20 deletions(-)

Index: b/include/linux/ieee80211.h
===================================================================
--- a/include/linux/ieee80211.h	2022-11-18 18:35:15.600296202 +0530
+++ b/include/linux/ieee80211.h	2022-11-18 18:35:15.596296230 +0530
@@ -1996,7 +1996,7 @@ struct ieee80211_eht_mcs_nss_supp_bw {
  * struct ieee80211_eht_cap_elem_fixed - EHT capabilities fixed data
  *
  * This structure is the "EHT Capabilities element" fixed fields as
- * described in P802.11be_D1.4 section 9.4.2.313.
+ * described in P802.11be_D2.0 section 9.4.2.313.
  *
  * @mac_cap_info: MAC capabilities, see IEEE80211_EHT_MAC_CAP*
  * @phy_cap_info: PHY capabilities, see IEEE80211_EHT_PHY_CAP*
@@ -2022,16 +2022,25 @@ struct ieee80211_eht_cap_elem {
 	u8 optional[];
 } __packed;
 
+#define EHTOP_PARAMS_EHTOP_INFORMATION_PRESENT                  BIT(0)
+#define EHTOP_PARAMS_DISABLED_SUBCHANNEL_BITMAP_PRESENT         BIT(1)
+#define EHTOP_PARAMS_EHT_DEFAULT_PE_DURATION                    BIT(2)
+#define EHTOP_PARAMS_GROUP_ADDRESSED_BU_INDICATION_LIMIT        BIT(3)
+#define EHTOP_PARAMS_GROUP_ADDRESSED_BU_INDICATION_EXPONENT     BIT(4)
+
+#define DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE 2
+
 /**
  * struct ieee80211_eht_operation - eht operation element
  */
 struct ieee80211_eht_operation {
+	u8 ehtop_params;
+	struct ieee80211_eht_mcs_nss_supp_20mhz_only basic_eht_mcs;
 	u8 chan_width:3,
 	   reserved1:5;
-	u8 ccfs;
-	u8 disable_sub_chan_bitmap_present:1,
-	   reserved2:7;
-	__le16 disable_subchannel_bitmap;
+	u8 ccfs0;
+	u8 ccfs1;
+	__le16 disable_subchannel_bitmap[0];
 } __packed;
 
 #define IEEE80211_EHT_OPER_DISABLED_SUBCHANNEL_BITMAP_PRESENT	0x1
@@ -2790,7 +2799,7 @@ ieee80211_he_spr_size(const u8 *he_spr_i
 #define IEEE80211_EHT_PHY_CAP8_RX_4096QAM_WIDER_BW_DL_OFDMA	0x02
 
 /*
- * EHT operation channel width as defined in P802.11be_D1.4 section 9.4.2.311
+ * EHT operation channel width as defined in P802.11be_D2.0 section 9.4.2.311
  */
 #define IEEE80211_EHT_OPER_CHAN_WIDTH		0x7
 #define IEEE80211_EHT_OPER_CHAN_WIDTH_20MHZ	0
@@ -2902,6 +2911,10 @@ ieee80211_eht_oper_size_ok(const u8 *dat
 	const struct ieee80211_eht_operation *elem = (const void *)data;
 	u8 needed = sizeof(*elem);
 
+	if (elem->ehtop_params &
+	    EHTOP_PARAMS_DISABLED_SUBCHANNEL_BITMAP_PRESENT)
+		needed += DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
+
 	if (len < needed)
 		return false;
 
Index: b/include/net/mac80211.h
===================================================================
--- a/include/net/mac80211.h	2022-11-18 18:35:15.600296202 +0530
+++ b/include/net/mac80211.h	2022-11-18 18:35:15.600296202 +0530
@@ -760,7 +760,8 @@ struct ieee80211_bss_conf {
 	bool eht_support;
 	struct {
 		u8 chan_width;
-		u8 ccfs;
+		u8 ccfs0;
+		u8 ccfs1;
 		u8 present_bm;
 	} eht_oper;
 	bool ap_ps_enable;
Index: b/net/mac80211/eht.c
===================================================================
--- a/net/mac80211/eht.c	2022-11-18 18:35:15.600296202 +0530
+++ b/net/mac80211/eht.c	2022-11-18 18:35:15.600296202 +0530
@@ -85,6 +85,7 @@ void ieee80211_eht_op_ie_to_bss_conf(str
 		return;
 
 	vif->bss_conf.eht_oper.chan_width = u8_get_bits(op_ie->chan_width, IEEE80211_EHT_OPER_CHAN_WIDTH);
-	vif->bss_conf.eht_oper.ccfs = op_ie->ccfs;
-	vif->bss_conf.eht_oper.present_bm = u8_get_bits(op_ie->chan_width, IEEE80211_EHT_OPER_PRESENT_BM);
+	vif->bss_conf.eht_oper.ccfs0 = op_ie->ccfs0;
+	vif->bss_conf.eht_oper.ccfs1 = op_ie->ccfs1;
+	vif->bss_conf.eht_oper.present_bm = u8_get_bits(op_ie->ehtop_params, EHTOP_PARAMS_EHTOP_INFORMATION_PRESENT);
 }
Index: b/net/mac80211/mesh.c
===================================================================
--- a/net/mac80211/mesh.c	2022-11-18 18:35:15.600296202 +0530
+++ b/net/mac80211/mesh.c	2022-11-18 18:35:15.600296202 +0530
@@ -699,12 +699,14 @@ int mesh_add_eht_oper_ie(struct ieee8021
 		return 0;
 
 	len = 2 + 1 + sizeof(struct ieee80211_eht_operation);
+	if (sdata->vif.bss_conf.chandef.ru_punct_bitmap)
+		len += DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
 
 	if (skb_tailroom(skb) < len)
 		return -ENOMEM;
 
 	pos = skb_put(skb, len);
-	ieee80211_ie_build_eht_oper(pos, &sdata->vif.bss_conf.chandef);
+	ieee80211_ie_build_eht_oper(pos, &sdata->vif.bss_conf.chandef, eht_cap);
 
 	return 0;
 }
@@ -903,6 +905,7 @@ ieee80211_mesh_build_beacon(struct ieee8
 	u8 *pos;
 	struct ieee80211_sub_if_data *sdata;
 	int hdr_len = offsetofend(struct ieee80211_mgmt, u.beacon);
+	int eht_optional_sz = 0;
 
 	sdata = container_of(ifmsh, struct ieee80211_sub_if_data, u.mesh);
 	rcu_read_lock();
@@ -914,6 +917,10 @@ ieee80211_mesh_build_beacon(struct ieee8
 						NL80211_IFTYPE_MESH_POINT);
 	ie_len_eht_cap = ieee80211_ie_len_eht_cap(sdata,
 						  NL80211_IFTYPE_MESH_POINT);
+
+	if (sdata->vif.bss_conf.chandef.ru_punct_bitmap)
+		eht_optional_sz = DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
+
 	head_len = hdr_len +
 		   2 + /* NULL SSID */
 		   /* Channel Switch Announcement */
@@ -939,6 +946,7 @@ ieee80211_mesh_build_beacon(struct ieee8
 		   2 + 1 + sizeof(struct ieee80211_he_6ghz_capa) +
 		   ie_len_eht_cap +
 		   2 + 1 + sizeof(struct ieee80211_eht_operation) +
+		   + eht_optional_sz +
 		   ifmsh->ie_len;
 
 	bcn = kzalloc(sizeof(*bcn) + head_len + tail_len, GFP_KERNEL);
Index: b/net/mac80211/mesh_plink.c
===================================================================
--- a/net/mac80211/mesh_plink.c	2022-11-18 18:35:15.600296202 +0530
+++ b/net/mac80211/mesh_plink.c	2022-11-18 18:35:15.600296202 +0530
@@ -222,6 +222,10 @@ static int mesh_plink_frame_tx(struct ie
 	u8 ie_len_he_cap, ie_len_eht_cap;
 	int hdr_len = offsetofend(struct ieee80211_mgmt, u.action.u.self_prot);
 	int err = -ENOMEM;
+	int eht_optional_sz = 0;
+
+	if (sdata->vif.bss_conf.chandef.ru_punct_bitmap)
+		eht_optional_sz = DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
 
 	ie_len_he_cap = ieee80211_ie_len_he_cap(sdata,
 						NL80211_IFTYPE_MESH_POINT);
@@ -245,6 +249,7 @@ static int mesh_plink_frame_tx(struct ie
 			    2 + 1 + sizeof(struct ieee80211_he_6ghz_capa) +
 			    ie_len_eht_cap +
 			    2 + 1 + sizeof(struct ieee80211_eht_operation) +
+			    + eht_optional_sz +
 			    2 + 8 + /* peering IE */
 			    sdata->u.mesh.ie_len);
 	if (!skb)
@@ -483,7 +488,7 @@ static void mesh_sta_info_init(struct ie
 	 */
 	if (elems->eht_operation &&
 	    elems->eht_operation->chan_width >= IEEE80211_EHT_OPER_CHAN_WIDTH_80MHZ &&
-	    elems->eht_operation->disable_sub_chan_bitmap_present) {
+	    elems->eht_operation->ehtop_params & EHTOP_PARAMS_DISABLED_SUBCHANNEL_BITMAP_PRESENT) {
 		struct ieee80211_channel *chan = sdata->vif.bss_conf.chandef.chan;
 
 		cfg80211_chandef_create(&eht_chandef, chan, NL80211_CHAN_NO_HT);
@@ -503,10 +508,12 @@ static void mesh_sta_info_init(struct ie
 			default:
 				eht_chandef.width = NL80211_CHAN_WIDTH_20;
 		}
-		eht_chandef.center_freq1 = ieee80211_channel_to_frequency(elems->eht_operation->ccfs,
+		eht_chandef.center_freq1 = ieee80211_channel_to_frequency(elems->eht_operation->ccfs0,
+									  chan->band);
+		eht_chandef.center_freq2 = ieee80211_channel_to_frequency(elems->eht_operation->ccfs1,
 									  chan->band);
 		if (cfg80211_ru_punct_bitmap_valid(&eht_chandef))
-			sta->sta.ru_punct_bitmap = elems->eht_operation->disable_subchannel_bitmap;
+			sta->sta.ru_punct_bitmap = elems->eht_operation->disable_subchannel_bitmap[0];
 	}
 
 	if (!test_sta_flag(sta, WLAN_STA_RATE_CONTROL))
Index: b/net/mac80211/spectmgmt.c
===================================================================
--- a/net/mac80211/spectmgmt.c	2022-11-18 18:35:15.600296202 +0530
+++ b/net/mac80211/spectmgmt.c	2022-11-18 18:35:15.600296202 +0530
@@ -152,7 +152,8 @@ int ieee80211_parse_ch_switch_ie(struct
 			eht_oper.chan_width = (eht_oper_params &
 					       IEEE80211_EHT_OPER_CHAN_WIDTH) |
 					       new_chan_width;
-			eht_oper.ccfs = wide_bw_chansw_ie->new_center_freq_seg0;
+			eht_oper.ccfs0 = wide_bw_chansw_ie->new_center_freq_seg0;
+			eht_oper.ccfs1 = wide_bw_chansw_ie->new_center_freq_seg1;
 
 			he_oper.he_oper_params = u32_encode_bits(1,
 					IEEE80211_HE_OPERATION_6GHZ_OP_INFO);
Index: b/net/mac80211/util.c
===================================================================
--- a/net/mac80211/util.c	2022-11-18 18:35:15.600296202 +0530
+++ b/net/mac80211/util.c	2022-11-18 18:37:02.219529000 +0530
@@ -3293,27 +3293,50 @@ out:
 	return pos;
 }
 
-u8 *ieee80211_ie_build_eht_oper(u8 *pos, struct cfg80211_chan_def *chandef)
+u8 *ieee80211_ie_build_eht_oper(u8 *pos, struct cfg80211_chan_def *chandef,
+				const struct ieee80211_sta_eht_cap *eht_cap)
 {
 	struct ieee80211_eht_operation *eht_oper;
 	u32 eht_oper_params = 0;
-	u8 ie_len = 1 + sizeof(struct ieee80211_eht_operation);
+	u8 ie_len;
 	u8 chwidth = 0;
 
+	ie_len = 1 + sizeof(struct ieee80211_eht_operation);
+	if (chandef->ru_punct_bitmap)
+		ie_len += DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
+
 	*pos++ = WLAN_EID_EXTENSION;
 	*pos++ = ie_len;
 	*pos++ = WLAN_EID_EXT_EHT_OPERATION;
 
+	memset(pos, 0, sizeof(struct ieee80211_eht_operation));
 	eht_oper = (struct ieee80211_eht_operation *)pos;
 	pos += sizeof(struct ieee80211_eht_operation);
 
+        eht_oper->ccfs0 =
+                ieee80211_frequency_to_channel(chandef->center_freq1);
+        if (chandef->center_freq2)
+                eht_oper->ccfs1 =
+                        ieee80211_frequency_to_channel(chandef->center_freq2);
+	else
+		eht_oper->ccfs1 = 0;
 
 	switch (chandef->width) {
 	case NL80211_CHAN_WIDTH_320:
 		chwidth = IEEE80211_EHT_OPER_CTRL_CHANWIDTH_320MHZ;
+		eht_oper->ccfs1 = eht_oper->ccfs0;
+		if (chandef->chan->center_freq < chandef->center_freq1)
+			 eht_oper->ccfs0 -= 16;
+		else
+			 eht_oper->ccfs0 += 16;
 		break;
 	case NL80211_CHAN_WIDTH_160:
 		chwidth = IEEE80211_EHT_OPER_CTRL_CHANWIDTH_160MHZ;
+		eht_oper->ccfs1 = eht_oper->ccfs0;
+		if (chandef->chan->center_freq < chandef->center_freq1)
+			eht_oper->ccfs0 -= 8;
+		else
+			eht_oper->ccfs0 += 8;
 		break;
 	case NL80211_CHAN_WIDTH_80P80:
 		chwidth = IEEE80211_EHT_OPER_CTRL_CHANWIDTH_160MHZ;
@@ -3329,18 +3352,21 @@ u8 *ieee80211_ie_build_eht_oper(u8 *pos,
 		break;
 	}
 
+	eht_oper->ehtop_params |= EHTOP_PARAMS_EHTOP_INFORMATION_PRESENT;
+	memcpy(&eht_oper->basic_eht_mcs,
+	       &eht_cap->eht_mcs_nss_supp.only_20mhz,
+	       sizeof(struct ieee80211_eht_mcs_nss_supp_20mhz_only));
+
 	eht_oper_params = (eht_oper_params & IEEE80211_EHT_OPER_CHAN_WIDTH) |
 			   chwidth;
 	eht_oper->chan_width = cpu_to_le32(eht_oper_params);
-	eht_oper->ccfs =
-		ieee80211_frequency_to_channel(chandef->center_freq1);
 
 	if (chandef->ru_punct_bitmap) {
-		eht_oper->disable_sub_chan_bitmap_present = 1;
-		eht_oper->disable_subchannel_bitmap = chandef->ru_punct_bitmap;
+		eht_oper->ehtop_params |= EHTOP_PARAMS_DISABLED_SUBCHANNEL_BITMAP_PRESENT;
+		eht_oper->disable_subchannel_bitmap[0] = chandef->ru_punct_bitmap;
+		pos += DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
 	} else {
-		eht_oper->disable_sub_chan_bitmap_present = 0;
-		eht_oper->disable_subchannel_bitmap = 0;
+		eht_oper->ehtop_params &= ~EHTOP_PARAMS_DISABLED_SUBCHANNEL_BITMAP_PRESENT;
 	}
 	return pos;
 }
@@ -3496,6 +3522,58 @@ bool ieee80211_chandef_vht_oper(struct i
 	return true;
 }
 
+void ieee80211_chandef_eht_oper(struct ieee80211_sub_if_data *sdata,
+				const struct ieee80211_eht_operation *eht_oper,
+				bool support_160, bool support_320,
+				struct cfg80211_chan_def *chandef)
+{
+
+	chandef->center_freq1 =
+		ieee80211_channel_to_frequency(eht_oper->ccfs0,
+					       chandef->chan->band);
+
+	switch (u8_get_bits(eht_oper->chan_width,
+			    IEEE80211_EHT_OPER_CHAN_WIDTH)) {
+	case IEEE80211_EHT_OPER_CHAN_WIDTH_20MHZ:
+		chandef->width = NL80211_CHAN_WIDTH_20;
+		break;
+	case IEEE80211_EHT_OPER_CHAN_WIDTH_40MHZ:
+		chandef->width = NL80211_CHAN_WIDTH_40;
+		break;
+	case IEEE80211_EHT_OPER_CHAN_WIDTH_80MHZ:
+		chandef->width = NL80211_CHAN_WIDTH_80;
+		break;
+	case IEEE80211_EHT_OPER_CHAN_WIDTH_160MHZ:
+		if (support_160) {
+			chandef->width = NL80211_CHAN_WIDTH_160;
+			chandef->center_freq1 =
+				ieee80211_channel_to_frequency(eht_oper->ccfs1,
+							       chandef->chan->band);
+		} else {
+			chandef->width = NL80211_CHAN_WIDTH_80;
+		}
+		break;
+	case IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ:
+		if (support_320) {
+			chandef->width = NL80211_CHAN_WIDTH_320;
+			chandef->center_freq1 =
+				ieee80211_channel_to_frequency(eht_oper->ccfs1,
+							       chandef->chan->band);
+		} else if (support_160) {
+			chandef->width = NL80211_CHAN_WIDTH_160;
+		} else {
+			chandef->width = NL80211_CHAN_WIDTH_80;
+
+			if (chandef->center_freq1 > chandef->chan->center_freq)
+				chandef->center_freq1 -= 40;
+			else
+				chandef->center_freq1 += 40;
+		}
+		break;
+	}
+}
+
+
 bool ieee80211_chandef_he_6ghz_oper(struct ieee80211_sub_if_data *sdata,
 				    const struct ieee80211_he_operation *he_oper,
 				    const struct ieee80211_eht_operation *eht_oper,
@@ -3599,7 +3677,8 @@ bool ieee80211_chandef_he_6ghz_oper(stru
 		break;
 	}
 
-	if (!eht_oper) {
+	if (!eht_oper ||
+	    !(eht_oper->ehtop_params & EHTOP_PARAMS_EHTOP_INFORMATION_PRESENT)) {
 		switch (u8_get_bits(he_6ghz_oper->control,
 				    IEEE80211_HE_6GHZ_OPER_CTRL_CHANWIDTH)) {
 		case IEEE80211_HE_6GHZ_OPER_CTRL_CHANWIDTH_20MHZ:
@@ -3642,37 +3721,8 @@ bool ieee80211_chandef_he_6ghz_oper(stru
 		eht_phy_cap = eht_cap->eht_cap_elem.phy_cap_info[0];
 		support_320 =
 			eht_phy_cap & IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ;
-
-		switch (u8_get_bits(eht_oper->chan_width,
-				    IEEE80211_EHT_OPER_CHAN_WIDTH)) {
-		case IEEE80211_EHT_OPER_CHAN_WIDTH_20MHZ:
-			he_chandef.width = NL80211_CHAN_WIDTH_20;
-			break;
-		case IEEE80211_EHT_OPER_CHAN_WIDTH_40MHZ:
-			he_chandef.width = NL80211_CHAN_WIDTH_40;
-			break;
-		case IEEE80211_EHT_OPER_CHAN_WIDTH_80MHZ:
-			he_chandef.width = NL80211_CHAN_WIDTH_80;
-			break;
-		case IEEE80211_EHT_OPER_CHAN_WIDTH_160MHZ:
-			if (support_160)
-				he_chandef.width = NL80211_CHAN_WIDTH_160;
-			else
-				he_chandef.width = NL80211_CHAN_WIDTH_80;
-			break;
-		case IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ:
-			if (support_320)
-				he_chandef.width = NL80211_CHAN_WIDTH_320;
-			else if (support_160)
-				he_chandef.width = NL80211_CHAN_WIDTH_160;
-			else
-				he_chandef.width = NL80211_CHAN_WIDTH_80;
-			break;
-		}
-
-		he_chandef.center_freq1 =
-			ieee80211_channel_to_frequency(eht_oper->ccfs,
-						       NL80211_BAND_6GHZ);
+		ieee80211_chandef_eht_oper(sdata, eht_oper, support_160,
+					   support_320, &he_chandef);
 	}
 
 	if (!cfg80211_chandef_valid(&he_chandef)) {
Index: b/net/mac80211/ieee80211_i.h
===================================================================
--- a/net/mac80211/ieee80211_i.h	2022-11-18 18:35:15.600296202 +0530
+++ b/net/mac80211/ieee80211_i.h	2022-11-18 18:35:15.600296202 +0530
@@ -2425,7 +2425,8 @@ u8 *ieee80211_ie_build_eht_cap(u8 *pos,
 			       const struct ieee80211_sta_he_cap *he_cap,
 			       const struct ieee80211_sta_eht_cap *eht_cap,
 			       u8 *end);
-u8 *ieee80211_ie_build_eht_oper(u8 *pos, struct cfg80211_chan_def *chandef);
+u8 *ieee80211_ie_build_eht_oper(u8 *pos, struct cfg80211_chan_def *chandef,
+				const struct ieee80211_sta_eht_cap *eht_cap);
 int ieee80211_parse_bitrates(struct cfg80211_chan_def *chandef,
 			     const struct ieee80211_supported_band *sband,
 			     const u8 *srates, int srates_len, u32 *rates);
