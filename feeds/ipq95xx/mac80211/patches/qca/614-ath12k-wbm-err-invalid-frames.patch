From 3b1e0b4fbfba55486a3c74a1bb7ca7f8237286c5 Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Thu, 7 Apr 2022 14:30:17 +0530
Subject: [PATCH] ath12k: drop invalid frames in wbm err path

Drop frames with invalid peer id and frames having continuation
bit set even after sg frames are dropped in wbm err path

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c    | 27 ++++++++++++++++++++++-----
 drivers/net/wireless/ath/ath12k/hal_desc.h |  4 ++++
 drivers/net/wireless/ath/ath12k/hal_rx.c   |  4 ++++
 drivers/net/wireless/ath/ath12k/hal_rx.h   |  1 +
 4 files changed, 31 insertions(+), 5 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index 6e556ce..728c001 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -3668,13 +3668,20 @@ static int ath12k_dp_rx_h_null_q_desc(struct ath12k *ar, struct sk_buff *msdu,
 				      struct sk_buff_head *msdu_list)
 {
 	struct ath12k_base *ab = ar->ab;
-	u16 msdu_len;
+	u16 msdu_len, peer_id;
 	struct hal_rx_desc *desc = (struct hal_rx_desc *)msdu->data;
 	u8 l3pad_bytes;
 	struct ath12k_skb_rxcb *rxcb = ATH12K_SKB_RXCB(msdu);
 	u32 hal_rx_desc_sz = ar->ab->hw_params.hal_desc_sz;
 
 	msdu_len = ath12k_dp_rx_h_msdu_len(ab, desc);
+	peer_id = ath12k_dp_rx_h_peer_id(ab, desc);
+
+	if(!ath12k_peer_find_by_id(ab, peer_id)) {
+		ath12k_dbg(ab, ATH12K_DBG_DATA, "invalid peer id received in wbm err pkt%d\n",
+			   peer_id);
+		return -EINVAL;
+	}
 
 	if (!rxcb->is_frag && ((msdu_len + hal_rx_desc_sz) > DP_RX_BUFFER_SIZE)) {
 		/* First buffer will be freed by the caller, so deduct it's length */
@@ -3683,6 +3690,13 @@ static int ath12k_dp_rx_h_null_q_desc(struct ath12k *ar, struct sk_buff *msdu,
 		return -EINVAL;
 	}
 
+	/* Even after cleaning up the sg buffers in the msdu list with above check
+	 * any msdu received with continuation flag needs to be dropped as invalid.
+	 * This protects against some random err frame with continuation flag.
+	 */
+	if (rxcb->is_continuation)
+		return -EINVAL;
+
 	if (!ath12k_dp_rx_h_msdu_done(desc)) {
 		ath12k_warn(ar->ab,
 			    "msdu_done bit not set in null_q_des processing\n");
@@ -3699,9 +3713,6 @@ static int ath12k_dp_rx_h_null_q_desc(struct ath12k *ar, struct sk_buff *msdu,
 	 * This error can show up both in a REO destination or WBM release ring.
 	 */
 
-	rxcb->is_first_msdu = ath12k_dp_rx_h_first_msdu(ab, desc);
-	rxcb->is_last_msdu = ath12k_dp_rx_h_last_msdu(ab, desc);
-
 	if (rxcb->is_frag) {
 		skb_pull(msdu, hal_rx_desc_sz);
 	} else {
@@ -3912,7 +3923,9 @@ int ath12k_dp_rx_process_wbm_err(struct ath12k_base *ab,
 
 		num_buffs_reaped++;
 		total_num_buffs_reaped++;
-		budget--;
+
+		if (!err_info.continuation)
+			budget--;
 
 		if (err_info.push_reason !=
 		    HAL_REO_DEST_RING_PUSH_REASON_ERR_DETECTED) {
@@ -3924,6 +3937,10 @@ int ath12k_dp_rx_process_wbm_err(struct ath12k_base *ab,
 		rxcb->err_code = err_info.err_code;
 		rxcb->rx_desc = (struct hal_rx_desc *)msdu->data;
 		__skb_queue_tail(&msdu_list[mac_id], msdu);
+
+		rxcb->is_first_msdu = err_info.first_msdu;
+		rxcb->is_last_msdu = err_info.last_msdu;
+		rxcb->is_continuation = err_info.continuation;
 	}
 
 	ath12k_hal_srng_access_end(ab, srng);
diff --git a/drivers/net/wireless/ath/ath12k/hal_desc.h b/drivers/net/wireless/ath/ath12k/hal_desc.h
index f81bfcb..d925a2c 100644
--- a/drivers/net/wireless/ath/ath12k/hal_desc.h
+++ b/drivers/net/wireless/ath/ath12k/hal_desc.h
@@ -1971,6 +1971,10 @@ struct hal_wbm_release_ring_cc_rx {
 #define HAL_WBM_RELEASE_INFO0_REO_ERROR_CODE		GENMASK(30, 26)
 #define HAL_WBM_RELEASE_INFO0_WBM_INTERNAL_ERROR	BIT(31)
 
+#define HAL_WBM_RELEASE_INFO3_FIRST_MSDU		BIT(0)
+#define HAL_WBM_RELEASE_INFO3_LAST_MSDU			BIT(1)
+#define HAL_WBM_RELEASE_INFO3_CONTINUATION		BIT(2)
+
 #define HAL_WBM_RELEASE_INFO5_LOOPING_COUNT		GENMASK(31, 28)
 
 struct hal_wbm_release_ring {
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.c b/drivers/net/wireless/ath/ath12k/hal_rx.c
index fc11b5e..c6b412e 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.c
@@ -410,6 +410,10 @@ int ath12k_hal_wbm_desc_parse_err(struct ath12k_base *ab, void *desc,
 	rel_info->err_rel_src = rel_src;
 	rel_info->hw_cc_done = hw_cc_done;
 
+	rel_info->first_msdu = FIELD_GET(HAL_WBM_RELEASE_INFO3_FIRST_MSDU, wbm_desc->info3);
+	rel_info->last_msdu = FIELD_GET(HAL_WBM_RELEASE_INFO3_LAST_MSDU, wbm_desc->info3);
+	rel_info->continuation = FIELD_GET(HAL_WBM_RELEASE_INFO3_CONTINUATION, wbm_desc->info3);
+
 	if (rel_info->err_rel_src == HAL_WBM_REL_SRC_MODULE_REO) {
 		rel_info->push_reason =
 			FIELD_GET(HAL_WBM_RELEASE_INFO0_REO_PUSH_REASON,
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.h b/drivers/net/wireless/ath/ath12k/hal_rx.h
index c1402e7..df6aaa2 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -14,6 +14,7 @@ struct hal_rx_wbm_rel_info {
 	u32 err_code;
 	bool first_msdu;
 	bool last_msdu;
+	bool continuation;
 	void *rx_desc;
 	bool hw_cc_done;
 };
-- 
2.7.4

