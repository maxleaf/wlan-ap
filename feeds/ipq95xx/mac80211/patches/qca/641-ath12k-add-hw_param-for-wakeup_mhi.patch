From a9760629678c792d9ade3c6ee5aee469ccba7a00 Mon Sep 17 00:00:00 2001
From: Seevalamuthu Mariappan <quic_seevalam@quicinc.com>
Date: Wed, 15 Jun 2022 19:11:45 +0530
Subject: [PATCH] ath12k: add hw_param for wakeup_mhi

Wakeup mhi is needed before pci_read/write only for QCA6390
and WCN6855. By default, wakeup & release mhi is enabled for all
hardwares
Hence, disable wakeup/release mhi using hw_param for other hardwares.

Found while discussing a similar fix for ath11k
https://lore.kernel.org/all/1636702019-26142-1-git-send-email-quic_seevalam@quicinc.com/

Signed-off-by: Seevalamuthu Mariappan <quic_seevalam@quicinc.com>
Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  1 +
 drivers/net/wireless/ath/ath12k/hw.h   |  1 +
 drivers/net/wireless/ath/ath12k/pci.c  | 20 ++++++++++++--------
 3 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index bbbb34c..429a8c3 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -69,6 +69,7 @@ static const struct ath12k_hw_params ath12k_hw_params[] = {
 		.fix_l1ss = false,
 		.supports_ap_ps = true,
 		.credit_flow = false,
+		.wakeup_mhi = false,
 	},
 };
 
diff --git a/drivers/net/wireless/ath/ath12k/hw.h b/drivers/net/wireless/ath/ath12k/hw.h
index 6e830bb..d820765 100644
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -167,6 +167,7 @@ struct ath12k_hw_params {
 	bool fix_l1ss;
 	bool supports_ap_ps;
 	bool credit_flow;
+	bool wakeup_mhi;
 };
 
 struct ath12k_hw_ops {
diff --git a/drivers/net/wireless/ath/ath12k/pci.c b/drivers/net/wireless/ath/ath12k/pci.c
index 4dba3da..75de7f7 100644
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -1115,8 +1115,9 @@ u32 ath12k_pci_read32(struct ath12k_base *ab, u32 offset)
 	/* for offset beyond BAR + 4K - 32, may
 	 * need to wakeup MHI to access.
 	 */
-	if (test_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags) &&
-	    offset >= ACCESS_ALWAYS_OFF)
+	if (ab->hw_params.wakeup_mhi &&
+			test_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags) &&
+			offset >= ACCESS_ALWAYS_OFF)
 		mhi_device_get_sync(ab_pci->mhi_ctrl->mhi_dev);
 
 	if (offset < WINDOW_START) {
@@ -1154,8 +1155,9 @@ u32 ath12k_pci_read32(struct ath12k_base *ab, u32 offset)
 		}
 	}
 
-	if (test_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags) &&
-	    offset >= ACCESS_ALWAYS_OFF)
+	if (ab->hw_params.wakeup_mhi &&
+			test_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags) &&
+			offset >= ACCESS_ALWAYS_OFF)
 		mhi_device_put(ab_pci->mhi_ctrl->mhi_dev);
 
 	return val;
@@ -1170,8 +1172,9 @@ void ath12k_pci_write32(struct ath12k_base *ab, u32 offset, u32 value)
 	/* for offset beyond BAR + 4K - 32, may
 	 * need to wakeup MHI to access.
 	 */
-	if (test_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags) &&
-	    offset >= ACCESS_ALWAYS_OFF)
+	if (ab->hw_params.wakeup_mhi &&
+			test_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags) &&
+			offset >= ACCESS_ALWAYS_OFF)
 		mhi_device_get_sync(ab_pci->mhi_ctrl->mhi_dev);
 
 	if (offset < WINDOW_START) {
@@ -1209,8 +1212,9 @@ void ath12k_pci_write32(struct ath12k_base *ab, u32 offset, u32 value)
 		}
 	}
 
-	if (test_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags) &&
-	    offset >= ACCESS_ALWAYS_OFF)
+	if (ab->hw_params.wakeup_mhi &&
+			test_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags) &&
+			offset >= ACCESS_ALWAYS_OFF)
 		mhi_device_put(ab_pci->mhi_ctrl->mhi_dev);
 }
 
-- 
2.17.1

