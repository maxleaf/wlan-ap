From 5461720e055c5acdf69432f9762dc8b691cf2d4e Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Tue, 21 Sep 2021 11:55:02 -0700
Subject: [PATCH 15/27] mac80211: EHT operation element support in AP mode

Add new parameters to struct ieee80211_bss_conf for EHT operation
element data in AP mode.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 include/net/mac80211.h     |  7 +++++++
 net/mac80211/cfg.c         |  8 ++++++++
 net/mac80211/eht.c         | 11 +++++++++++
 net/mac80211/ieee80211_i.h |  2 ++
 4 files changed, 28 insertions(+)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -668,6 +668,8 @@ struct ieee80211_fils_discovery {
  * @nss_ap_isolate: Used for notifying the NSS host about AP isolate feature
  * @beacon_tx_mode: Beacon Tx Mode setting.
  * @eht_support: does this BSS support EHT
+ * @eht_oper: EHT operation information of the BSS (AP/Mesh) or of the AP we
+ *	are connected to (STA)
  */
 struct ieee80211_bss_conf {
 	const u8 *bssid;
@@ -750,6 +752,11 @@ struct ieee80211_bss_conf {
 	bool nss_ap_isolate;
 	enum nl80211_beacon_tx_mode beacon_tx_mode;
 	bool eht_support;
+	struct {
+		u8 chan_width;
+		u8 ccfs;
+		u8 present_bm;
+	} eht_oper;
 
 	/* Mesh configuration for nss offload */
 	u8 nss_offld_ttl;
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1319,6 +1319,14 @@ static int ieee80211_start_ap(struct wip
 		       sizeof(*params->he_cap));
 	}
 
+	if (params->eht_cap && params->eht_oper) {
+		if (!sdata->vif.bss_conf.he_support)
+			return -EOPNOTSUPP;
+
+		sdata->vif.bss_conf.eht_support = true;
+		ieee80211_eht_op_ie_to_bss_conf(&sdata->vif, params->eht_oper);
+	}
+
 	mutex_lock(&local->mtx);
 	err = ieee80211_vif_use_channel(sdata, &params->chandef,
 					IEEE80211_CHANCTX_SHARED);
--- a/net/mac80211/eht.c
+++ b/net/mac80211/eht.c
@@ -74,3 +74,14 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 	sta->cur_max_bandwidth = ieee80211_sta_cap_rx_bw(sta);
 	sta->sta.bandwidth = ieee80211_sta_cur_vht_bw(sta);
 }
+
+void ieee80211_eht_op_ie_to_bss_conf(struct ieee80211_vif *vif,
+				     const struct ieee80211_eht_operation *op_ie)
+{
+	if (!op_ie)
+		return;
+
+	vif->bss_conf.eht_oper.chan_width = op_ie->chan_width;
+	vif->bss_conf.eht_oper.ccfs = op_ie->ccfs;
+	vif->bss_conf.eht_oper.present_bm = op_ie->present_bm;
+}
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2562,4 +2562,6 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 				    const u8 *he_cap_ie, u8 he_cap_len,
 				    const struct ieee80211_eht_cap_elem *eht_cap_ie_elem,
 				    u8 eht_cap_len, struct sta_info *sta);
+void ieee80211_eht_op_ie_to_bss_conf(struct ieee80211_vif *vif,
+				     const struct ieee80211_eht_operation *eht_op);
 #endif /* IEEE80211_I_H */
