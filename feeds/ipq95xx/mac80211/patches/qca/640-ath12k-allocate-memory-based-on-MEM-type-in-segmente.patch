From 5a41a3b492e0fe88a5dd744eda940eecdefe66a5 Mon Sep 17 00:00:00 2001
From: Balamurugan Selvarajan <quic_bselvara@quicinc.com>
Date: Wed, 1 Jun 2022 13:13:37 +0530
Subject: [PATCH] ath12k: allocate memory based on MEM type in segmented mode

In segmented mode earlier logic was based on number of
segments. When the number of segments gets increased in
the firmware, the same must be maintained in the host else
driver initialization will fail.

Initially QCN9224 firmware will request higher memory greater
than MAX_ORDER, host will fail in memory allocation and set's
target_mem_delayed falg to true. Post this firmware will request
memory in smaller chunks. With current logic memory gets allocated
based on memory type. For the non-supported memory type
the host will fill NULL and firmware will handle gracefully
without crashing.

Signed-off-by: Balamurugan Selvarajan <quic_bselvara@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/qmi.c | 41 ++++++++++++++++-----------
 1 file changed, 25 insertions(+), 16 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/qmi.c b/drivers/net/wireless/ath/ath12k/qmi.c
index 81821f4..595f62b 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -18,6 +18,7 @@
 
 #define SLEEP_CLOCK_SELECT_INTERNAL_BIT	0x02
 #define HOST_CSTATE_BIT			0x04
+#define MB(x)	((x) * 1024 * 1024)
 
 bool ath12k_cold_boot_cal = 1;
 module_param_named(cold_boot_cal, ath12k_cold_boot_cal, bool, 0644);
@@ -2404,27 +2405,35 @@ static int ath12k_qmi_alloc_target_mem_chunk(struct ath12k_base *ab)
 
 	for (i = 0; i < ab->qmi.mem_seg_count; i++) {
 		chunk = &ab->qmi.target_mem[i];
-		chunk->v.addr = dma_alloc_coherent(ab->dev,
+		switch (chunk->type) {
+		case HOST_DDR_REGION_TYPE:
+		case M3_DUMP_REGION_TYPE:
+		case PAGEABLE_MEM_TYPE:
+			chunk->v.addr = dma_alloc_coherent(ab->dev,
 						   chunk->size,
 						   &chunk->paddr,
-						   GFP_KERNEL);
-		if (!chunk->v.addr) {
-			if (ab->qmi.mem_seg_count <= ATH12K_QMI_FW_MEM_REQ_SEGMENT_CNT) {
-				ath12k_dbg(ab, ATH12K_DBG_QMI,
-					   "qmi dma allocation failed (%d B type %u), will try later with small size\n",
-					    chunk->size,
-					    chunk->type);
-				ath12k_qmi_free_target_mem_chunk(ab);
-				ab->qmi.target_mem_delayed = true;
-				return 0;
+						   GFP_KERNEL | __GFP_NOWARN);
+			if (!chunk->v.addr) {
+				if (chunk->size > MB(2)) {
+					ath12k_warn(ab,
+					   	    "qmi dma allocation failed (%d B type %u), will try later with small size\n",
+					    	    chunk->size,
+					    	    chunk->type);
+					ath12k_qmi_free_target_mem_chunk(ab);
+					ab->qmi.target_mem_delayed = true;
+					return 0;
+				}
+				return -ENOMEM;
 			}
-			ath12k_err(ab, "failed to alloc memory, size: 0x%x, type: %u\n",
-				   chunk->size,
-				   chunk->type);
-			return -EINVAL;
+			break;
+		default:
+			ath12k_warn(ab, "memory type %d not supported\n",
+				    chunk->type);
+			chunk->paddr = 0;
+			chunk->v.addr = NULL;
+			break;
 		}
 	}
-
 	return 0;
 }
 
-- 
2.17.1

