From a3f4789e8c364e44b5de1472e2a9f2aac66cf39e Mon Sep 17 00:00:00 2001
From: Sivashankari Madhavan <quic_sivamadh@quicinc.com>
Date: Fri, 6 May 2022 12:01:49 +0530
Subject: [PATCH] ath12k: Add support for Green AP

Adds the driver changes for supporting Green AP

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Signed-off-by: Sivashankari Madhavan <quic_sivamadh@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  1 +
 drivers/net/wireless/ath/ath12k/core.h |  8 ++++
 drivers/net/wireless/ath/ath12k/hw.h   |  1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 51 ++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/mac.h  |  1 +
 drivers/net/wireless/ath/ath12k/wmi.c  | 32 ++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h  |  7 ++++
 7 files changed, 101 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -67,6 +67,7 @@ static const struct ath12k_hw_params ath
 		.hal_desc_sz = sizeof(struct hal_rx_desc_qcn92xx),
 		.num_tcl_banks = 48,
 		.fix_l1ss = false,
+		.supports_ap_ps = true,
 	},
 };
 
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -566,6 +566,11 @@ struct ath12k_per_peer_tx_stats {
 	bool is_ampdu;
 };
 
+enum ath12k_ap_ps_state {
+	ATH12K_AP_PS_STATE_OFF,
+	ATH12K_AP_PS_STATE_ON,
+};
+
 enum ath12k_fw_recovery_option {
 	 ATH12K_FW_RECOVERY_DISABLE = 0,
 	 ATH12K_FW_RECOVERY_ENABLE_AUTO, /* Automatically recover after FW assert */
@@ -709,6 +714,8 @@ struct ath12k {
 	bool monitor_started;
 	int monitor_vdev_id;
 	u8 twt_enabled;
+	bool ap_ps_enabled;
+	enum ath12k_ap_ps_state ap_ps_state;
 
 	struct cfg80211_chan_def awgn_chandef;
         u32 chan_bw_interference_bitmap;
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -165,6 +165,7 @@ struct ath12k_hw_params {
 	u32 hal_desc_sz;
 	u32 num_tcl_banks;
 	bool fix_l1ss;
+	bool supports_ap_ps;
 };
 
 struct ath12k_hw_ops {
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -3787,6 +3787,11 @@ static void ath12k_mac_op_bss_info_chang
 	    changed & BSS_CHANGED_UNSOL_BCAST_PROBE_RESP)
 		ath12k_mac_fils_discovery(arvif, info);
 
+	if ((changed & BSS_CHANGED_PS) && vif->type == NL80211_IFTYPE_AP) {
+		ar->ap_ps_enabled = info->ap_ps_enable;
+		ath12k_mac_ap_ps_recalc(ar);
+	}
+
 	mutex_unlock(&ar->conf_mutex);
 }
 
@@ -4809,6 +4814,8 @@ static int ath12k_mac_station_add(struct
 	ath12k_dbg(ab, ATH12K_DBG_MAC, "Added peer: %pM for VDEV: %d\n",
 		   sta->addr, arvif->vdev_id);
 
+	ath12k_mac_ap_ps_recalc(ar);
+
 	if (ath12k_debugfs_is_extd_tx_stats_enabled(ar)) {
 		arsta->tx_stats = kzalloc(sizeof(*arsta->tx_stats), GFP_KERNEL);
 		if (!arsta->tx_stats) {
@@ -4920,6 +4927,7 @@ static int ath12k_mac_op_sta_state(struc
 
 		kfree(arsta->rx_stats);
 		arsta->rx_stats = NULL;
+		ath12k_mac_ap_ps_recalc(ar);
 	} else if (old_state == IEEE80211_STA_AUTH &&
 		   new_state == IEEE80211_STA_ASSOC &&
 		   (vif->type == NL80211_IFTYPE_AP ||
@@ -6715,6 +6723,8 @@ static int ath12k_mac_op_add_interface(s
 
 	ath12k_dp_vdev_tx_attach(ar, arvif);
 
+	ath12k_mac_ap_ps_recalc(ar);
+
 	if (vif->type != NL80211_IFTYPE_MONITOR && ar->monitor_conf_enabled)
 		ath12k_mac_monitor_vdev_create(ar);
 
@@ -6856,6 +6866,7 @@ err_vdev_del:
 
 	/* Recalc txpower for remaining vdev */
 	ath12k_mac_txpower_recalc(ar);
+	ath12k_mac_ap_ps_recalc(ar);
 	clear_bit(ATH12K_FLAG_MONITOR_ENABLED, &ar->monitor_flags);
 
 	ath12k_debugfs_remove_interface(arvif);
@@ -9056,6 +9067,39 @@ exit:
 	return ret;
 }
 
+void ath12k_mac_ap_ps_recalc(struct ath12k *ar) {
+	struct ath12k_vif *arvif;
+	enum ath12k_ap_ps_state state = ATH12K_AP_PS_STATE_OFF;
+	int ret;
+	bool allow_ap_ps = true;
+
+	lockdep_assert_held(&ar->conf_mutex);
+	list_for_each_entry(arvif, &ar->arvifs, list) {
+		if (arvif->vdev_type != WMI_VDEV_TYPE_AP) {
+			allow_ap_ps = false;
+			break;
+		}
+	}
+
+	if (!allow_ap_ps)
+		ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "ap ps is not"
+			   "allowed\n");
+
+	if (allow_ap_ps && !ar->num_stations && ar->ap_ps_enabled)
+		state = ATH12K_AP_PS_STATE_ON;
+
+	if (ar->ap_ps_state == state)
+		return;
+
+	ret = ath12k_wmi_pdev_ap_ps_cmd_send(ar, ar->pdev->pdev_id, state);
+	if (!ret)
+		ar->ap_ps_state = state;
+	else
+		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+			   "failed to send ap ps command pdev_id %u state %u\n",
+			    ar->pdev->pdev_id, state);
+}
+
 static void ath12k_mac_op_sta_statistics(struct ieee80211_hw *hw,
 					 struct ieee80211_vif *vif,
 					 struct ieee80211_sta *sta,
@@ -9533,6 +9577,9 @@ static int __ath12k_mac_register(struct
 		ieee80211_hw_set(ar->hw, USES_RSS);
 	}
 
+	if (ar->ab->hw_params.supports_ap_ps)
+		ieee80211_hw_set(ar->hw, SUPPORTS_AP_PS);
+
 	ar->hw->wiphy->features |= NL80211_FEATURE_STATIC_SMPS;
 	ar->hw->wiphy->flags |= WIPHY_FLAG_IBSS_RSN;
 
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -128,6 +128,7 @@ struct ath12k_generic_iter {
 
 extern const struct htt_rx_ring_tlv_filter ath12k_mac_mon_status_filter_default;
 
+void ath12k_mac_ap_ps_recalc(struct ath12k *ar);
 void ath12k_mac_destroy(struct ath12k_base *ab);
 void ath12k_mac_unregister(struct ath12k_base *ab);
 int ath12k_mac_register(struct ath12k_base *ab);
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -8729,3 +8729,35 @@ int ath12k_wmi_wow_enable(struct ath12k
 
 	return ath12k_wmi_cmd_send(ar->wmi, skb, WMI_WOW_ENABLE_CMDID);
 }
+
+int ath12k_wmi_pdev_ap_ps_cmd_send(struct ath12k *ar, u8 pdev_id,
+				   u32 param_value)
+{
+	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_pdev_ap_ps_cmd *cmd;
+	struct sk_buff *skb;
+	int ret;
+
+	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, sizeof(*cmd));
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_pdev_ap_ps_cmd *)skb->data;
+	cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+				     WMI_TAG_PDEV_GREEN_AP_PS_ENABLE_CMD) |
+			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
+	cmd->pdev_id = pdev_id;
+	cmd->param_value = param_value;
+
+	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_PDEV_GREEN_AP_PS_ENABLE_CMDID);
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to send ap ps enable/disable cmd %d\n",ret);
+		dev_kfree_skb(skb);
+	}
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
+		   "wmi pdev ap ps set pdev id %d value %d\n",
+		   pdev_id, param_value);
+
+	return ret;
+}
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -3253,6 +3253,12 @@ struct wmi_fwtest_set_param_cmd_param {
 	u32 param_value;
 };
 
+struct wmi_pdev_ap_ps_cmd {
+	u32 tlv_header;
+	u32 pdev_id;
+	u32 param_value;
+};
+
 struct wmi_pdev_set_param_cmd {
 	u32 tlv_header;
 	u32 pdev_id;
@@ -6046,6 +6052,7 @@ int ath12k_wmi_probe_resp_tmpl(struct at
 			       struct sk_buff *tmpl);
 int ath12k_wmi_set_hw_mode(struct ath12k_base *ab,
 			   enum wmi_host_hw_mode_config_type mode);
+int ath12k_wmi_pdev_ap_ps_cmd_send(struct ath12k *ar, u8 pdev_id, u32 value);
 int ath12k_wmi_wow_host_wakeup_ind(struct ath12k *ar);
 int ath12k_wmi_wow_enable(struct ath12k *ar);
 int ath12k_wmi_send_vdev_set_tpc_power(struct ath12k *ar,
