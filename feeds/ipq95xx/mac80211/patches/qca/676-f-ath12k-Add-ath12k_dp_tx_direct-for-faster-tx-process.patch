From 17a15b2a0de6a92fc331ca878ac07f5675905fc6 Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Mon, 17 Oct 2022 11:30:47 -0700
Subject: [PATCH 6/7] ath12k: Add ath12k_dp_tx_direct for faster tx processing

Add a new routine to process the packets in the forwarding path
faster and increase the throughput. Frame delivered to this function
are frames identified through SFE and marked with fast_xmit flags.
Flush only first 256 bytes in the skb data as there won't be any updates
beyond that in the SFE path

Initialize the descriptor memory once during init and avoid
initializing the unused fields to 0 on a per packet basis

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.c       |  1 +
 drivers/net/wireless/ath/ath12k/dp_tx.c    | 92 ++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/dp_tx.h    |  1 +
 drivers/net/wireless/ath/ath12k/hal_desc.h |  6 ++
 drivers/net/wireless/ath/ath12k/mac.c      | 15 +++-
 5 files changed, 114 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp.c b/drivers/net/wireless/ath/ath12k/dp.c
index a671cda..8b8365e 100644
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -267,6 +267,7 @@ int ath12k_dp_srng_setup(struct ath12k_base *ab, struct dp_srng *ring,
 	if (!ring->vaddr_unaligned)
 		return -ENOMEM;
 
+	memset(ring->vaddr_unaligned, 0, ring->size);
 	ring->vaddr = PTR_ALIGN(ring->vaddr_unaligned, HAL_RING_BASE_ALIGN);
 	ring->paddr = ring->paddr_unaligned + ((unsigned long)ring->vaddr -
 		      (unsigned long)ring->vaddr_unaligned);
diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index dd71f9b..d71559a 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -127,6 +127,98 @@ static void ath12k_hal_tx_cmd_ext_desc_setup(struct ath12k_base *ab, void *cmd,
 					   ti->encrypt_type);
 }
 
+int ath12k_dp_tx_direct(struct ath12k_vif *arvif, struct sk_buff *skb)
+{
+	struct ath12k *ar = arvif->ar;
+	struct ath12k_base *ab = arvif->ar->ab;
+	struct ath12k_dp *dp = &ab->dp;
+	struct ath12k_tx_desc_info *tx_desc = NULL;
+	struct ath12k_skb_cb *skb_cb = ATH12K_SKB_CB(skb);
+	struct hal_srng *tcl_ring;
+	struct dp_tx_ring *tx_ring;
+	void *hal_tcl_desc;
+	struct hal_tcl_data_cmd tcl_desc = { 0 };
+	u8 hal_ring_id, ring_id, rbm_id;
+	int ret;
+
+	ring_id = smp_processor_id();
+
+	rbm_id = ab->hal.ops->tcl_to_wbm_rbm_map[ring_id].rbm_id;
+
+	tx_ring = &dp->tx_ring[ring_id];
+
+	tx_desc = ath12k_dp_tx_assign_buffer_nolock(dp, ring_id);
+	if (unlikely(!tx_desc)) {
+		ab->soc_stats.tx_err.txbuf_na[ring_id]++;
+		return -ENOSPC;
+	}
+	skb_cb->paddr = dma_map_single(ab->dev, skb->data, 256,
+				       DMA_TO_DEVICE);
+	if (unlikely(dma_mapping_error(ab->dev, skb_cb->paddr))) {
+		atomic_inc(&ab->soc_stats.tx_err.misc_fail);
+		ath12k_warn(ab, "failed to DMA map data Tx buffer\n");
+		ret = -ENOMEM;
+		goto fail_remove_tx_buf;
+	}
+
+	tx_desc->skb = skb;
+	tx_desc->mac_id = ar->pdev_idx;
+	skb_cb->vif = arvif->vif;
+	skb_cb->ar = ar;
+
+	hal_ring_id = tx_ring->tcl_data_ring.ring_id;
+	tcl_ring = &ab->hal.srng_list[hal_ring_id];
+
+	ath12k_hal_srng_access_src_ring_begin_nolock(ab, tcl_ring);
+
+	hal_tcl_desc = (void *)ath12k_hal_srng_src_get_next_entry_nolock(ab, tcl_ring);
+	if (unlikely(!hal_tcl_desc)) {
+		/* NOTE: It is highly unlikely we'll be running out of tcl_ring
+		 * desc because the desc is directly enqueued onto hw queue.
+		 */
+		ath12k_hal_srng_access_umac_src_ring_end_nolock(ab->mem, tcl_ring);
+		ab->soc_stats.tx_err.desc_na[ring_id]++;
+		ret = -ENOMEM;
+		goto fail_unmap_dma;
+	}
+
+	tcl_desc.buf_addr_info.info0 = FIELD_PREP(BUFFER_ADDR_INFO0_ADDR, skb_cb->paddr);
+	tcl_desc.buf_addr_info.info1 = FIELD_PREP(BUFFER_ADDR_INFO1_ADDR,
+			((uint64_t)skb_cb->paddr >> HAL_ADDR_MSB_REG_SHIFT));
+	tcl_desc.buf_addr_info.info1 |=
+		FIELD_PREP(BUFFER_ADDR_INFO1_RET_BUF_MGR, rbm_id) |
+		FIELD_PREP(BUFFER_ADDR_INFO1_SW_COOKIE, tx_desc->desc_id);
+	tcl_desc.info0 =
+		FIELD_PREP(HAL_TCL_DATA_CMD_INFO0_DESC_TYPE, HAL_TCL_DESC_TYPE_BUFFER) |
+		FIELD_PREP(HAL_TCL_DATA_CMD_INFO0_BANK_ID, arvif->bank_id);
+	tcl_desc.info1 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO1_CMD_NUM,
+				    arvif->tcl_metadata);
+	if (likely(skb->ip_summed == CHECKSUM_PARTIAL))
+		tcl_desc.info2 |= TX_IP_CHECKSUM;
+	tcl_desc.info2 |= FIELD_PREP(HAL_TCL_DATA_CMD_INFO2_DATA_LEN, skb->len);
+	tcl_desc.info3 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO3_PMAC_ID, ar->lmac_id) |
+		FIELD_PREP(HAL_TCL_DATA_CMD_INFO3_VDEV_ID, arvif->vdev_id);
+	tcl_desc.info4 = FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_SEARCH_INDEX, arvif->ast_idx) |
+		FIELD_PREP(HAL_TCL_DATA_CMD_INFO4_CACHE_SET_NUM, arvif->ast_hash);
+
+	memcpy(hal_tcl_desc, &tcl_desc, sizeof(tcl_desc));
+	dsb(st);
+	ath12k_hal_srng_access_umac_src_ring_end_nolock(ab->mem, tcl_ring);
+
+	atomic_inc(&ar->dp.num_tx_pending);
+
+	return 0;
+
+fail_unmap_dma:
+	dma_unmap_single(ab->dev, skb_cb->paddr, 256, DMA_TO_DEVICE);
+
+fail_remove_tx_buf:
+	ath12k_dp_tx_release_txbuf(dp, tx_desc, ring_id);
+
+	return ret;
+}
+EXPORT_SYMBOL(ath12k_dp_tx_direct);
+
 int ath12k_dp_tx(struct ath12k *ar, struct ath12k_vif *arvif,
 		 struct ath12k_sta *arsta, struct sk_buff *skb)
 {
diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.h b/drivers/net/wireless/ath/ath12k/dp_tx.h
index 98f7704..430fa35 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.h
@@ -45,4 +45,5 @@ int ath12k_dp_tx_htt_tx_filter_setup(struct ath12k_base *ab, u32 ring_id,
 int ath12k_dp_tx_htt_tx_monitor_mode_ring_config(struct ath12k *ar, bool reset);
 int ath12k_dp_tx_htt_monitor_mode_ring_config(struct ath12k *ar, bool reset);
 int ath12k_dp_tx_htt_h2t_vdev_stats_ol_req(struct ath12k *ar, u64 reset_bitmask);
+int ath12k_dp_tx_direct(struct ath12k_vif *arvif, struct sk_buff *skb);
 #endif
diff --git a/drivers/net/wireless/ath/ath12k/hal_desc.h b/drivers/net/wireless/ath/ath12k/hal_desc.h
index cb0e9ad..c0f8b72 100644
--- a/drivers/net/wireless/ath/ath12k/hal_desc.h
+++ b/drivers/net/wireless/ath/ath12k/hal_desc.h
@@ -1290,6 +1290,12 @@ enum hal_wbm_htt_tx_comp_status {
 	HAL_WBM_REL_HTT_TX_COMP_STATUS_MAX,
 };
 
+#define TX_IP_CHECKSUM (HAL_TCL_DATA_CMD_INFO2_IP4_CKSUM_EN  | \
+			HAL_TCL_DATA_CMD_INFO2_UDP4_CKSUM_EN | \
+			HAL_TCL_DATA_CMD_INFO2_UDP6_CKSUM_EN | \
+			HAL_TCL_DATA_CMD_INFO2_TCP4_CKSUM_EN | \
+			HAL_TCL_DATA_CMD_INFO2_TCP6_CKSUM_EN)
+
 struct hal_tcl_data_cmd {
 	struct ath12k_buffer_addr buf_addr_info;
 	u32 info0;
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 6d47feb..c5df666 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -6802,12 +6802,25 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 	struct ieee80211_key_conf *key = info->control.hw_key;
 	struct ath12k_mgmt_frame_stats *mgmt_stats = &arvif->mgmt_stats;
 	struct ath12k_sta *arsta = NULL;
-	struct ieee80211_sta *sta = control->sta;
+	struct ieee80211_sta *sta = NULL;
 	u32 info_flags = info->flags;
 	bool is_prb_rsp;
 	u16 frm_type = 0;
 	int ret;
 
+	if (skb->fast_xmit) {
+		ret = ath12k_dp_tx_direct(arvif, skb);
+		if (unlikely(ret)) {
+			ath12k_warn(ar->ab, "failed to transmit frame %d\n",
+				    ret);
+			dev_kfree_skb_any(skb);
+		}
+		return;
+	}
+
+	if (control)
+		sta = control->sta;
+
 	if (arvif->vdev_type == WMI_VDEV_TYPE_MONITOR) {
 		ieee80211_free_txskb(ah->hw, skb);
 		return;
-- 
2.17.1

diff --git a/drivers/net/wireless/ath/ath11k/mac.c b/drivers/net/wireless/ath/ath11k/mac.c
index 4f9a553..0c5bfe4 100644
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -7432,6 +7432,9 @@ static void ath11k_mac_op_tx(struct ieee80211_hw *hw,
 	int ret;
 	u64 adjusted_tsf;
 
+	if (skb->fast_xmit)
+		info_flags |= IEEE80211_TX_CTL_HW_80211_ENCAP;
+
 	if (arvif->vdev_type == WMI_VDEV_TYPE_MONITOR) {
 		ieee80211_free_txskb(ar->hw, skb);
 		return;
@@ -7492,13 +7495,13 @@ static void ath11k_mac_op_tx(struct ieee80211_hw *hw,
 		return;
 	}
 
-	if (control->sta)
+	if (control && control->sta)
 		arsta = (struct ath11k_sta *)control->sta->drv_priv;
 
 	/* Must call mac80211 tx status handler, else when stats is disabled we free
 	 * the skb from driver. Own tx packets on monitor will also be disabled.
 	 */
-	if ((info->flags & (IEEE80211_TX_CTL_REQ_TX_STATUS | IEEE80211_TX_INTFL_NL80211_FRAME_TX)) ||
+	if ((info_flags & (IEEE80211_TX_CTL_REQ_TX_STATUS | IEEE80211_TX_INTFL_NL80211_FRAME_TX)) ||
 	    info->ack_frame_id || vif->type == NL80211_IFTYPE_MESH_POINT ||
 	    test_bit(ATH11K_FLAG_MONITOR_VDEV_CREATED, &ar->monitor_flags))
 		skb_cb->flags |= ATH11K_SKB_TX_STATUS;
@@ -7532,7 +7535,7 @@ static void ath11k_mac_op_tx(struct ieee80211_hw *hw,
 
 	if (ar->ab->nss.enabled)
 		ret = ath11k_nss_tx(arvif, skb);
-	else if (info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP)
+	else if (info_flags & IEEE80211_TX_CTL_HW_80211_ENCAP)
 		ret = ath11k_dp_tx_simple(ar, arvif, skb,
 					  (control->sta) ? control->sta->drv_priv : NULL);
 	else
