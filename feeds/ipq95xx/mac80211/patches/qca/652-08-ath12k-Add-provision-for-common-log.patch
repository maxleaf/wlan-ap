From e57bb4905ae5847a9e554eb9defd6a15dea5262f Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Thu, 2 Jun 2022 11:02:27 +0530
Subject: [PATCH 3/5] ath12k: remove hw log level

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debug.c | 49 +++++++-----------
 drivers/net/wireless/ath/ath12k/debug.h | 14 +----
 drivers/net/wireless/ath/ath12k/mac.c   | 91 ++++++++++++++-------------------
 3 files changed, 59 insertions(+), 95 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debug.c
+++ b/drivers/net/wireless/ath/ath12k/debug.c
@@ -17,7 +17,10 @@ void ath12k_info(struct ath12k_base *ab,
 
 	va_start(args, fmt);
 	vaf.va = &args;
-	dev_info(ab->dev, "%pV", &vaf);
+	if (ab)
+		dev_info(ab->dev, "%pV", &vaf);
+	else
+		pr_info("ath12k: %pV", &vaf);
 	/* TODO: Trace the log */
 	va_end(args);
 }
@@ -31,7 +34,10 @@ void ath12k_err(struct ath12k_base *ab,
 
 	va_start(args, fmt);
 	vaf.va = &args;
-	dev_err(ab->dev, "%pV", &vaf);
+	if (ab)
+		dev_err(ab->dev, "%pV", &vaf);
+	else
+		pr_err("ath12k: %pV", &vaf);
 	/* TODO: Trace the log */
 	va_end(args);
 }
@@ -45,7 +51,10 @@ void ath12k_warn(struct ath12k_base *ab,
 
 	va_start(args, fmt);
 	vaf.va = &args;
-	dev_warn_ratelimited(ab->dev, "%pV", &vaf);
+	if (ab)
+		dev_warn_ratelimited(ab->dev, "%pV", &vaf);
+	else
+		pr_warn_ratelimited("ath12k: %pV", &vaf);
 	/* TODO: Trace the log */
 	va_end(args);
 }
@@ -63,8 +72,12 @@ void __ath12k_dbg(struct ath12k_base *ab
 	vaf.fmt = fmt;
 	vaf.va = &args;
 
-	if (ath12k_debug_mask & mask)
-		dev_printk(KERN_DEBUG, ab->dev, "%pV", &vaf);
+	if (ath12k_debug_mask & mask) {
+		if (ab)
+			dev_printk(KERN_DEBUG, ab->dev, "%pV", &vaf);
+		else
+			pr_devel("ath12k: %pV", &vaf);
+	}
 
 	/* TODO: trace log */
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -3906,6 +3906,10 @@ static void ath12k_mac_op_bss_info_chang
 
 	mutex_lock(&ah->conf_mutex);
 	if (!arvif->is_created) {
+		ath12k_info(NULL,
+			    "bss info parameter changes %x cached to apply after vdev create on channel assign\n",
+			    changed);
+
 		arvif->cache.bss_conf_changed |= changed;
 		mutex_unlock(&ah->conf_mutex);
 		return;
@@ -4170,6 +4174,7 @@ static int ath12k_mac_op_hw_scan(struct
 	 */
 	ar = ath12k_mac_select_scan_device(hw, vif, hw_req);
 	if (!ar) {
+		ath12k_err(NULL, "unable to select device for scan\n");
 		mutex_unlock(&ah->conf_mutex);
 		return -EINVAL;
 	}
@@ -4290,6 +4295,7 @@ static void ath12k_mac_op_cancel_hw_scan
 
 	mutex_lock(&ah->conf_mutex);
 	if (!arvif->is_created) {
+		ath12k_err(NULL, "unable to select device to cancel scan\n");
 		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
@@ -4572,6 +4578,7 @@ static int ath12k_mac_op_set_key(struct
 		arvif->cache.key_conf.key = key;
 		arvif->cache.key_conf.changed = true;
 
+		ath12k_info(NULL, "set key param cached since vif not assign to radio\n");
 		mutex_unlock(&ah->conf_mutex);
 
 		/* STA should be NULL before vdev create else need to warn */
@@ -5247,6 +5254,7 @@ static int ath12k_mac_op_sta_state(struc
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL, "unable to determine device to set sta state\n");
 		mutex_unlock(&ah->conf_mutex);
 		return -EINVAL;
 	}
@@ -5377,6 +5385,7 @@ static int ath12k_mac_op_sta_set_txpwr(s
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL, "unable to determine device to set sta txpwr\n");
 		ret = -EINVAL;
 		goto out;
 	}
@@ -5442,6 +5451,7 @@ static void ath12k_mac_op_sta_rc_update(
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL, "unable to determine device for sta update\n");
 		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
@@ -5656,6 +5666,7 @@ static int ath12k_mac_op_conf_tx(struct
 	 */
 	mutex_lock(&ah->conf_mutex);
 	if (!arvif->is_created) {
+		ath12k_info(NULL, "tx queue params cached since vif is not assigned to radio\n");
 		arvif->cache.tx_conf.changed = true;
 		arvif->cache.tx_conf.ac = ac;
 		arvif->cache.tx_conf.tx_queue_params = *params;
@@ -7083,6 +7094,8 @@ static void ath12k_mac_op_update_vif_off
 	 */
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_info(NULL,
+			    "unable to determine device to apply vif encap/decap flags, setting will be applied on channel assignment\n");
 		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
@@ -7368,8 +7381,11 @@ static struct ath12k *ath12k_mac_assign_
 
 	ar = ath12k_get_ar_by_ctx(hw, ctx);
 
-	if (!ar)
+	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device for the passed channel ctx\n");
 		goto out;
+	}
 
 	ab = ar->ab;
 
@@ -7491,6 +7507,8 @@ static void ath12k_mac_op_remove_interfa
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_dbg(NULL, ATH12K_DBG_MAC,
+			   "unable to determine device to remove interface\n");
 		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
@@ -7652,6 +7670,7 @@ static int ath12k_mac_op_ampdu_action(st
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL, "unable to determine device to set ampdu params\n");
 		mutex_unlock(&ah->conf_mutex);
 		return -EPERM;
 	}
@@ -7690,8 +7709,11 @@ static int ath12k_mac_op_add_chanctx(str
 
 	ar = ath12k_get_ar_by_ctx(hw, ctx);
 
-	if (!ar)
+	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device for the passed channel ctx\n");
 		return -EINVAL;
+	}
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "mac chanctx add freq %u width %d ptr %pK\n",
@@ -7718,8 +7740,11 @@ static void ath12k_mac_op_remove_chanctx
 
 	ar = ath12k_get_ar_by_ctx(hw, ctx);
 
-	if (!ar)
+	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device for the passed channel ctx\n");
 		return;
+	}
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "mac chanctx remove freq %u width %d ptr %pK\n",
@@ -8181,8 +8206,10 @@ static void ath12k_mac_op_change_chanctx
 
 	ar = ath12k_get_ar_by_ctx(hw, ctx);
 
-	if (!ar)
+	if (!ar) {
+		ath12k_err(NULL, "unable to determine device for the passed channel ctx\n");
 		return;
+	}
 
 	ab = ar->ab;
 
@@ -8772,6 +8799,8 @@ ath12k_mac_op_assign_vif_chanctx(struct
 	} else {
 		ar = ath12k_get_ar_by_ctx(hw, ctx);
 		if (!ar) {
+			ath12k_err(NULL,
+				   "unable to determine device for the passed channel ctx\n");
 			mutex_unlock(&ah->conf_mutex);
 			return -EINVAL;
 		}
@@ -8912,6 +8941,8 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 	 */
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device to stop vdev during channel unassign\n");
 		mutex_unlock(&ah->conf_mutex);
 		WARN_ON(1);
 		return;
@@ -8981,8 +9012,11 @@ ath12k_mac_op_switch_vif_chanctx(struct
 	}
 
 	ar = ath12k_get_ar_by_ctx(hw, vifs->old_ctx);
-	if (!ar)
+	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device for the passed channel ctx\n");
 		return -EINVAL;
+	}
 
 	mutex_lock(&ar->conf_mutex);
 
@@ -9109,6 +9143,8 @@ static void ath12k_mac_op_flush(struct i
 	} else {
 		ar = ath12k_get_ar_by_vif(hw, vif);
 		if (!ar) {
+			ath12k_err(NULL,
+				   "unable to determine device for tx flush\n");
 			goto out;
 		}
 		ath12k_mac_flush(ar);
@@ -9711,6 +9747,8 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
 	if (!ar) {
+		ath12k_err(NULL,
+			   "unable to determine device to set bitrates, configs can be applied after device bringup\n");
 		ret = -EPERM;
 		goto out;
 	}
