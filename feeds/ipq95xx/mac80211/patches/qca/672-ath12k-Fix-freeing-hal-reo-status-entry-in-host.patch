From 095061ec382cff5f484f392673968eb35d1be570 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Mon, 3 Oct 2022 16:58:34 +0530
Subject: [PATCH] ath12k: Fix freeing hal reo status entry in host in failure
 case

Host free up the memory in ring full scenario
for sending HAL_REO_CMD_*.

But hardware has the memory uncleared since
it might not received the command to flush. Due to this
hardware may over write some value on the memory
and that leads memory corruption in host.

Fix this by keeping the flush cache list intact in
failure case and retry later to avoid memory corruption.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c | 41 +++++++++++++++++--------
 1 file changed, 28 insertions(+), 13 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index aff17c6..a7d44ae 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -693,7 +693,7 @@ static void ath12k_dp_reo_cmd_free(struct ath12k_dp *dp, void *ctx,
 	}
 }
 
-static void ath12k_dp_reo_cache_flush(struct ath12k_base *ab,
+static int ath12k_dp_reo_cache_flush(struct ath12k_base *ab,
 				      struct dp_rx_tid *rx_tid)
 {
 	struct ath12k_hal_reo_cmd cmd = {0};
@@ -711,9 +711,17 @@ static void ath12k_dp_reo_cache_flush(struct ath12k_base *ab,
 						HAL_REO_CMD_FLUSH_CACHE, &cmd,
 						NULL);
 		if (ret)
+		{
 			ath12k_warn(ab,
-				    "failed to send HAL_REO_CMD_FLUSH_CACHE, tid %d (%d)\n",
-				    rx_tid->tid, ret);
+				    "failed to send HAL_REO_CMD_FLUSH_CACHE, tid %d (%d) desc_sz(%ld)\n",
+				    rx_tid->tid, ret, desc_sz);
+
+			/* If this fails with ring full condition, then
+			 * no need to retry below as it is expected to
+			 * fail within short time */
+			if (ret == -ENOBUFS)
+				goto exit;
+		}
 	}
 
 	memset(&cmd, 0, sizeof(cmd));
@@ -723,14 +731,12 @@ static void ath12k_dp_reo_cache_flush(struct ath12k_base *ab,
 	ret = ath12k_dp_tx_send_reo_cmd(ab, rx_tid,
 					HAL_REO_CMD_FLUSH_CACHE,
 					&cmd, ath12k_dp_reo_cmd_free);
-	if (ret) {
+	if (ret)
 		ath12k_err(ab, "failed to send HAL_REO_CMD_FLUSH_CACHE cmd, tid %d (%d)\n",
 			   rx_tid->tid, ret);
-		dma_unmap_single(ab->dev, rx_tid->paddr, rx_tid->size,
-				 DMA_BIDIRECTIONAL);
-		kfree(rx_tid->vaddr);
-		rx_tid->vaddr = NULL;
-	}
+
+exit:
+	return ret;
 }
 
 static void ath12k_dp_rx_tid_del_func(struct ath12k_dp *dp, void *ctx,
@@ -768,13 +774,22 @@ static void ath12k_dp_rx_tid_del_func(struct ath12k_dp *dp, void *ctx,
 		if (dp->reo_cmd_cache_flush_count > DP_REO_DESC_FREE_THRESHOLD ||
 		    time_after(jiffies, elem->ts +
 			       msecs_to_jiffies(DP_REO_DESC_FREE_TIMEOUT_MS))) {
-			list_del(&elem->list);
-			dp->reo_cmd_cache_flush_count--;
 			spin_unlock_bh(&dp->reo_cmd_lock);
 
-			ath12k_dp_reo_cache_flush(ab, &elem->data);
-			kfree(elem);
+			if (ath12k_dp_reo_cache_flush(ab, &elem->data)) {
+				/* In failure case, just update the timestamp
+				 * for flush cache elem and continue */
+				spin_lock_bh(&dp->reo_cmd_lock);
+				elem->ts = jiffies +
+					msecs_to_jiffies(DP_REO_DESC_FREE_TIMEOUT_MS);
+				ath12k_err(ab, "Failed to send HAL_REO_CMD_FLUSH_CACHE cmd"
+						"Updating timestamp (%ld) in the list\n", elem->ts);
+				continue;
+			}
 			spin_lock_bh(&dp->reo_cmd_lock);
+			list_del(&elem->list);
+			dp->reo_cmd_cache_flush_count--;
+			kfree(elem);
 		}
 	}
 	spin_unlock_bh(&dp->reo_cmd_lock);
-- 
2.17.1

