From 01a2515a28f07de490cca2d7e1f24f9321b5d344 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Mon, 28 Feb 2022 18:47:16 -0800
Subject: [PATCH] ath12k: workaround to match STA

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>

--- a/drivers/net/wireless/mac80211_hwsim.c
+++ b/drivers/net/wireless/mac80211_hwsim.c
@@ -2963,7 +2963,7 @@ static const struct ieee80211_sband_ifty
 			.has_eht = true,
 			.eht_cap_elem = {
 				.mac_cap_info[0] =
-					IEEE80211_EHT_MAC_CAP0_NSEP_PRIO_ACCESS |
+					IEEE80211_EHT_MAC_CAP0_EPCS_PRIO_ACCESS |
 					IEEE80211_EHT_MAC_CAP0_OM_CONTROL |
 					IEEE80211_EHT_MAC_CAP0_TRIG_TXOP_SHARING_MODE1,
 				.phy_cap_info[0] =
@@ -3223,7 +3223,7 @@ static const struct ieee80211_sband_ifty
 			.has_eht = true,
 			.eht_cap_elem = {
 				.mac_cap_info[0] =
-					IEEE80211_EHT_MAC_CAP0_NSEP_PRIO_ACCESS |
+					IEEE80211_EHT_MAC_CAP0_EPCS_PRIO_ACCESS |
 					IEEE80211_EHT_MAC_CAP0_OM_CONTROL |
 					IEEE80211_EHT_MAC_CAP0_TRIG_TXOP_SHARING_MODE1,
 				.phy_cap_info[0] =
--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -2018,20 +2018,14 @@ struct ieee80211_eht_cap_elem {
 
 /**
  * struct ieee80211_eht_operation - eht operation element
- *
- * This structure is the "EHT Operation Element" fields as
- * described in P802.11be_D1.4 section 9.4.2.311
- *
- * FIXME: The spec is unclear how big the fields are, and doesn't
- *	  indicate the "Disabled Subchannel Bitmap Present" in the
- *	  structure (Figure 9-1002a) at all ...
  */
 struct ieee80211_eht_operation {
-	u8 chan_width;
+	u8 chan_width:3,
+	   reserved1:5;
 	u8 ccfs;
-	u8 present_bm;
-
-	u8 disable_subchannel_bitmap[];
+	u8 disable_sub_chan_bitmap_present:1,
+	   reserved2:7;
+	u8 disable_subchannel_bitmap[2];
 } __packed;
 
 #define IEEE80211_EHT_OPER_DISABLED_SUBCHANNEL_BITMAP_PRESENT	0x1
@@ -2714,7 +2708,7 @@ ieee80211_he_spr_size(const u8 *he_spr_i
 #define S1G_OPER_CH_WIDTH_OPER		GENMASK(4, 1)
 
 /* EHT MAC capabilities as defined in P802.11be_D1.4 section 9.4.2.313.2 */
-#define IEEE80211_EHT_MAC_CAP0_NSEP_PRIO_ACCESS			0x01
+#define IEEE80211_EHT_MAC_CAP0_EPCS_PRIO_ACCESS			0x01
 #define IEEE80211_EHT_MAC_CAP0_OM_CONTROL			0x02
 #define IEEE80211_EHT_MAC_CAP0_TRIG_TXOP_SHARING_MODE1		0x04
 #define IEEE80211_EHT_MAC_CAP0_TRIG_TXOP_SHARING_MODE2		0x08
@@ -2799,6 +2793,8 @@ ieee80211_he_spr_size(const u8 *he_spr_i
 #define IEEE80211_EHT_OPER_CHAN_WIDTH_160MHZ	3
 #define IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ	4
 
+#define IEEE80211_EHT_OPER_PRESENT_BM		0x8
+
 /* Calculate 802.11be EHT capabilities IE Tx/Rx EHT MCS NSS Support Field size */
 static inline u8
 ieee80211_eht_mcs_nss_size(const struct ieee80211_he_cap_elem *he_cap,
@@ -2870,6 +2866,9 @@ ieee80211_eht_capa_size_ok(const u8 *he_
 	if (len < needed || !he_capa)
 		return false;
 
+	/* WAR: always set to true */
+	return true;
+
 	needed += ieee80211_eht_mcs_nss_size((const void *)he_capa,
 					     (const void *)data);
 	if (len < needed)
@@ -2900,9 +2899,6 @@ ieee80211_eht_oper_size_ok(const u8 *dat
 	if (len < needed)
 		return false;
 
-	if (elem->present_bm & IEEE80211_EHT_OPER_DISABLED_SUBCHANNEL_BITMAP_PRESENT)
-		needed += 2;
-
 	return len >= needed;
 }
 
--- a/net/mac80211/eht.c
+++ b/net/mac80211/eht.c
@@ -15,7 +15,6 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 				    u8 eht_cap_len, struct sta_info *sta)
 {
 	struct ieee80211_sta_eht_cap *eht_cap = &sta->sta.eht_cap;
-	struct ieee80211_he_cap_elem *he_cap_ie_elem = (void *)he_cap_ie;
 	u8 eht_ppe_size = 0;
 	u8 mcs_nss_size;
 	u8 eht_total_size = sizeof(eht_cap->eht_cap_elem);
@@ -28,8 +27,11 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 					 ieee80211_vif_type_p2p(&sdata->vif)))
 		return;
 
-	mcs_nss_size = ieee80211_eht_mcs_nss_size(he_cap_ie_elem,
+	mcs_nss_size = eht_cap_len - sizeof(struct ieee80211_eht_cap_elem_fixed);
+	/* WAR: compute based on capabilities
+	 * mcs_nss_size = ieee80211_eht_mcs_nss_size(he_cap_ie_elem,
 						  &eht_cap_ie_elem->fixed);
+	 */
 
 	eht_total_size += mcs_nss_size;
 
@@ -82,7 +84,7 @@ void ieee80211_eht_op_ie_to_bss_conf(str
 	if (!op_ie)
 		return;
 
-	vif->bss_conf.eht_oper.chan_width = op_ie->chan_width;
+	vif->bss_conf.eht_oper.chan_width = u8_get_bits(op_ie->chan_width, IEEE80211_EHT_OPER_CHAN_WIDTH);
 	vif->bss_conf.eht_oper.ccfs = op_ie->ccfs;
-	vif->bss_conf.eht_oper.present_bm = op_ie->present_bm;
+	vif->bss_conf.eht_oper.present_bm = u8_get_bits(op_ie->chan_width, IEEE80211_EHT_OPER_PRESENT_BM);
 }
--- a/net/mac80211/vht.c
+++ b/net/mac80211/vht.c
@@ -497,10 +497,12 @@ void ieee80211_sta_set_rx_nss(struct sta
 
 	if (sta->sta.eht_cap.has_eht) {
 		int i;
+		int eht_mcs_set_size = ieee80211_eht_mcs_nss_size(&sta->sta.he_cap,
+								  &sta->sta.eht_cap);
 		const u8 *rx_nss_mcs = (void *)&sta->sta.eht_cap.eht_mcs_nss_supp;
 
 		/* get the max nss for EHT over all possible bandwidths and mcs */
-		for (i = 0; i < sizeof(struct ieee80211_eht_mcs_nss_supp); i++)
+		for (i = 0; i < eht_mcs_set_size; i++)
 			eht_rx_nss = max_t(u8, eht_rx_nss,
 					   u8_get_bits(rx_nss_mcs[i],
 						       IEEE80211_EHT_MCS_NSS_RX));
