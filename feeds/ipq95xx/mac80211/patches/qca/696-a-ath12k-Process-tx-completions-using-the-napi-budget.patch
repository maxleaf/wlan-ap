From 67d18d5f7d15ed6bfe5afc0cb6f2e975b8f485c3 Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Tue, 22 Nov 2022 00:11:40 -0800
Subject: [PATCH 1/6] ath12k: Process tx completions using the napi budget

Limit the number of tx completions processing in a loop and
prioritize the transmit enqueue operation

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.c    | 13 +++++++++----
 drivers/net/wireless/ath/ath12k/dp_tx.c | 12 ++++++++----
 drivers/net/wireless/ath/ath12k/dp_tx.h |  3 ++-
 drivers/net/wireless/ath/ath12k/pci.c   |  5 +++++
 4 files changed, 24 insertions(+), 9 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -933,10 +933,15 @@ int ath12k_dp_service_srng(struct ath12k
 			    reo_status_mask |
 			    host2rxdma_mask;
 
-        if (tx_mask) {
-                i = __fls(tx_mask);
-                ath12k_dp_tx_completion_handler(ab, (i == 4) ? 3 : i);
-        }
+	if (tx_mask) {
+		i = __fls(tx_mask);
+		work_done = ath12k_dp_tx_completion_handler(ab, (i == 4) ? 3 : i, budget);
+
+		budget -= work_done;
+		tot_work_done += work_done;
+		if (budget <= 0)
+			goto done;
+	}
 
 	if (rx_mask) {
 		i =  fls(rx_mask) - 1;
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -839,7 +839,8 @@ static inline bool ath12k_dp_tx_completi
 	return true;
 }
 
-void ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id)
+int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
+				    int budget)
 {
 	struct ath12k *ar;
 	struct ath12k_dp *dp = &ab->dp;
@@ -851,6 +852,7 @@ void ath12k_dp_tx_completion_handler(str
 	u32 *desc, desc_id;
 	u8 mac_id;
 	int valid_entries;
+	int workdone = 0;
 	struct hal_wbm_completion_ring_tx tx_status = { 0 };
 	enum hal_wbm_rel_src_module buf_rel_source;
 
@@ -860,12 +862,12 @@ void ath12k_dp_tx_completion_handler(str
 	valid_entries = ath12k_hal_srng_dst_num_free(ab, status_ring, false);
 	if (!valid_entries) {
 		ath12k_hal_srng_access_umac_dst_ring_end_nolock(ab->mem, status_ring);
-		return;
+		return workdone;
 	}
 
 	ath12k_hal_srng_dst_invalidate_entry(ab, status_ring, valid_entries);
 
-	while ((desc = ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
+	while (budget && (desc = ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
 		if (!ath12k_dp_tx_completion_valid(desc))
 			continue;
 
@@ -905,17 +907,19 @@ void ath12k_dp_tx_completion_handler(str
 							     tx_ring, skb_ext_desc);
 			continue;
 		}
-
+		workdone++;
 		ar = ab->pdevs[mac_id].ar;
 
 		if (atomic_dec_and_test(&ar->dp.num_tx_pending))
 			wake_up(&ar->dp.tx_empty_waitq);
 
 		ath12k_dp_tx_complete_msdu(ar, msdu, &tx_status, buf_rel_source, skb_ext_desc);
+		budget--;
 	}
 
 	ath12k_hal_srng_access_umac_dst_ring_end_nolock(ab->mem, status_ring);
 
+	return workdone;
 }
 
 int ath12k_dp_tx_send_reo_cmd(struct ath12k_base *ab, struct dp_rx_tid *rx_tid,
--- a/drivers/net/wireless/ath/ath12k/dp_tx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.h
@@ -19,7 +19,8 @@ void ath12k_dp_tx_update_txcompl(struct
 int ath12k_dp_tx_htt_h2t_ver_req_msg(struct ath12k_base *ab);
 int ath12k_dp_tx(struct ath12k *ar, struct ath12k_vif *arvif,
 		 struct ath12k_sta *arsta, struct sk_buff *skb);
-void ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id);
+int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
+				    int tx_comp_budget);
 int ath12k_dp_tx_send_reo_cmd(struct ath12k_base *ab, struct dp_rx_tid *rx_tid,
 			      enum hal_reo_cmd_type type,
 			      struct ath12k_hal_reo_cmd *cmd,
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -44,6 +44,10 @@
 #define ATH12K_MAX_PCI_DOMAINS		0x5
 #define DP_IRQ_NAME_LEN 20
 
+/* choose a little lower value for tx completion processing
+ * to give priority for enqueue */
+#define ATH12K_TX_COMP_NAPI_BUDGET 0x5F
+
 char dp_irq_name[ATH12K_MAX_PCI_DOMAINS + 1][ATH12K_EXT_IRQ_GRP_NUM_MAX][DP_IRQ_NAME_LEN] = {};
 
 unsigned int ath12k_fw_mem_seg;
@@ -591,6 +595,11 @@ static int ath12k_pci_ext_irq_config(str
 		else
 			budget = ath12k_napi_poll_budget;
 
+		/* Apply a reduced budget for tx completion to prioritize tx
+		 * enqueue operation */
+		if (ab->hw_params.ring_mask->tx[i])
+			budget = ATH12K_TX_COMP_NAPI_BUDGET;
+
 		netif_napi_add(&irq_grp->napi_ndev, &irq_grp->napi,
 			       ath12k_pci_ext_grp_napi_poll, budget);
 
