From 5d37779c5bbd8de3f0890707ddedda2468768189 Mon Sep 17 00:00:00 2001
From: Thiraviyam Mariyappan <quic_tmariyap@quicinc.com>
Date: Mon, 6 Jun 2022 19:33:54 +0530
Subject: [PATCH] ath12k: fix security connection due to authorize the peer too
 early

Firmware expects host to authorize the peer after the successful key
install. But host authorize the peer before the key install, this
trigger the firmware assert which leads to Q6 crash. To avoid this Q6
crash, host should authorize the peer after the key install. So
introduce is_authorized in peer object to identify that peer is
authorize or not. When IEEE80211_STA_CONTROL_PORT flag is unset, peer
move to authorize state before the vdev up. When the same flag is set
then peer move to authorize state after vdev up. So added authorise
check in ath12k_bss_assoc() to handle the earlier state transition
case. Also added the WMI authorize procedure in
ath12k_mac_op_sta_state() to handle the non-earlier state transition
case.

The logic of this change is as same as commit 85f36923be47
("ath11k: fix fw crash due to peer get authorized before key install")

Tested-on: WCN7850 hw2.0 PCI WLAN.HMT.1.0-02582-QCAHMTSWPL_V1.0_V2.0_SILICONZ-1

Signed-off-by: Carl Huang <quic_cjhuang@quicinc.com>
Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Signed-off-by: Thiraviyam Mariyappan <quic_tmariyap@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c  | 52 ++++++++++++++++++++++++++++++----
 drivers/net/wireless/ath/ath12k/peer.h |  1 +
 2 files changed, 47 insertions(+), 6 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -3062,6 +3062,8 @@ static void ath12k_bss_assoc(struct ieee
 	struct ath12k_vif *arvif = (void *)vif->drv_priv;
 	struct peer_assoc_params peer_arg;
 	struct ieee80211_sta *ap_sta;
+	struct ath12k_peer *peer;
+	bool is_auth = false;
 	struct ieee80211_sta_he_cap he_cap;
 	int ret;
 	struct vdev_up_params params = { 0 };
@@ -3136,13 +3138,23 @@ static void ath12k_bss_assoc(struct ieee
 		   "mac vdev %d up (associated) bssid %pM aid %d\n",
 		   arvif->vdev_id, bss_conf->bssid, bss_conf->aid);
 
+	spin_lock_bh(&ar->ab->base_lock);
+
+	peer = ath12k_peer_find(ar->ab, arvif->vdev_id, arvif->bssid);
+	if (peer && peer->is_authorized)
+		is_auth = true;
+
+	spin_unlock_bh(&ar->ab->base_lock);
+
 	/* Authorize BSS Peer */
-	ret = ath12k_wmi_set_peer_param(ar, arvif->bssid,
-					arvif->vdev_id,
-					WMI_PEER_AUTHORIZE,
-					1);
-	if (ret)
-		ath12k_warn(ar->ab, "Unable to authorize BSS peer: %d\n", ret);
+	if (is_auth) {
+		ret = ath12k_wmi_set_peer_param(ar, arvif->bssid,
+						arvif->vdev_id,
+						WMI_PEER_AUTHORIZE,
+						1);
+		if (ret)
+			ath12k_warn(ar->ab, "Unable to authorize BSS peer: %d\n", ret);
+	}
 
 	ret = ath12k_wmi_send_obss_spr_cmd(ar, arvif->vdev_id,
 					   &bss_conf->he_obss_pd);
@@ -4936,6 +4948,34 @@ static int ath12k_mac_op_sta_state(struc
 			ath12k_warn(ar->ab, "Failed to associate station: %pM\n",
 				    sta->addr);
 	} else if (old_state == IEEE80211_STA_ASSOC &&
+		   new_state == IEEE80211_STA_AUTHORIZED) {
+		spin_lock_bh(&ar->ab->base_lock);
+
+		peer = ath12k_peer_find(ar->ab, arvif->vdev_id, sta->addr);
+		if (peer)
+			peer->is_authorized = true;
+
+		spin_unlock_bh(&ar->ab->base_lock);
+
+		if (vif->type == NL80211_IFTYPE_STATION && arvif->is_up) {
+			ret = ath12k_wmi_set_peer_param(ar, sta->addr,
+							arvif->vdev_id,
+							WMI_PEER_AUTHORIZE,
+							1);
+			if (ret)
+				ath12k_warn(ar->ab, "Unable to authorize peer %pM vdev %d: %d\n",
+					    sta->addr, arvif->vdev_id, ret);
+		}
+	} else if (old_state == IEEE80211_STA_AUTHORIZED &&
+		   new_state == IEEE80211_STA_ASSOC) {
+		spin_lock_bh(&ar->ab->base_lock);
+
+		peer = ath12k_peer_find(ar->ab, arvif->vdev_id, sta->addr);
+		if (peer)
+			peer->is_authorized = false;
+
+		spin_unlock_bh(&ar->ab->base_lock);
+	} else if (old_state == IEEE80211_STA_ASSOC &&
 		   new_state == IEEE80211_STA_AUTH &&
 		   (vif->type == NL80211_IFTYPE_AP ||
 		    vif->type == NL80211_IFTYPE_MESH_POINT ||
--- a/drivers/net/wireless/ath/ath12k/peer.h
+++ b/drivers/net/wireless/ath/ath12k/peer.h
@@ -42,6 +42,7 @@ struct ath12k_peer {
 	u16 sec_type_grp;
 	struct ppdu_user_delayba ppdu_stats_delayba;
 	bool delayba_flag;
+	bool is_authorized;
 
 	/* The below flag indicates whether
 	 * a peer has setup its datapath or not
