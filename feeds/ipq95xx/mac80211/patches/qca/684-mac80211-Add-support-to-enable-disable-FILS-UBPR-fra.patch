From 5b3719e1703286915d5db2b3825d029be16ef2fa Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Thu, 17 Nov 2022 00:13:40 +0530
Subject: [PATCH] mac80211: Add support to enable/disable FILS/UBPR frames

Add Support to enabled/disable the Fast initial Link Setup(FILS)
ands Unsolicited Broadcast Probe response frames in run time.
Currently FILS or UBPR config with interval 0 is considered
as invalid config, Allow user to set the fils max_interval and
ubpr interval to be set to 0 in which is case it is disabled.
This will allow run time disbable of FILS/UBPR rather doing
a BSS restart.

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 net/mac80211/cfg.c     | 74 +++++++++++++++++++++++++++-----------------------
 net/wireless/nl80211.c | 11 ++++++++
 2 files changed, 51 insertions(+), 34 deletions(-)

diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 2379448..e6e461f 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -901,21 +901,28 @@ static int ieee80211_set_fils_discovery(struct ieee80211_sub_if_data *sdata,
 	struct fils_discovery_data *new, *old = NULL;
 	struct ieee80211_fils_discovery *fd;
 
-	if (!params->tmpl || !params->tmpl_len)
-		return -EINVAL;
-
 	fd = &sdata->vif.bss_conf.fils_discovery;
 	fd->min_interval = params->min_interval;
 	fd->max_interval = params->max_interval;
 
 	old = sdata_dereference(sdata->u.ap.fils_discovery, sdata);
+
+	if (!fd->max_interval) {
+		new = NULL;
+		goto notify_fils;
+	}
+
+	if (!params->tmpl || !params->tmpl_len)
+		return -EINVAL;
+
 	new = kzalloc(sizeof(*new) + params->tmpl_len, GFP_KERNEL);
 	if (!new)
 		return -ENOMEM;
 	new->len = params->tmpl_len;
 	memcpy(new->data, params->tmpl, params->tmpl_len);
-	rcu_assign_pointer(sdata->u.ap.fils_discovery, new);
 
+notify_fils:
+	rcu_assign_pointer(sdata->u.ap.fils_discovery, new);
 	if (old)
 		kfree_rcu(old, rcu_head);
 
@@ -928,17 +935,24 @@ ieee80211_set_unsol_bcast_probe_resp(struct ieee80211_sub_if_data *sdata,
 {
 	struct unsol_bcast_probe_resp_data *new, *old = NULL;
 
+	old = sdata_dereference(sdata->u.ap.unsol_bcast_probe_resp, sdata);
+
+	if (!params->interval) {
+		new = NULL;
+		goto notify_ubpr;
+	}
+
 	if (!params->tmpl || !params->tmpl_len)
 		return -EINVAL;
 
-	old = sdata_dereference(sdata->u.ap.unsol_bcast_probe_resp, sdata);
 	new = kzalloc(sizeof(*new) + params->tmpl_len, GFP_KERNEL);
 	if (!new)
 		return -ENOMEM;
 	new->len = params->tmpl_len;
 	memcpy(new->data, params->tmpl, params->tmpl_len);
-	rcu_assign_pointer(sdata->u.ap.unsol_bcast_probe_resp, new);
 
+notify_ubpr:
+	rcu_assign_pointer(sdata->u.ap.unsol_bcast_probe_resp, new);
 	if (old)
 		kfree_rcu(old, rcu_head);
 
@@ -1420,21 +1434,17 @@ static int ieee80211_start_ap(struct wiphy *wiphy, struct net_device *dev,
 		goto error;
 	changed |= err;
 
-	if (params->fils_discovery.max_interval) {
-		err = ieee80211_set_fils_discovery(sdata,
-						   &params->fils_discovery);
-		if (err < 0)
-			goto error;
-		changed |= BSS_CHANGED_FILS_DISCOVERY;
-	}
+	err = ieee80211_set_fils_discovery(sdata,
+					   &params->fils_discovery);
+	if (err < 0)
+		goto error;
+	changed |= BSS_CHANGED_FILS_DISCOVERY;
 
-	if (params->unsol_bcast_probe_resp.interval) {
-		err = ieee80211_set_unsol_bcast_probe_resp(sdata,
-							   &params->unsol_bcast_probe_resp);
-		if (err < 0)
-			goto error;
-		changed |= BSS_CHANGED_UNSOL_BCAST_PROBE_RESP;
-	}
+	err = ieee80211_set_unsol_bcast_probe_resp(sdata,
+						   &params->unsol_bcast_probe_resp);
+	if (err < 0)
+		goto error;
+	changed |= BSS_CHANGED_UNSOL_BCAST_PROBE_RESP;
 
 	err = drv_start_ap(sdata->local, sdata);
 	if (err) {
@@ -1505,21 +1515,17 @@ static int ieee80211_update_ap(struct wiphy *wiphy, struct net_device *dev,
 	if (err > 0)
 		changed = err;
 
-	if (params->fils_discovery.max_interval) {
-		err = ieee80211_set_fils_discovery(sdata,
-						   &params->fils_discovery);
-		if (err < 0)
-			return err;
-		changed |= BSS_CHANGED_FILS_DISCOVERY;
-	}
+	err = ieee80211_set_fils_discovery(sdata,
+					   &params->fils_discovery);
+	if (err < 0)
+		return err;
+	changed |= BSS_CHANGED_FILS_DISCOVERY;
 
-	if (params->unsol_bcast_probe_resp.interval) {
-		err = ieee80211_set_unsol_bcast_probe_resp(sdata,
-							   &params->unsol_bcast_probe_resp);
-		if (err < 0)
-			return err;
-		changed |= BSS_CHANGED_UNSOL_BCAST_PROBE_RESP;
-	}
+	err = ieee80211_set_unsol_bcast_probe_resp(sdata,
+						   &params->unsol_bcast_probe_resp);
+	if (err < 0)
+		return err;
+	changed |= BSS_CHANGED_UNSOL_BCAST_PROBE_RESP;
 
 	ieee80211_bss_info_change_notify(sdata, changed);
 	return 0;
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 80f20f9..602dfe0 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -5739,6 +5739,12 @@ static int nl80211_parse_fils_discovery(struct cfg80211_registered_device *rdev,
 	if (ret)
 		return ret;
 
+	fd->max_interval = nla_get_u32(tb[NL80211_FILS_DISCOVERY_ATTR_INT_MAX]);
+
+	if (!fd->max_interval)
+		return 0;
+
+
 	if (!tb[NL80211_FILS_DISCOVERY_ATTR_INT_MIN] ||
 	    !tb[NL80211_FILS_DISCOVERY_ATTR_INT_MAX] ||
 	    !tb[NL80211_FILS_DISCOVERY_ATTR_TMPL])
@@ -5771,6 +5777,11 @@ nl80211_parse_unsol_bcast_probe_resp(struct cfg80211_registered_device *rdev,
 	if (ret)
 		return ret;
 
+	presp->interval = nla_get_u32(tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT]);
+
+	if (!presp->interval)
+		return 0;
+
 	if (!tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT] ||
 	    !tb[NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL])
 		return -EINVAL;
-- 
2.7.4

