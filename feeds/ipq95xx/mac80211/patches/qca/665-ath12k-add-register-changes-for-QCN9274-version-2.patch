From f1cdd554b4febd47571de3d4fab8d4e05ef96780 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Mon, 12 Sep 2022 13:30:52 +0530
Subject: [PATCH] ath12k: enable QCN9274 version 2 support in driver

This patch adds support for enabling ath12k driver in QCN9274
version 2 hardware by incorporating corresponding register related
changes. Based on the hardware version either QCN9274 version 1
(SOC major version 1) or QCN9274 version 2 (SOC major verison 0x2)
seperate set of hardware param gets invoked.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c   |  42 ++++++++-
 drivers/net/wireless/ath/ath12k/core.h   |   1 +
 drivers/net/wireless/ath/ath12k/dp.c     |  16 ++--
 drivers/net/wireless/ath/ath12k/hal.c    |  53 +++++------
 drivers/net/wireless/ath/ath12k/hal.h    | 151 ++++++++++++++++++-------------
 drivers/net/wireless/ath/ath12k/hal_rx.c |  12 +--
 drivers/net/wireless/ath/ath12k/hw.c     | 143 +++++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/hw.h     |  46 +++++++++-
 drivers/net/wireless/ath/ath12k/mhi.c    |   3 +-
 drivers/net/wireless/ath/ath12k/pci.c    |  31 ++++++-
 drivers/net/wireless/ath/ath12k/wmi.c    |   1 +
 11 files changed, 387 insertions(+), 112 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 37dae2a..a7f6bb5 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -81,7 +81,47 @@ static const struct ath12k_hw_params ath12k_hw_params[] = {
 		.supports_ap_ps = true,
 		.credit_flow = false,
 		.wakeup_mhi = false,
-		.alloc_cacheable_memory =true,
+		.alloc_cacheable_memory = true,
+	},
+	{
+		.name = "qcn92xx hw2.0",
+		.hw_rev = ATH12K_HW_QCN92XX_HW20,
+		.fw = {
+			.dir = "QCN92XX/hw1.0",
+			.board_size = 256 * 1024,
+			.cal_offset = 128 * 1024,
+		},
+		.max_radios = 1,
+		.single_pdev_only = false,
+		.qmi_service_ins_id = ATH12K_QMI_WLFW_SERVICE_INS_ID_V01_QCN92XX,
+		.hw_ops = &qcn92xx_ops,
+		.ring_mask = &ath12k_hw_ring_mask_qcn92xx,
+		.internal_sleep_clock = false,
+		.regs = &qcn92xx_v2_regs,
+		.host_ce_config = ath12k_host_ce_config_qcn92xx,
+		.ce_count = 16,
+		.target_ce_config = ath12k_target_ce_config_wlan_qcn92xx,
+		.target_ce_count = 12,
+		.svc_to_ce_map = ath12k_target_service_to_ce_map_wlan_qcn92xx,
+		.svc_to_ce_map_len = 21,
+		.rxdma1_enable = true,
+		.num_rxmda_per_pdev = 1,
+		.rx_mac_buf_ring = false,
+		.vdev_start_delay = false,
+		.interface_modes = BIT(NL80211_IFTYPE_STATION) |
+					BIT(NL80211_IFTYPE_AP) |
+					BIT(NL80211_IFTYPE_MESH_POINT),
+		.supports_monitor = true,
+		.idle_ps = false,
+		.cold_boot_calib = false,
+		.supports_suspend = false,
+		.hal_desc_sz = sizeof(struct hal_rx_desc_qcn92xx),
+		.num_tcl_banks = 48,
+		.fix_l1ss = false,
+		.supports_ap_ps = true,
+		.credit_flow = false,
+		.wakeup_mhi = false,
+		.alloc_cacheable_memory = true,
 	},
 };
 
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index f5090e5..cbb28eb 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -124,6 +124,7 @@ struct ath12k_skb_rxcb {
 
 enum ath12k_hw_rev {
 	ATH12K_HW_QCN92XX_HW10 = 0,
+	ATH12K_HW_QCN92XX_HW20 = 1,
 };
 
 #define ATH12K_DIAG_HW_ID_OFFSET 16
diff --git a/drivers/net/wireless/ath/ath12k/dp.c b/drivers/net/wireless/ath/ath12k/dp.c
index 455e608..24df514 100644
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1242,7 +1242,8 @@ static void ath12k_dp_reoq_lut_cleanup(struct ath12k_base *ab)
 			  dp->reoq_lut.vaddr, dp->reoq_lut.paddr);
 	dp->reoq_lut.vaddr = NULL;
 
-	ath12k_hif_write32(ab, HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_LUT_BASE0, 0);
+	ath12k_hif_write32(ab,
+			   HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_LUT_BASE0(ab), 0);
 }
 
 void ath12k_dp_free(struct ath12k_base *ab)
@@ -1274,7 +1275,7 @@ void ath12k_dp_cc_config(struct ath12k_base *ab)
 	u32 wbm_base = HAL_SEQ_WCSS_UMAC_WBM_REG;
 	u32 val = 0;
 
-	ath12k_hif_write32(ab, reo_base + HAL_REO1_SW_COOKIE_CFG0, cmem_base);
+	ath12k_hif_write32(ab, reo_base + HAL_REO1_SW_COOKIE_CFG0(ab), cmem_base);
 
 	val |= FIELD_PREP(HAL_REO1_SW_COOKIE_CFG_CMEM_BASE_ADDR_MSB,
 			  ATH12K_CMEM_ADDR_MSB) |
@@ -1284,7 +1285,7 @@ void ath12k_dp_cc_config(struct ath12k_base *ab)
 		FIELD_PREP(HAL_REO1_SW_COOKIE_CFG_ENABLE, 1) |
 		FIELD_PREP(HAL_REO1_SW_COOKIE_CFG_GLOBAL_ENABLE, 1);
 
-	ath12k_hif_write32(ab, reo_base + HAL_REO1_SW_COOKIE_CFG1, val);
+	ath12k_hif_write32(ab, reo_base + HAL_REO1_SW_COOKIE_CFG1(ab), val);
 
 	/* Enable HW CC for WBM */
 	ath12k_hif_write32(ab, wbm_base + HAL_WBM_SW_COOKIE_CFG0, cmem_base);
@@ -1505,15 +1506,16 @@ static int ath12k_dp_reoq_lut_setup(struct ath12k_base *ab)
 
 	memset(dp->reoq_lut.vaddr, 0, DP_REOQ_LUT_SIZE);
 
-	ath12k_hif_write32(ab, HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_LUT_BASE0,
+	ath12k_hif_write32(ab, HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_LUT_BASE0(ab),
 			   dp->reoq_lut.paddr >> 8);
 
-	val = ath12k_hif_read32(ab, HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_ADDR_READ);
+	val = ath12k_hif_read32(ab,
+				HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_ADDR_READ(ab));
 
-	ath12k_hif_write32(ab, HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_ADDR_READ,
+	ath12k_hif_write32(ab, HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_ADDR_READ(ab),
 			   val | HAL_REO_QDESC_ADDR_READ_LUT_ENABLE);
 
-	ath12k_hif_write32(ab, HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_MAX_PEERID,
+	ath12k_hif_write32(ab, HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_MAX_PEERID(ab),
 			   HAL_REO_QDESC_MAX_PEERID);
 
 	return 0;
diff --git a/drivers/net/wireless/ath/ath12k/hal.c b/drivers/net/wireless/ath/ath12k/hal.c
index 7686e65..7dd00e0 100644
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -1240,21 +1240,21 @@ void ath12k_hal_setup_link_idle_list(struct ath12k_base *ab,
 	}
 
 	ath12k_hif_write32(ab,
-			   HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_R0_IDLE_LIST_CONTROL_ADDR,
+			   HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_R0_IDLE_LIST_CTRL_ADDR(ab),
 			   FIELD_PREP(HAL_WBM_SCATTER_BUFFER_SIZE, reg_scatter_buf_sz) |
 			   FIELD_PREP(HAL_WBM_LINK_DESC_IDLE_LIST_MODE, 0x1));
 	ath12k_hif_write32(ab,
-			   HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_R0_IDLE_LIST_SIZE_ADDR,
+			   HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_R0_IDLE_LIST_SIZE_ADDR(ab),
 			   FIELD_PREP(HAL_WBM_SCATTER_RING_SIZE_OF_IDLE_LINK_DESC_LIST,
 				      reg_scatter_buf_sz * nsbufs));
 	ath12k_hif_write32(ab,
 			   HAL_SEQ_WCSS_UMAC_WBM_REG +
-			   HAL_WBM_SCATTERED_RING_BASE_LSB,
+			   HAL_WBM_SCATTERED_RING_BASE_LSB(ab),
 			   FIELD_PREP(BUFFER_ADDR_INFO0_ADDR,
 				      sbuf[0].paddr & HAL_ADDR_LSB_REG_MASK));
 	ath12k_hif_write32(ab,
 			   HAL_SEQ_WCSS_UMAC_WBM_REG +
-			   HAL_WBM_SCATTERED_RING_BASE_MSB,
+			   HAL_WBM_SCATTERED_RING_BASE_MSB(ab),
 			   FIELD_PREP(
 				HAL_WBM_SCATTERED_DESC_MSB_BASE_ADDR_39_32,
 				(u64)sbuf[0].paddr >> HAL_ADDR_MSB_REG_SHIFT) |
@@ -1265,12 +1265,12 @@ void ath12k_hal_setup_link_idle_list(struct ath12k_base *ab,
 	/* Setup head and tail pointers for the idle list */
 	ath12k_hif_write32(ab,
 			   HAL_SEQ_WCSS_UMAC_WBM_REG +
-			   HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX0,
+			   HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX0(ab),
 			   FIELD_PREP(BUFFER_ADDR_INFO0_ADDR,
 				      sbuf[nsbufs - 1].paddr));
 	ath12k_hif_write32(ab,
 			   HAL_SEQ_WCSS_UMAC_WBM_REG +
-			   HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX1,
+			   HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX1(ab),
 			   FIELD_PREP(
 				HAL_WBM_SCATTERED_DESC_MSB_BASE_ADDR_39_32,
 				((u64)sbuf[nsbufs - 1].paddr >>
@@ -1279,18 +1279,18 @@ void ath12k_hal_setup_link_idle_list(struct ath12k_base *ab,
 				      (end_offset >> 2)));
 	ath12k_hif_write32(ab,
 			   HAL_SEQ_WCSS_UMAC_WBM_REG +
-			   HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX0,
+			   HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX0(ab),
 			   FIELD_PREP(BUFFER_ADDR_INFO0_ADDR,
 				      sbuf[0].paddr));
 
 	ath12k_hif_write32(ab,
 			   HAL_SEQ_WCSS_UMAC_WBM_REG +
-			   HAL_WBM_SCATTERED_DESC_PTR_TAIL_INFO_IX0,
+			   HAL_WBM_SCATTERED_DESC_PTR_TAIL_INFO_IX0(ab),
 			   FIELD_PREP(BUFFER_ADDR_INFO0_ADDR,
 				      sbuf[0].paddr));
 	ath12k_hif_write32(ab,
 			   HAL_SEQ_WCSS_UMAC_WBM_REG +
-			   HAL_WBM_SCATTERED_DESC_PTR_TAIL_INFO_IX1,
+			   HAL_WBM_SCATTERED_DESC_PTR_TAIL_INFO_IX1(ab),
 			   FIELD_PREP(
 				HAL_WBM_SCATTERED_DESC_MSB_BASE_ADDR_39_32,
 				((u64)sbuf[0].paddr >> HAL_ADDR_MSB_REG_SHIFT)) |
@@ -1298,13 +1298,13 @@ void ath12k_hal_setup_link_idle_list(struct ath12k_base *ab,
 				      0));
 	ath12k_hif_write32(ab,
 			   HAL_SEQ_WCSS_UMAC_WBM_REG +
-			   HAL_WBM_SCATTERED_DESC_PTR_HP_ADDR,
+			   HAL_WBM_SCATTERED_DESC_PTR_HP_ADDR(ab),
 			   2 * tot_link_desc);
 
 	/* Enable the SRNG */
 	ath12k_hif_write32(ab,
 			   HAL_SEQ_WCSS_UMAC_WBM_REG +
-			   HAL_WBM_IDLE_LINK_RING_MISC_ADDR,
+			   HAL_WBM_IDLE_LINK_RING_MISC_ADDR(ab),
 			   FIELD_PREP(HAL_WBM_IDLE_LINK_RING_MISC_SRNG_ENABLE,
 				      1) |
 			   FIELD_PREP(HAL_WBM_IDLE_LINK_RING_MISC_RIND_ID_DISABLE,
@@ -1538,27 +1538,27 @@ static int ath12k_hal_srng_create_config(struct ath12k_base *ab)
 		return -ENOMEM;
 
 	s = &hal->srng_config[HAL_REO_DST];
-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_RING_BASE_LSB;
+	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_RING_BASE_LSB(ab);
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_RING_HP;
-	s->reg_size[0] = HAL_REO2_RING_BASE_LSB - HAL_REO1_RING_BASE_LSB;
+	s->reg_size[0] = HAL_REO2_RING_BASE_LSB(ab) - HAL_REO1_RING_BASE_LSB(ab);
 	s->reg_size[1] = HAL_REO2_RING_HP - HAL_REO1_RING_HP;
 
 	s = &hal->srng_config[HAL_REO_EXCEPTION];
-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_SW0_RING_BASE_LSB;
+	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_SW0_RING_BASE_LSB(ab);
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_SW0_RING_HP;
 
 	s = &hal->srng_config[HAL_REO_REINJECT];
-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_SW2REO_RING_BASE_LSB;
+	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_SW2REO_RING_BASE_LSB(ab);
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_SW2REO_RING_HP;
-	s->reg_size[0] = HAL_SW2REO1_RING_BASE_LSB - HAL_SW2REO_RING_BASE_LSB;
+	s->reg_size[0] = HAL_SW2REO1_RING_BASE_LSB(ab) - HAL_SW2REO_RING_BASE_LSB(ab);
 	s->reg_size[1] = HAL_SW2REO1_RING_HP - HAL_SW2REO_RING_HP;
 
 	s = &hal->srng_config[HAL_REO_CMD];
-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_CMD_RING_BASE_LSB;
+	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_CMD_RING_BASE_LSB(ab);
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_CMD_HP;
 
 	s = &hal->srng_config[HAL_REO_STATUS];
-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_STATUS_RING_BASE_LSB;
+	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_STATUS_RING_BASE_LSB(ab);
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_STATUS_HP;
 
 	s = &hal->srng_config[HAL_TCL_DATA];
@@ -1601,21 +1601,21 @@ static int ath12k_hal_srng_create_config(struct ath12k_base *ab)
 		HAL_SEQ_WCSS_UMAC_CE0_DST_REG;
 
 	s = &hal->srng_config[HAL_WBM_IDLE_LINK];
-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_IDLE_LINK_RING_BASE_LSB;
+	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_IDLE_LINK_RING_BASE_LSB(ab);
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_IDLE_LINK_RING_HP;
 
 	s = &hal->srng_config[HAL_SW2WBM_RELEASE];
-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_SW_RELEASE_RING_BASE_LSB;
+	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_SW_REL_RING_BASE_LSB(ab);
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_SW_RELEASE_RING_HP;
-	s->reg_size[0] = HAL_WBM_SW1_RELEASE_RING_BASE_LSB -
-			 HAL_WBM_SW_RELEASE_RING_BASE_LSB;
+	s->reg_size[0] = HAL_WBM_SW1_RELEASE_RING_BASE_LSB(ab) -
+			 HAL_WBM_SW_REL_RING_BASE_LSB(ab);
 	s->reg_size[1] = HAL_WBM_SW1_RELEASE_RING_HP - HAL_WBM_SW_RELEASE_RING_HP;
 
 	s = &hal->srng_config[HAL_WBM2SW_RELEASE];
-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM0_RELEASE_RING_BASE_LSB;
+	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM0_RELEASE_RING_BASE_LSB(ab);
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM0_RELEASE_RING_HP;
-	s->reg_size[0] = HAL_WBM1_RELEASE_RING_BASE_LSB -
-		HAL_WBM0_RELEASE_RING_BASE_LSB;
+	s->reg_size[0] = HAL_WBM1_RELEASE_RING_BASE_LSB(ab) -
+		HAL_WBM0_RELEASE_RING_BASE_LSB(ab);
 	s->reg_size[1] = HAL_WBM1_RELEASE_RING_HP - HAL_WBM0_RELEASE_RING_HP;
 
 	/* Some LMAC rings are not accesed from the host:
@@ -1629,7 +1629,7 @@ static int ath12k_hal_srng_create_config(struct ath12k_base *ab)
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_TCL_PPE2TCL1_RING_HP;
 
 	s = &hal->srng_config[HAL_PPE_RELEASE];
-	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_PPE_RELEASE_RING_BASE_LSB;
+	s->reg_start[0] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_PPE_RELEASE_RING_BASE_LSB(ab);
 	s->reg_start[1] = HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_PPE_RELEASE_RING_HP;
 
 	return 0;
@@ -1644,6 +1644,7 @@ int ath12k_hal_srng_init(struct ath12k_base *ab)
 
 	switch (ab->hw_rev) {
 	case ATH12K_HW_QCN92XX_HW10:
+	case ATH12K_HW_QCN92XX_HW20:
 		ab->hal.ops = &hal_qcn92xx_ops;
 		break;
 	default:
diff --git a/drivers/net/wireless/ath/ath12k/hal.h b/drivers/net/wireless/ath/ath12k/hal.h
index b41e3d8..e644d48 100644
--- a/drivers/net/wireless/ath/ath12k/hal.h
+++ b/drivers/net/wireless/ath/ath12k/hal.h
@@ -61,24 +61,24 @@ struct ath12k_base;
 #define HAL_TCL1_RING_DSCP_TID_MAP		0x00000240
 #define HAL_TCL1_RING_BASE_LSB			0x00000900
 #define HAL_TCL1_RING_BASE_MSB			0x00000904
-#define HAL_TCL1_RING_ID(ab)			ab->hw_params.regs->hal_tcl1_ring_id
-#define HAL_TCL1_RING_MISC(ab)			ab->hw_params.regs->hal_tcl1_ring_misc
+#define HAL_TCL1_RING_ID(ab)			(ab)->hw_params.regs->hal_tcl1_ring_id
+#define HAL_TCL1_RING_MISC(ab)			(ab)->hw_params.regs->hal_tcl1_ring_misc
 #define HAL_TCL1_RING_TP_ADDR_LSB(ab) \
-	ab->hw_params.regs->hal_tcl1_ring_tp_addr_lsb
+	(ab)->hw_params.regs->hal_tcl1_ring_tp_addr_lsb
 #define HAL_TCL1_RING_TP_ADDR_MSB(ab) \
-	ab->hw_params.regs->hal_tcl1_ring_tp_addr_msb
+	(ab)->hw_params.regs->hal_tcl1_ring_tp_addr_msb
 #define HAL_TCL1_RING_CONSUMER_INT_SETUP_IX0(ab) \
-	ab->hw_params.regs->hal_tcl1_ring_consumer_int_setup_ix0
+	(ab)->hw_params.regs->hal_tcl1_ring_consumer_int_setup_ix0
 #define HAL_TCL1_RING_CONSUMER_INT_SETUP_IX1(ab) \
-	ab->hw_params.regs->hal_tcl1_ring_consumer_int_setup_ix1
+	(ab)->hw_params.regs->hal_tcl1_ring_consumer_int_setup_ix1
 #define HAL_TCL1_RING_MSI1_BASE_LSB(ab) \
-	ab->hw_params.regs->hal_tcl1_ring_msi1_base_lsb
+	(ab)->hw_params.regs->hal_tcl1_ring_msi1_base_lsb
 #define HAL_TCL1_RING_MSI1_BASE_MSB(ab) \
-	ab->hw_params.regs->hal_tcl1_ring_msi1_base_msb
+	(ab)->hw_params.regs->hal_tcl1_ring_msi1_base_msb
 #define HAL_TCL1_RING_MSI1_DATA(ab) \
-	ab->hw_params.regs->hal_tcl1_ring_msi1_data
+	(ab)->hw_params.regs->hal_tcl1_ring_msi1_data
 #define HAL_TCL2_RING_BASE_LSB			0x00000978
-#define HAL_TCL_RING_BASE_LSB(ab)		ab->hw_params.regs->hal_tcl_ring_base_lsb
+#define HAL_TCL_RING_BASE_LSB(ab)		(ab)->hw_params.regs->hal_tcl_ring_base_lsb
 
 #define HAL_TCL1_RING_MSI1_BASE_LSB_OFFSET(ab)				\
 	(HAL_TCL1_RING_MSI1_BASE_LSB(ab) - HAL_TCL1_RING_BASE_LSB)
@@ -112,7 +112,7 @@ struct ath12k_base;
 
 /* TCL STATUS ring address */
 #define HAL_TCL_STATUS_RING_BASE_LSB(ab) \
-	ab->hw_params.regs->hal_tcl_status_ring_base_lsb
+	(ab)->hw_params.regs->hal_tcl_status_ring_base_lsb
 #define HAL_TCL_STATUS_RING_HP			0x00002048
 
 /* PPE2TCL1 Ring address */
@@ -120,56 +120,59 @@ struct ath12k_base;
 #define HAL_TCL_PPE2TCL1_RING_HP		0x00002038
 
 /* WBM PPE Release Ring address */
-#define HAL_WBM_PPE_RELEASE_RING_BASE_LSB	0x0000043c
+#define HAL_WBM_PPE_RELEASE_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_ppe_rel_ring_base
 #define HAL_WBM_PPE_RELEASE_RING_HP		0x00003020
 
 /* REO2SW(x) R0 ring configuration address */
 #define HAL_REO1_GEN_ENABLE			0x00000000
-#define HAL_REO1_MISC_CTRL_ADDR			0x00000b7c
+#define HAL_REO1_MISC_CTRL_ADDR(ab) \
+		(ab)->hw_params.regs->hal_reo1_misc_ctrl_addr
 #define HAL_REO1_DEST_RING_CTRL_IX_0		0x00000004
 #define HAL_REO1_DEST_RING_CTRL_IX_1		0x00000008
 #define HAL_REO1_DEST_RING_CTRL_IX_2		0x0000000c
 #define HAL_REO1_DEST_RING_CTRL_IX_3		0x00000010
-#define HAL_REO1_SW_COOKIE_CFG0			0x00000050
-#define HAL_REO1_SW_COOKIE_CFG1			0x00000054
-#define HAL_REO1_QDESC_LUT_BASE0		0x00000058
-#define HAL_REO1_QDESC_LUT_BASE1		0x0000005c
-#define HAL_REO1_QDESC_ADDR_READ		0x00000060
-#define HAL_REO1_QDESC_MAX_PEERID		0x0000006c
-
-#define HAL_REO1_RING_BASE_LSB			0x000004e4
-#define HAL_REO1_RING_BASE_MSB			0x000004e8
-#define HAL_REO1_RING_ID			0x000004ec
-#define HAL_REO1_RING_MISC			0x000004f4
-#define HAL_REO1_RING_HP_ADDR_LSB		0x000004f8
-#define HAL_REO1_RING_HP_ADDR_MSB		0x000004fc
-#define HAL_REO1_RING_PRODUCER_INT_SETUP	0x00000508
-#define HAL_REO1_RING_MSI1_BASE_LSB		0x0000052c
-#define HAL_REO1_RING_MSI1_BASE_MSB		0x00000530
-#define HAL_REO1_RING_MSI1_DATA			0x00000534
-#define HAL_REO2_RING_BASE_LSB			0x0000055c
-#define HAL_REO1_AGING_THRESH_IX_0		0x00000b08
-#define HAL_REO1_AGING_THRESH_IX_1		0x00000b0c
-#define HAL_REO1_AGING_THRESH_IX_2		0x00000b10
-#define HAL_REO1_AGING_THRESH_IX_3		0x00000b14
+#define HAL_REO1_SW_COOKIE_CFG0(ab)	(ab)->hw_params.regs->hal_reo1_sw_cookie_cfg0
+#define HAL_REO1_SW_COOKIE_CFG1(ab)	(ab)->hw_params.regs->hal_reo1_sw_cookie_cfg1
+#define HAL_REO1_QDESC_LUT_BASE0(ab)	(ab)->hw_params.regs->hal_reo1_qdesc_lut_base0
+#define HAL_REO1_QDESC_LUT_BASE1(ab)	(ab)->hw_params.regs->hal_reo1_qdesc_lut_base1
+#define HAL_REO1_QDESC_ADDR_READ(ab)	(ab)->hw_params.regs->hal_reo1_qdesc_addr_read
+#define HAL_REO1_QDESC_MAX_PEERID(ab)	(ab)->hw_params.regs->hal_reo1_qdesc_max_peerid
+
+#define HAL_REO1_RING_BASE_LSB(ab)	(ab)->hw_params.regs->hal_reo1_ring_base_lsb
+#define HAL_REO1_RING_BASE_MSB(ab)	(ab)->hw_params.regs->hal_reo1_ring_base_msb
+#define HAL_REO1_RING_ID(ab)		(ab)->hw_params.regs->hal_reo1_ring_id
+#define HAL_REO1_RING_MISC(ab)		(ab)->hw_params.regs->hal_reo1_ring_misc
+#define HAL_REO1_RING_HP_ADDR_LSB(ab)	(ab)->hw_params.regs->hal_reo1_ring_hp_addr_lsb
+#define HAL_REO1_RING_HP_ADDR_MSB(ab)	(ab)->hw_params.regs->hal_reo1_ring_hp_addr_msb
+#define HAL_REO1_RING_PRODUCER_INT_SETUP(ab) \
+		(ab)->hw_params.regs->hal_reo1_ring_producer_int_setup
+#define HAL_REO1_RING_MSI1_BASE_LSB(ab)	(ab)->hw_params.regs->hal_reo1_ring_msi1_base_lsb
+#define HAL_REO1_RING_MSI1_BASE_MSB(ab)	(ab)->hw_params.regs->hal_reo1_ring_msi1_base_msb
+#define HAL_REO1_RING_MSI1_DATA(ab)	(ab)->hw_params.regs->hal_reo1_ring_msi1_data
+#define HAL_REO2_RING_BASE_LSB(ab)	(ab)->hw_params.regs->hal_reo2_ring_base
+#define HAL_REO1_AGING_THRESH_IX_0(ab)	(ab)->hw_params.regs->hal_reo1_aging_thres_ix0
+#define HAL_REO1_AGING_THRESH_IX_1(ab)	(ab)->hw_params.regs->hal_reo1_aging_thres_ix1
+#define HAL_REO1_AGING_THRESH_IX_2(ab)	(ab)->hw_params.regs->hal_reo1_aging_thres_ix2
+#define HAL_REO1_AGING_THRESH_IX_3(ab)	(ab)->hw_params.regs->hal_reo1_aging_thres_ix3
 
 #define HAL_REO1_RING_MSI1_BASE_LSB_OFFSET \
-		(HAL_REO1_RING_MSI1_BASE_LSB - HAL_REO1_RING_BASE_LSB)
+		(HAL_REO1_RING_MSI1_BASE_LSB(ab) - HAL_REO1_RING_BASE_LSB(ab))
 #define HAL_REO1_RING_MSI1_BASE_MSB_OFFSET \
-		(HAL_REO1_RING_MSI1_BASE_MSB - HAL_REO1_RING_BASE_LSB)
+		(HAL_REO1_RING_MSI1_BASE_MSB(ab) - HAL_REO1_RING_BASE_LSB(ab))
 #define HAL_REO1_RING_MSI1_DATA_OFFSET \
-		(HAL_REO1_RING_MSI1_DATA - HAL_REO1_RING_BASE_LSB)
+		(HAL_REO1_RING_MSI1_DATA(ab) - HAL_REO1_RING_BASE_LSB(ab))
 #define HAL_REO1_RING_BASE_MSB_OFFSET \
-		(HAL_REO1_RING_BASE_MSB - HAL_REO1_RING_BASE_LSB)
-#define HAL_REO1_RING_ID_OFFSET(ab) (HAL_REO1_RING_ID - HAL_REO1_RING_BASE_LSB)
+		(HAL_REO1_RING_BASE_MSB(ab) - HAL_REO1_RING_BASE_LSB(ab))
+#define HAL_REO1_RING_ID_OFFSET(ab) (HAL_REO1_RING_ID(ab) - HAL_REO1_RING_BASE_LSB(ab))
 #define HAL_REO1_RING_PRODUCER_INT_SETUP_OFFSET \
-		(HAL_REO1_RING_PRODUCER_INT_SETUP - HAL_REO1_RING_BASE_LSB)
+		(HAL_REO1_RING_PRODUCER_INT_SETUP(ab) - HAL_REO1_RING_BASE_LSB(ab))
 #define HAL_REO1_RING_HP_ADDR_LSB_OFFSET \
-		(HAL_REO1_RING_HP_ADDR_LSB - HAL_REO1_RING_BASE_LSB)
+		(HAL_REO1_RING_HP_ADDR_LSB(ab) - HAL_REO1_RING_BASE_LSB(ab))
 #define HAL_REO1_RING_HP_ADDR_MSB_OFFSET \
-		(HAL_REO1_RING_HP_ADDR_MSB - HAL_REO1_RING_BASE_LSB)
+		(HAL_REO1_RING_HP_ADDR_MSB(ab) - HAL_REO1_RING_BASE_LSB(ab))
 #define HAL_REO1_RING_MISC_OFFSET \
-		(HAL_REO1_RING_MISC - HAL_REO1_RING_BASE_LSB)
+		(HAL_REO1_RING_MISC(ab) - HAL_REO1_RING_BASE_LSB(ab))
 
 /* REO2SW(x) R2 ring pointers (head/tail) address */
 #define HAL_REO1_RING_HP			0x00003048
@@ -179,20 +182,24 @@ struct ath12k_base;
 #define HAL_REO1_RING_TP_OFFSET			(HAL_REO1_RING_TP - HAL_REO1_RING_HP)
 
 /* REO2SW0 ring configuration address */
-#define HAL_REO_SW0_RING_BASE_LSB		0x000008a4
+#define HAL_REO_SW0_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_reo2_sw0_ring_base
 
 /* REO2SW0 R2 ring pointer (head/tail) address */
 #define HAL_REO_SW0_RING_HP			0x00003088
 
 /* REO CMD R0 address */
-#define HAL_REO_CMD_RING_BASE_LSB		0x0000028c
+#define HAL_REO_CMD_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_reo_cmd_ring_base
 
 /* REO CMD R2 address */
 #define HAL_REO_CMD_HP				0x00003020
 
 /* SW2REO R0 address */
-#define HAL_SW2REO_RING_BASE_LSB		0x00000304
-#define HAL_SW2REO1_RING_BASE_LSB		0x0000037c
+#define	HAL_SW2REO_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_sw2reo_ring_base
+#define HAL_SW2REO1_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_sw2reo1_ring_base
 
 /* SW2REO R2 address */
 #define HAL_SW2REO_RING_HP			0x00003028
@@ -209,36 +216,52 @@ struct ath12k_base;
 #define HAL_CE_DST_STATUS_RING_HP		0x00000408
 
 /* REO status address */
-#define HAL_REO_STATUS_RING_BASE_LSB		0x00000a84
+#define HAL_REO_STATUS_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_reo_status_ring_base
 #define HAL_REO_STATUS_HP			0x000030a8
 
 /* WBM Idle R0 address */
-#define HAL_WBM_IDLE_LINK_RING_BASE_LSB		0x00000d0c
-#define HAL_WBM_IDLE_LINK_RING_MISC_ADDR	0x00000d1c
-#define HAL_WBM_R0_IDLE_LIST_CONTROL_ADDR	0x00000210
-#define HAL_WBM_R0_IDLE_LIST_SIZE_ADDR		0x00000214
-#define HAL_WBM_SCATTERED_RING_BASE_LSB		0x00000220
-#define HAL_WBM_SCATTERED_RING_BASE_MSB		0x00000224
-#define HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX0 0x00000230
-#define HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX1 0x00000234
-#define HAL_WBM_SCATTERED_DESC_PTR_TAIL_INFO_IX0 0x00000240
-#define HAL_WBM_SCATTERED_DESC_PTR_TAIL_INFO_IX1 0x00000244
-#define HAL_WBM_SCATTERED_DESC_PTR_HP_ADDR	 0x0000024c
+#define HAL_WBM_IDLE_LINK_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_wbm_idle_link_ring_base
+#define HAL_WBM_IDLE_LINK_RING_MISC_ADDR(ab) \
+		(ab)->hw_params.regs->hal_wbm_idle_link_ring_misc
+#define HAL_WBM_R0_IDLE_LIST_CTRL_ADDR(ab) \
+		(ab)->hw_params.regs->hal_wbm_idle_list_ctrl_addr
+#define HAL_WBM_R0_IDLE_LIST_SIZE_ADDR(ab) \
+		(ab)->hw_params.regs->hal_wbm_idle_list_size_addr
+#define HAL_WBM_SCATTERED_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_wbm_scat_ring_base_lsb
+#define HAL_WBM_SCATTERED_RING_BASE_MSB(ab) \
+		(ab)->hw_params.regs->hal_wbm_scat_ring_base_msb
+#define HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX0(ab) \
+		(ab)->hw_params.regs->hal_wbm_scat_desc_ptr_head_ix0
+#define HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX1(ab) \
+		(ab)->hw_params.regs->hal_wbm_scat_desc_ptr_head_ix1
+#define HAL_WBM_SCATTERED_DESC_PTR_TAIL_INFO_IX0(ab) \
+		(ab)->hw_params.regs->hal_wbm_scat_desc_ptr_tail_ix0
+#define HAL_WBM_SCATTERED_DESC_PTR_TAIL_INFO_IX1(ab) \
+		(ab)->hw_params.regs->hal_wbm_scat_desc_ptr_tail_ix1
+#define HAL_WBM_SCATTERED_DESC_PTR_HP_ADDR(ab) \
+		(ab)->hw_params.regs->hal_wbm_scat_desc_ptr_hp_addr
 
 /* WBM Idle R2 address */
 #define HAL_WBM_IDLE_LINK_RING_HP		0x000030b8
 
 /* SW2WBM R0 release address */
-#define HAL_WBM_SW_RELEASE_RING_BASE_LSB	0x0000034c
-#define HAL_WBM_SW1_RELEASE_RING_BASE_LSB	0x000003c4
+#define HAL_WBM_SW_REL_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_wbm_sw_rel_ring_base
+#define HAL_WBM_SW1_RELEASE_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_wbm_sw1_rel_ring_base
 
 /* SW2WBM R2 release address */
 #define HAL_WBM_SW_RELEASE_RING_HP		0x00003010
 #define HAL_WBM_SW1_RELEASE_RING_HP		0x00003018
 
 /* WBM2SW R0 release address */
-#define HAL_WBM0_RELEASE_RING_BASE_LSB		0x00000dd8
-#define HAL_WBM1_RELEASE_RING_BASE_LSB		0x00000e50
+#define	HAL_WBM0_RELEASE_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_wbm0_rel_ring_base
+#define HAL_WBM1_RELEASE_RING_BASE_LSB(ab) \
+		(ab)->hw_params.regs->hal_wbm1_rel_ring_base
 
 /* WBM2SW R2 release address */
 #define HAL_WBM0_RELEASE_RING_HP		0x000030c8
diff --git a/drivers/net/wireless/ath/ath12k/hal_rx.c b/drivers/net/wireless/ath/ath12k/hal_rx.c
index eed5466..b21932a 100644
--- a/drivers/net/wireless/ath/ath12k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.c
@@ -856,7 +856,7 @@ void ath12k_hal_reo_hw_setup(struct ath12k_base *ab, u32 ring_hash_map)
 	       FIELD_PREP(HAL_REO1_GEN_ENABLE_AGING_FLUSH_ENABLE, 1);
 	ath12k_hif_write32(ab, reo_base + HAL_REO1_GEN_ENABLE, val);
 
-	val = ath12k_hif_read32(ab, reo_base + HAL_REO1_MISC_CTRL_ADDR);
+	val = ath12k_hif_read32(ab, reo_base + HAL_REO1_MISC_CTRL_ADDR(ab));
 
 	val &= ~(HAL_REO1_MISC_CTL_FRAG_DST_RING |
 		 HAL_REO1_MISC_CTL_BAR_DST_RING);
@@ -864,15 +864,15 @@ void ath12k_hal_reo_hw_setup(struct ath12k_base *ab, u32 ring_hash_map)
 			  HAL_SRNG_RING_ID_REO2SW0);
 	val |= FIELD_PREP(HAL_REO1_MISC_CTL_BAR_DST_RING,
 			  HAL_SRNG_RING_ID_REO2SW0);
-	ath12k_hif_write32(ab, reo_base + HAL_REO1_MISC_CTRL_ADDR, val);
+	ath12k_hif_write32(ab, reo_base + HAL_REO1_MISC_CTRL_ADDR(ab), val);
 
-	ath12k_hif_write32(ab, reo_base + HAL_REO1_AGING_THRESH_IX_0,
+	ath12k_hif_write32(ab, reo_base + HAL_REO1_AGING_THRESH_IX_0(ab),
 			   HAL_DEFAULT_BE_BK_VI_REO_TIMEOUT_USEC);
-	ath12k_hif_write32(ab, reo_base + HAL_REO1_AGING_THRESH_IX_1,
+	ath12k_hif_write32(ab, reo_base + HAL_REO1_AGING_THRESH_IX_1(ab),
 			   HAL_DEFAULT_BE_BK_VI_REO_TIMEOUT_USEC);
-	ath12k_hif_write32(ab, reo_base + HAL_REO1_AGING_THRESH_IX_2,
+	ath12k_hif_write32(ab, reo_base + HAL_REO1_AGING_THRESH_IX_2(ab),
 			   HAL_DEFAULT_BE_BK_VI_REO_TIMEOUT_USEC);
-	ath12k_hif_write32(ab, reo_base + HAL_REO1_AGING_THRESH_IX_3,
+	ath12k_hif_write32(ab, reo_base + HAL_REO1_AGING_THRESH_IX_3(ab),
 			   HAL_DEFAULT_VO_REO_TIMEOUT_USEC);
 
 	ath12k_hal_reo_ring_ctrl_hash_ix2_setup(ab, ring_hash_map);
diff --git a/drivers/net/wireless/ath/ath12k/hw.c b/drivers/net/wireless/ath/ath12k/hw.c
index 2ee8e26..45f5aef 100644
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -371,4 +371,147 @@ const struct ath12k_hw_regs qcn92xx_regs = {
 	/* PCIe base address */
 	.pcie_qserdes_sysclk_en_sel = 0x01e0c0a8,
 	.pcie_pcs_osc_dtct_config_base = 0x01e0d45c,
+
+	/* REO dest ring address */
+	.hal_reo2_ring_base = 0x0000055c,
+	.hal_reo1_misc_ctrl_addr = 0x00000b7c,
+	.hal_reo1_sw_cookie_cfg0 = 0x00000050,
+	.hal_reo1_sw_cookie_cfg1 = 0x00000054,
+	.hal_reo1_qdesc_lut_base0 = 0x00000058,
+	.hal_reo1_qdesc_lut_base1 = 0x0000005c,
+	.hal_reo1_qdesc_addr_read = 0x00000060,
+	.hal_reo1_qdesc_max_peerid = 0x0000006c,
+	.hal_reo1_ring_base_lsb = 0x000004e4,
+	.hal_reo1_ring_base_msb = 0x000004e8,
+	.hal_reo1_ring_id = 0x000004ec,
+	.hal_reo1_ring_misc = 0x000004f4,
+	.hal_reo1_ring_hp_addr_lsb = 0x000004f8,
+	.hal_reo1_ring_hp_addr_msb = 0x000004fc,
+	.hal_reo1_ring_producer_int_setup = 0x00000508,
+	.hal_reo1_ring_msi1_base_lsb = 	0x0000052C,
+	.hal_reo1_ring_msi1_base_msb = 0x00000530,
+	.hal_reo1_ring_msi1_data = 0x00000534,
+	.hal_reo1_aging_thres_ix0 = 0x00000b08,
+	.hal_reo1_aging_thres_ix1 = 0x00000b0c,
+	.hal_reo1_aging_thres_ix2 = 0x00000b10,
+	.hal_reo1_aging_thres_ix3 = 0x00000b14,
+
+	/* REO exception ring address */
+	.hal_reo2_sw0_ring_base = 0x000008a4,
+
+	/* REO reinject ring address */
+	.hal_sw2reo_ring_base = 0x00000304,
+	.hal_sw2reo1_ring_base = 0x0000037c,
+
+	/* REO cmd ring address */
+	.hal_reo_cmd_ring_base = 0x0000028c,
+
+	/* REO status ring address */
+	.hal_reo_status_ring_base = 0x00000a84,
+
+	/* WBM idle link ring address */
+	.hal_wbm_idle_link_ring_base = 0x00000d0c,
+	.hal_wbm_idle_link_ring_misc = 0x00000d1c,
+	.hal_wbm_idle_list_ctrl_addr = 0x00000210,
+	.hal_wbm_idle_list_size_addr = 0x00000214,
+	.hal_wbm_scat_ring_base_lsb = 0x00000220,
+	.hal_wbm_scat_ring_base_msb = 0x00000224,
+	.hal_wbm_scat_desc_ptr_head_ix0 = 0x00000230,
+	.hal_wbm_scat_desc_ptr_head_ix1	= 0x00000234,
+	.hal_wbm_scat_desc_ptr_tail_ix0 = 0x00000240,
+	.hal_wbm_scat_desc_ptr_tail_ix1 = 0x00000244,
+	.hal_wbm_scat_desc_ptr_hp_addr = 0x0000024c,
+
+	/* SW2WBM release ring address */
+	.hal_wbm_sw_rel_ring_base = 0x0000034c,
+	.hal_wbm_sw1_rel_ring_base = 0x000003c4,
+
+	/* WBM2SW release ring address */
+	.hal_wbm0_rel_ring_base = 0x00000dd8,
+	.hal_wbm1_rel_ring_base = 0x00000e50,
+
+	/* PPE release ring address */
+	.hal_ppe_rel_ring_base = 0x0000043c,
+};
+
+const struct ath12k_hw_regs qcn92xx_v2_regs = {
+	/* SW2TCL(x) R0 ring configuration address */
+	.hal_tcl1_ring_id = 0x00000908,
+	.hal_tcl1_ring_misc = 0x00000910,
+	.hal_tcl1_ring_tp_addr_lsb = 0x0000091c,
+	.hal_tcl1_ring_tp_addr_msb = 0x00000920,
+	.hal_tcl1_ring_consumer_int_setup_ix0 = 0x00000930,
+	.hal_tcl1_ring_consumer_int_setup_ix1 = 0x00000934,
+	.hal_tcl1_ring_msi1_base_lsb = 0x00000948,
+	.hal_tcl1_ring_msi1_base_msb = 0x0000094c,
+	.hal_tcl1_ring_msi1_data = 0x00000950,
+	.hal_tcl_ring_base_lsb = 0x00000b58,
+
+	/* TCL STATUS ring address */
+	.hal_tcl_status_ring_base_lsb = 0x00000d38,
+
+	/* PCIe base address */
+	.pcie_qserdes_sysclk_en_sel = 0x01e0c0a8,
+	.pcie_pcs_osc_dtct_config_base = 0x01e0d45c,
+
+	/* REO DEST ring address */
+	.hal_reo2_ring_base = 0x00000578,
+	.hal_reo1_misc_ctrl_addr = 0x00000b9c,
+	.hal_reo1_sw_cookie_cfg0 = 0x0000006c,
+	.hal_reo1_sw_cookie_cfg1 = 0x00000070,
+	.hal_reo1_qdesc_lut_base0 = 0x00000074,
+	.hal_reo1_qdesc_lut_base1 = 0x00000078,
+	.hal_reo1_qdesc_addr_read = 0x0000007c,
+	.hal_reo1_qdesc_max_peerid = 0x00000088,
+	.hal_reo1_ring_base_lsb = 0x00000500,
+	.hal_reo1_ring_base_msb = 0x00000504,
+	.hal_reo1_ring_id = 0x00000508,
+	.hal_reo1_ring_misc = 0x00000510,
+	.hal_reo1_ring_hp_addr_lsb = 0x00000514,
+	.hal_reo1_ring_hp_addr_msb = 0x00000518,
+	.hal_reo1_ring_producer_int_setup = 0x00000524,
+	.hal_reo1_ring_msi1_base_lsb = 0x00000548,
+	.hal_reo1_ring_msi1_base_msb = 0x0000054C,
+	.hal_reo1_ring_msi1_data = 0x00000550,
+	.hal_reo1_aging_thres_ix0 = 0x00000B28,
+	.hal_reo1_aging_thres_ix1 = 0x00000B2C,
+	.hal_reo1_aging_thres_ix2 = 0x00000B30,
+	.hal_reo1_aging_thres_ix3 = 0x00000B34,
+
+	/* REO Exception ring address */
+	.hal_reo2_sw0_ring_base = 0x000008c0,
+
+	/* REO Reinject ring address */
+	.hal_sw2reo_ring_base = 0x00000320,
+	.hal_sw2reo1_ring_base = 0x00000398,
+
+	/* REO cmd ring address */
+	.hal_reo_cmd_ring_base = 0x000002A8,
+
+	/* REO status ring address */
+	.hal_reo_status_ring_base = 0x00000aa0,
+
+	/* WBM idle link ring address */
+	.hal_wbm_idle_link_ring_base = 0x00000d3c,
+	.hal_wbm_idle_link_ring_misc = 0x00000d4c,
+	.hal_wbm_idle_list_ctrl_addr = 0x00000240,
+	.hal_wbm_idle_list_size_addr = 0x00000244,
+	.hal_wbm_scat_ring_base_lsb = 0x00000250,
+	.hal_wbm_scat_ring_base_msb = 0x00000254,
+	.hal_wbm_scat_desc_ptr_head_ix0 = 0x00000260,
+	.hal_wbm_scat_desc_ptr_head_ix1	= 0x00000264,
+	.hal_wbm_scat_desc_ptr_tail_ix0 = 0x00000270,
+	.hal_wbm_scat_desc_ptr_tail_ix1 = 0x00000274,
+	.hal_wbm_scat_desc_ptr_hp_addr = 0x0000027c,
+
+	/* SW2WBM release ring address */
+	.hal_wbm_sw_rel_ring_base = 0x0000037c,
+	.hal_wbm_sw1_rel_ring_base = 0x000003f4,
+
+	/* WBM2SW release ring address */
+	.hal_wbm0_rel_ring_base = 0x00000e08,
+	.hal_wbm1_rel_ring_base = 0x00000e80,
+
+	/* PPE release ring address */
+	.hal_ppe_rel_ring_base = 0x0000046c,
 };
diff --git a/drivers/net/wireless/ath/ath12k/hw.h b/drivers/net/wireless/ath/ath12k/hw.h
index 699538f..49eb7fc 100644
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -239,12 +239,54 @@ struct ath12k_hw_regs {
 	u32 hal_tcl1_ring_msi1_base_msb;
 	u32 hal_tcl1_ring_msi1_data;
 	u32 hal_tcl_ring_base_lsb;
-
 	u32 hal_tcl_status_ring_base_lsb;
-
 	u32 pcie_qserdes_sysclk_en_sel;
 	u32 pcie_pcs_osc_dtct_config_base;
+	u32 hal_reo2_ring_base;
+	u32 hal_reo1_misc_ctrl_addr;
+	u32 hal_reo1_sw_cookie_cfg0;
+	u32 hal_reo1_sw_cookie_cfg1;
+	u32 hal_reo1_qdesc_lut_base0;
+	u32 hal_reo1_qdesc_lut_base1;
+	u32 hal_reo1_qdesc_addr_read;
+	u32 hal_reo1_qdesc_max_peerid;
+	u32 hal_reo1_ring_base_lsb;
+	u32 hal_reo1_ring_base_msb;
+	u32 hal_reo1_ring_id;
+	u32 hal_reo1_ring_misc;
+	u32 hal_reo1_ring_hp_addr_lsb;
+	u32 hal_reo1_ring_hp_addr_msb;
+	u32 hal_reo1_ring_producer_int_setup;
+	u32 hal_reo1_ring_msi1_base_lsb;
+	u32 hal_reo1_ring_msi1_base_msb;
+	u32 hal_reo1_ring_msi1_data;
+	u32 hal_reo1_aging_thres_ix0;
+	u32 hal_reo1_aging_thres_ix1;
+	u32 hal_reo1_aging_thres_ix2;
+	u32 hal_reo1_aging_thres_ix3;
+	u32 hal_reo2_sw0_ring_base;
+	u32 hal_sw2reo_ring_base;
+	u32 hal_sw2reo1_ring_base;
+	u32 hal_reo_cmd_ring_base;
+	u32 hal_reo_status_ring_base;
+	u32 hal_wbm_idle_link_ring_base;
+	u32 hal_wbm_idle_link_ring_misc;
+	u32 hal_wbm_idle_list_ctrl_addr;
+	u32 hal_wbm_idle_list_size_addr;
+	u32 hal_wbm_scat_ring_base_lsb;
+	u32 hal_wbm_scat_ring_base_msb;
+	u32 hal_wbm_scat_desc_ptr_head_ix0;
+	u32 hal_wbm_scat_desc_ptr_head_ix1;
+	u32 hal_wbm_scat_desc_ptr_tail_ix0;
+	u32 hal_wbm_scat_desc_ptr_tail_ix1;
+	u32 hal_wbm_scat_desc_ptr_hp_addr;
+	u32 hal_wbm_sw_rel_ring_base;
+	u32 hal_wbm_sw1_rel_ring_base;
+	u32 hal_wbm0_rel_ring_base;
+	u32 hal_wbm1_rel_ring_base;
+	u32 hal_ppe_rel_ring_base;
 };
 
 extern const struct ath12k_hw_regs qcn92xx_regs;
+extern const struct ath12k_hw_regs qcn92xx_v2_regs;
 #endif
diff --git a/drivers/net/wireless/ath/ath12k/mhi.c b/drivers/net/wireless/ath/ath12k/mhi.c
index f1ff9c2..881a027 100644
--- a/drivers/net/wireless/ath/ath12k/mhi.c
+++ b/drivers/net/wireless/ath/ath12k/mhi.c
@@ -328,7 +328,8 @@ int ath12k_mhi_register(struct ath12k_pci *ab_pci)
 	mhi_ctrl->read_reg = ath12k_mhi_op_read_reg;
 	mhi_ctrl->write_reg = ath12k_mhi_op_write_reg;
 
-	if (ab->hw_rev == ATH12K_HW_QCN92XX_HW10)
+	if ((ab->hw_rev == ATH12K_HW_QCN92XX_HW10) ||
+	    (ab->hw_rev == ATH12K_HW_QCN92XX_HW20))
 		ath12k_mhi_config = &ath12k_mhi_config_qcn92xx;
 
 	ret = mhi_register_controller(mhi_ctrl, ath12k_mhi_config);
diff --git a/drivers/net/wireless/ath/ath12k/pci.c b/drivers/net/wireless/ath/ath12k/pci.c
index 257812c..4104bd8 100644
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -27,9 +27,9 @@
 #define WINDOW_RANGE_MASK		GENMASK(18, 0)
 #define WINDOW_STATIC_MASK		GENMASK(31, 6)
 
-#define TCSR_SOC_HW_VERSION		0x0224
-#define TCSR_SOC_HW_VERSION_MAJOR_MASK	GENMASK(16, 8)
-#define TCSR_SOC_HW_VERSION_MINOR_MASK	GENMASK(7, 0)
+#define TCSR_SOC_HW_VERSION		0x1B00000
+#define TCSR_SOC_HW_VERSION_MAJOR_MASK	GENMASK(11, 8)
+#define TCSR_SOC_HW_VERSION_MINOR_MASK	GENMASK(7, 4)
 
 /* BAR0 + 4k is always accessible, and no
  * need to force wakeup.
@@ -887,6 +887,22 @@ static void ath12k_pci_aspm_disable(struct ath12k_pci *ab_pci)
 	set_bit(ATH12K_PCI_ASPM_RESTORE, &ab_pci->flags);
 }
 
+static
+void ath12k_pci_read_hw_version(struct ath12k_base *ab, u32 *major, u32 *minor)
+{
+	u32 soc_hw_version;
+
+	soc_hw_version = ath12k_pci_read32(ab, TCSR_SOC_HW_VERSION);
+	*major = FIELD_GET(TCSR_SOC_HW_VERSION_MAJOR_MASK,
+			   soc_hw_version);
+	*minor = FIELD_GET(TCSR_SOC_HW_VERSION_MINOR_MASK,
+			   soc_hw_version);
+
+	ath12k_dbg(ab, ATH12K_DBG_PCI,
+		   "pci tcsr_soc_hw_version major %d minor %d\n",
+		   *major, *minor);
+}
+
 static void ath12k_pci_update_qrtr_node_id(struct ath12k_base *ab)
 {
 	struct ath12k_pci *ab_pci = ath12k_pci_priv(ab);
@@ -1306,7 +1322,7 @@ static int ath12k_pci_probe(struct pci_dev *pdev,
 {
 	struct ath12k_base *ab;
 	struct ath12k_pci *ab_pci;
-	u32 addr;
+	u32 soc_hw_version_major, soc_hw_version_minor, addr;
 	int ret;
 
 	dev_warn(&pdev->dev, "WARNING: ath12k PCI support is experimental 2!\n");
@@ -1349,7 +1365,12 @@ static int ath12k_pci_probe(struct pci_dev *pdev,
 	case QCN92XX_DEVICE_ID:
 		ab_pci->msi_config = &ath12k_msi_config[0];
 		ab->bus_params.static_window_map = true;
-		ab->hw_rev = ATH12K_HW_QCN92XX_HW10;
+		ath12k_pci_read_hw_version(ab, &soc_hw_version_major,
+					   &soc_hw_version_minor);
+		if (soc_hw_version_major == 0x2)
+			ab->hw_rev = ATH12K_HW_QCN92XX_HW20;
+		else
+			ab->hw_rev = ATH12K_HW_QCN92XX_HW10;
 		break;
 	default:
 		dev_err(&pdev->dev, "Unknown PCI device found: 0x%x\n",
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 5fb1b57..2a2f9dd 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -9391,6 +9391,7 @@ int ath12k_wmi_attach(struct ath12k_base *ab)
 
 	switch (ab->hw_rev) {
 	case ATH12K_HW_QCN92XX_HW10:
+	case ATH12K_HW_QCN92XX_HW20:
 		ab->wmi_ab.ops = &wmi_qcn92xx_ops;
 		break;
 	default:
-- 
2.7.4

