From 4205e267191163a9d7fa443bff35543d0c1879c1 Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Thu, 3 Feb 2022 18:52:39 +0530
Subject: [PATCH] ath12k: Fix Access Violation with ath12k_pci rmmod

Below warning messages are seen during rmmod ath12k_pci,
WARN: Access Violation!!!, Run
"cat /sys/kernel/debug/qti_debug_logs/tz_log" for more
details
When doing "rmmod ath12k_pci", ath12k performs global SOC reset
and MHI reset, where 0 address access is captured by IOMMU.
Such an invalid access occurs because, during rmmod or SSR, MSI
address is cleared but HW MSI functionality not disabled, thus HW
target is able to raise an MSI transaction with 0 as MSI address.
So it can be fixed by simply disabling MSI before reset. For SSR,
since MSI functionality is still needed after target is brought
back, we need to reenable it.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/pci.c | 52 ++++++++++++++++++++++++++++-------
 1 file changed, 42 insertions(+), 10 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -357,6 +357,8 @@ static void ath12k_pci_force_wake(struct
 
 static void ath12k_pci_sw_reset(struct ath12k_base *ab, bool power_on)
 {
+	mdelay(100);
+
 	if (power_on) {
 		ath12k_pci_enable_ltssm(ab);
 		ath12k_pci_clear_all_intrs(ab);
@@ -366,9 +368,9 @@ static void ath12k_pci_sw_reset(struct a
 	}
 
 	ath12k_mhi_clear_vector(ab);
+	ath12k_pci_clear_dbg_registers(ab);
 	ath12k_pci_soc_global_reset(ab);
 	ath12k_mhi_set_mhictrl_reset(ab);
-	ath12k_pci_clear_dbg_registers(ab);
 }
 
 static void ath12k_pci_free_ext_irq(struct ath12k_base *ab)
@@ -685,7 +687,32 @@ static void ath12k_pci_ce_irqs_enable(st
 	}
 }
 
-static int ath12k_pci_enable_msi(struct ath12k_pci *ab_pci)
+static void ath12k_pci_msi_config(struct ath12k_pci *ab_pci, bool enable)
+{
+	struct pci_dev *dev = ab_pci->pdev;
+	u16 control;
+
+	pci_read_config_word(dev, dev->msi_cap + PCI_MSI_FLAGS, &control);
+
+	if (enable)
+		control |= PCI_MSI_FLAGS_ENABLE;
+	else
+		control &= ~PCI_MSI_FLAGS_ENABLE;
+
+	pci_write_config_word(dev, dev->msi_cap + PCI_MSI_FLAGS, control);
+}
+
+static void ath12k_pci_msi_enable(struct ath12k_pci *ab_pci)
+{
+	ath12k_pci_msi_config(ab_pci, true);
+}
+
+static void ath12k_pci_msi_disable(struct ath12k_pci *ab_pci)
+{
+	ath12k_pci_msi_config(ab_pci, false);
+}
+
+static int ath12k_pci_alloc_msi(struct ath12k_pci *ab_pci)
 {
 	struct ath12k_base *ab = ab_pci->ab;
 	const struct ath12k_msi_config *msi_config = ab_pci->msi_config;
@@ -707,6 +734,8 @@ static int ath12k_pci_enable_msi(struct
 			return num_vectors;
 	}
 
+	ath12k_pci_msi_disable(ab_pci);
+
 	msi_desc = irq_get_msi_desc(ab_pci->pdev->irq);
 	if (!msi_desc) {
 		ath12k_err(ab, "msi_desc is NULL!\n");
@@ -728,7 +757,7 @@ free_msi_vector:
 	return ret;
 }
 
-static void ath12k_pci_disable_msi(struct ath12k_pci *ab_pci)
+static void ath12k_pci_free_msi(struct ath12k_pci *ab_pci)
 {
 	pci_free_irq_vectors(ab_pci->pdev);
 }
@@ -1174,6 +1203,8 @@ int ath12k_pci_power_up(struct ath12k_ba
 	 */
 	ath12k_pci_aspm_disable(ab_pci);
 
+	ath12k_pci_msi_enable(ab_pci);
+
 	ath12k_pci_update_qrtr_node_id(ab);
 
 	ret = ath12k_mhi_start(ab_pci);
@@ -1196,6 +1227,7 @@ void ath12k_pci_power_down(struct ath12k
 	ath12k_pci_aspm_restore(ab_pci);
 
 	ath12k_pci_force_wake(ab_pci->ab);
+	ath12k_pci_msi_disable(ab_pci);
 	ath12k_mhi_stop(ab_pci);
 	clear_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags);
 	ath12k_pci_sw_reset(ab_pci->ab, false);
@@ -1273,20 +1305,20 @@ static int ath12k_pci_probe(struct pci_d
 		goto err_pci_free_region;
 	}
 
-	ret = ath12k_pci_enable_msi(ab_pci);
+	ret = ath12k_pci_alloc_msi(ab_pci);
 	if (ret) {
-		ath12k_err(ab, "failed to enable msi: %d\n", ret);
+		ath12k_err(ab, "failed to alloc msi: %d\n", ret);
 		goto err_pci_free_region;
 	}
 
 	ret = ath12k_core_pre_init(ab);
 	if (ret)
-		goto err_pci_disable_msi;
+		goto err_pci_free_msi;
 
 	ret = ath12k_mhi_register(ab_pci);
 	if (ret) {
 		ath12k_err(ab, "failed to register mhi: %d\n", ret);
-		goto err_pci_disable_msi;
+		goto err_pci_free_msi;
 	}
 
 	ret = ath12k_hal_srng_init(ab);
@@ -1326,8 +1358,8 @@ err_hal_srng_deinit:
 err_mhi_unregister:
 	ath12k_mhi_unregister(ab_pci);
 
-err_pci_disable_msi:
-	ath12k_pci_disable_msi(ab_pci);
+err_pci_free_msi:
+	ath12k_pci_free_msi(ab_pci);
 
 err_pci_free_region:
 	ath12k_pci_free_region(ab_pci);
@@ -1359,7 +1391,7 @@ qmi_fail:
 	ath12k_mhi_unregister(ab_pci);
 
 	ath12k_pci_free_irq(ab);
-	ath12k_pci_disable_msi(ab_pci);
+	ath12k_pci_free_msi(ab_pci);
 	ath12k_pci_free_region(ab_pci);
 
 	ath12k_hal_srng_deinit(ab);
