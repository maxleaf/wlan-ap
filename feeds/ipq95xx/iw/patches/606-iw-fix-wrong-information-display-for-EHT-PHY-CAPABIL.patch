From 13cead1431549600e6f25013894217ad659513f5 Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Mon, 29 Aug 2022 10:12:16 +0530
Subject: [PATCH] iw: fix wrong information display for EHT PHY CAPABILITY in iw phy# info

Currently, EHT PHY capability information that is received from kernel
is stored from 9th bit of phy_cap and first 8 bit is zero,
when we are printing information, then first 8 bit of phy_cap
is checking with 8 bit of actual information.

Hence EHT PHY capability display wrong information in iw phy# info

Fix it by storing kernel information from index zero of phy_cap.

Fixes: a6de65ec ("iw: Add EHT Capability Information")

Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 util.c | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

--- a/util.c
+++ b/util.c
@@ -1226,7 +1226,6 @@ static void __print_eht_capa(const __u16
 	#define PRINT_EHT_MAC_CAP(...) PRINT_EHT_CAP(mac_cap, __VA_ARGS__)
 	#define PRINT_EHT_MAC_CAP_MASK(...) PRINT_EHT_CAP_MASK(mac_cap, __VA_ARGS__)
 	#define PRINT_EHT_PHY_CAP(...) PRINT_EHT_CAP(phy_cap, __VA_ARGS__)
-	#define PRINT_EHT_PHY_CAP0(_idx, _bit, ...) PRINT_EHT_CAP(phy_cap, _idx, _bit + 8, __VA_ARGS__)
 	#define PRINT_EHT_PHY_CAP_MASK(...) PRINT_EHT_CAP_MASK(phy_cap, __VA_ARGS__)
 
 	printf("%s\t\tEHT MAC Capabilities (0x", pre);
@@ -1243,16 +1242,16 @@ static void __print_eht_capa(const __u16
 	PRINT_EHT_MAC_CAP_MASK(0, 6, 0x7, "Maximum MPDU Length");
 
 	printf("%s\t\tEHT PHY Capabilities: (0x", pre);
-	for (i = 0; i < 8; i++)
-		printf("%02x", ((__u8 *)phy_cap)[i + 1]);
+	for (i = 0; i < 9; i++)
+		printf("%02x", ((__u8 *)phy_cap)[i]);
 	printf("):\n");
 
-	PRINT_EHT_PHY_CAP0(0, 1, "320 MHz in 6 GHz Support");
-	PRINT_EHT_PHY_CAP0(0, 2, "242-tone RU in BW Wider Than 20 MHz Support");
-	PRINT_EHT_PHY_CAP0(0, 3, "NDP With 4x EHT-LTF and 3.2us GI");
-	PRINT_EHT_PHY_CAP0(0, 4, "Partial Bandwidth UL MU-MIMO");
-	PRINT_EHT_PHY_CAP0(0, 5, "SU Beamformer");
-	PRINT_EHT_PHY_CAP0(0, 6, "SU Beamformee");
+	PRINT_EHT_PHY_CAP(0, 1, "320 MHz in 6 GHz Support");
+	PRINT_EHT_PHY_CAP(0, 2, "242-tone RU in BW Wider Than 20 MHz Support");
+	PRINT_EHT_PHY_CAP(0, 3, "NDP With 4x EHT-LTF and 3.2us GI");
+	PRINT_EHT_PHY_CAP(0, 4, "Partial Bandwidth UL MU-MIMO");
+	PRINT_EHT_PHY_CAP(0, 5, "SU Beamformer");
+	PRINT_EHT_PHY_CAP(0, 6, "SU Beamformee");
 	PRINT_EHT_PHY_CAP_MASK(0, 7, 0x7, "Beamformee STS <= 80Mhz");
 	PRINT_EHT_PHY_CAP_MASK(0, 10, 0x7, "Beamformee STS = 160Mhz");
 	PRINT_EHT_PHY_CAP_MASK(0, 13, 0x7, "Beamformee STS = 320Mhz");
@@ -1427,7 +1426,7 @@ void print_eht_info(struct nlattr *nl_if
 {
 	struct nlattr *tb[NL80211_BAND_IFTYPE_ATTR_MAX + 1];
 	__u16 mac_cap[1] = { 0 };
-	__u16 phy_cap[4] = { 0 };
+	__u16 phy_cap[5] = { 0 };
 	__u8 mcs_set[9] = { 0 };
 	__u8 ppet[62] = { 0 };
 	size_t len;
@@ -1450,7 +1449,7 @@ void print_eht_info(struct nlattr *nl_if
 
 		if (len > sizeof(phy_cap) - 1)
 			len = sizeof(phy_cap) - 1;
-		memcpy(&((__u8 *)phy_cap)[1],
+		memcpy(&((__u8 *)phy_cap)[0],
 		       nla_data(tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_PHY]),
 		       len);
 	}
