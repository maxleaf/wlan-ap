From 9acc984a8790de84105011c2cf98bf5b5a0164f7 Mon Sep 17 00:00:00 2001
From: Muna Sinada <quic_msinada@quicinc.com>
Date: Wed, 26 Jan 2022 14:23:01 -0800
Subject: [PATCH] iw: Add EHT Capability Information

Add EHT capability information that is printed out in "iw phy"
commands.

Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
---
 info.c |   4 +-
 iw.h   |   3 +
 scan.c |   8 +++
 util.c | 206 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 220 insertions(+), 1 deletion(-)

--- a/info.c
+++ b/info.c
@@ -174,8 +174,10 @@ static int print_phy_handler(struct nl_m
 				struct nlattr *nl_iftype;
 				int rem_band;
 
-				nla_for_each_nested(nl_iftype, tb_band[NL80211_BAND_ATTR_IFTYPE_DATA], rem_band)
+				nla_for_each_nested(nl_iftype, tb_band[NL80211_BAND_ATTR_IFTYPE_DATA], rem_band) {
 					print_he_info(nl_iftype);
+					print_eht_info(nl_iftype);
+				}
 			}
 			if (tb_band[NL80211_BAND_ATTR_FREQS]) {
 				if (!band_had_freq) {
--- a/iw.h
+++ b/iw.h
@@ -233,6 +233,9 @@ void print_ht_capability(__u16 cap);
 void print_vht_info(__u32 capa, const __u8 *mcs);
 void print_he_capability(const uint8_t *ie, int len);
 void print_he_info(struct nlattr *nl_iftype);
+void print_eht_capability(const uint8_t *ie, int len);
+void print_eht_info(struct nlattr *nl_iftype);
+
 
 char *channel_width_name(enum nl80211_chan_width width);
 const char *iftype_name(enum nl80211_iftype iftype);
--- a/scan.c
+++ b/scan.c
@@ -2322,8 +2322,16 @@ static void print_he_capa(const uint8_t
 	print_he_capability(data, len);
 }
 
+static void print_eht_capa(const uint8_t type, uint8_t len, const uint8_t *data,
+			   const struct print_ies_data *ie_buffer)
+{
+	printf("\n");
+	print_eht_capability(data, len);
+}
+
 static const struct ie_print ext_printers[] = {
 	[35] = { "HE capabilities", print_he_capa, 21, 54, BIT(PRINT_SCAN), },
+	[108] = { "EHT capabilities", print_eht_capa, 13, 62, BIT(PRINT_SCAN), },
 };
 
 static void print_extension(unsigned char len, unsigned char *ie,
--- a/util.c
+++ b/util.c
@@ -1187,6 +1187,121 @@ static void __print_he_capa(const __u16
 	}
 }
 
+static void __print_eht_capa(const __u16 *mac_cap,
+			    const __u16 *phy_cap,
+			    const __u8 *mcs_set, size_t mcs_len,
+			    const __u8 *ppet, int ppet_len,
+			    bool indent)
+{
+	int i;
+	const char *pre = indent ? "\t" : "";
+
+	#define PRINT_EHT_CAP(_var, _idx, _bit, _str) \
+	do { \
+		if (_var[_idx] & BIT(_bit)) \
+			printf("%s\t\t\t" _str "\n", pre); \
+	} while (0)
+
+	#define PRINT_EHT_CAP_MASK(_var, _idx, _shift, _mask, _str) \
+	do { \
+		if ((_var[_idx] >> _shift) & _mask) \
+			printf("%s\t\t\t" _str ": %d\n", pre, (_var[_idx] >> _shift) & _mask); \
+	} while (0)
+
+	#define PRINT_EHT_MAC_CAP(...) PRINT_EHT_CAP(mac_cap, __VA_ARGS__)
+	#define PRINT_EHT_MAC_CAP_MASK(...) PRINT_EHT_CAP_MASK(mac_cap, __VA_ARGS__)
+	#define PRINT_EHT_PHY_CAP(...) PRINT_EHT_CAP(phy_cap, __VA_ARGS__)
+	#define PRINT_EHT_PHY_CAP0(_idx, _bit, ...) PRINT_EHT_CAP(phy_cap, _idx, _bit + 8, __VA_ARGS__)
+	#define PRINT_EHT_PHY_CAP_MASK(...) PRINT_EHT_CAP_MASK(phy_cap, __VA_ARGS__)
+
+	printf("%s\t\tEHT MAC Capabilities (0x", pre);
+	for (i = 0; i < 2; i++)
+		printf("%04x", mac_cap[i]);
+	printf("):\n");
+
+	PRINT_EHT_MAC_CAP(0, 0, "NSEP Priority Access Support");
+	PRINT_EHT_MAC_CAP(0, 1, "EHT OM Control Support");
+	PRINT_EHT_MAC_CAP(0, 2, "Triggered TXOP Sharing Mode 1 Support");
+	PRINT_EHT_MAC_CAP(0, 3, "Triggered TXOP Sharing Mode 2 Support");
+	PRINT_EHT_MAC_CAP(0, 4, "Restrived TWT Support");
+	PRINT_EHT_MAC_CAP(0, 5, "SCS Traffic Description Support");
+	PRINT_EHT_MAC_CAP_MASK(0, 6, 0x7, "Maximum MPDU Length");
+
+	printf("%s\t\tEHT PHY Capabilities: (0x", pre);
+	for (i = 0; i < 8; i++)
+		printf("%02x", ((__u8 *)phy_cap)[i + 1]);
+	printf("):\n");
+
+	PRINT_EHT_PHY_CAP0(0, 1, "320 MHz in 6 GHz Support");
+	PRINT_EHT_PHY_CAP0(0, 2, "242-tone RU in BW Wider Than 20 MHz Support");
+	PRINT_EHT_PHY_CAP0(0, 3, "NDP With 4x EHT-LTF and 3.2us GI");
+	PRINT_EHT_PHY_CAP0(0, 4, "Partial Bandwidth UL MU-MIMO");
+	PRINT_EHT_PHY_CAP0(0, 5, "SU Beamformer");
+	PRINT_EHT_PHY_CAP0(0, 6, "SU Beamformee");
+	PRINT_EHT_PHY_CAP_MASK(0, 7, 0x7, "Beamformee STS <= 80Mhz");
+	PRINT_EHT_PHY_CAP_MASK(0, 10, 0x7, "Beamformee STS = 160Mhz");
+	PRINT_EHT_PHY_CAP_MASK(0, 13, 0x7, "Beamformee STS = 320Mhz");
+	PRINT_EHT_PHY_CAP_MASK(1, 0, 0x7, "Sounding Dimensions <= 80Mhz");
+	PRINT_EHT_PHY_CAP_MASK(1, 3, 0x7, "Sounding Dimensions = 160Mhz");
+	PRINT_EHT_PHY_CAP_MASK(1, 6, 0x7, "Sounding Dimensions = 320Mhz");
+	PRINT_EHT_PHY_CAP(1, 9, "Ng = 16 SU Feedback");
+	PRINT_EHT_PHY_CAP(1, 10, "Ng = 16 MU Feedback");
+	PRINT_EHT_PHY_CAP(1, 11, "Codebook Size SU Feedback");
+	PRINT_EHT_PHY_CAP(1, 12, "Codebook Size MU Feedback");
+	PRINT_EHT_PHY_CAP(1, 13, "Triggered SU Beamforming Feedback");
+	PRINT_EHT_PHY_CAP(1, 14, "Triggered MU Beamforming Partial BW Feedback");
+	PRINT_EHT_PHY_CAP(1, 15, "Triggered CQI Feedback");
+	PRINT_EHT_PHY_CAP(2, 0, "Partial Bandwidth DL MU-MIMO");
+	PRINT_EHT_PHY_CAP(2, 1, "EHT PSR-based SR Support");
+	PRINT_EHT_PHY_CAP(2, 2, "Power Boost Factor Support");
+	PRINT_EHT_PHY_CAP(2, 3, "EHT MU PPDU With 4x EHT-LTF and 0.8us GI");
+	PRINT_EHT_PHY_CAP_MASK(2, 4, 0xf, "Max Nc");
+	PRINT_EHT_PHY_CAP(2, 8, "Non-Triggered CQI Feedback");
+	PRINT_EHT_PHY_CAP(2, 9, "TX 1024-QAM and 4096-QAM");
+	PRINT_EHT_PHY_CAP(2, 10, "RX 1024-QAM and 4096-QAM");
+	PRINT_EHT_PHY_CAP(2, 11, "PPE Thresholds Present");
+	PRINT_EHT_PHY_CAP_MASK(2, 12, 0x3, "Common Nominal Packet Padding");
+	PRINT_EHT_PHY_CAP(2, 14, "Extra EHT-LTFs Rx Support");
+	PRINT_EHT_PHY_CAP_MASK(2, 0, 0x7, "Max Number of Supported EHT-LTFs");
+	PRINT_EHT_PHY_CAP_MASK(3, 3, 0xf, "MCS 15 Support");
+	PRINT_EHT_PHY_CAP(3, 7, "EHT DUP (MCS 14) in 6 GHz Support");
+	PRINT_EHT_PHY_CAP(3, 8, "20 MHz Operating STA Recieving NDP With Wider BW");
+	PRINT_EHT_PHY_CAP(3, 9, "Non-OFDMA UL MU-MIMO <= 80Mhz");
+	PRINT_EHT_PHY_CAP(3, 10, "Non-OFDMA UL MU-MIMO = 160Mhz");
+	PRINT_EHT_PHY_CAP(3, 11, "Non-OFDMA UL MU-MIMO = 320Mhz");
+	PRINT_EHT_PHY_CAP(3, 12, "MU Beamformer <= 80Mhz");
+	PRINT_EHT_PHY_CAP(3, 13, "MU Beamformer = 160Mhz");
+	PRINT_EHT_PHY_CAP(3, 14, "MU Beamformer <= 320Mhz");
+	PRINT_EHT_PHY_CAP(3, 15, "TB Sounding Feedback Rate Limit");
+
+	char *bw[] = { "<= 80", "160", "360" };
+	for (i = 0; i < 3; i++) {
+		int j;
+
+		printf("%s\t\tEHT TX/RX MCS and NSS set %s MHz\n", pre, bw[i]);
+
+		for(j = 7; j >= 0; j--) {
+			printf("%s\t\t\t%d streams: ", pre, j + 1);
+			if (mcs_set[i * 3] >= j)
+				printf("MCS 0-13\n");
+			else if (mcs_set[(i * 3) + 1] >= j)
+				printf("MCS 0-11\n");
+			else if (mcs_set[(i * 3) + 2] >= j)
+				printf("MCS 0-9\n");
+			else
+				printf("not supported\n");
+		}
+	}
+
+	if (ppet_len) {
+		printf("%s\t\tEHT PPE Threshold ", pre);
+		for (i = 0; i < ppet_len; i++)
+			if (ppet[i])
+				printf("0x%02x ", ppet[i]);
+		printf("\n");
+	}
+}
+
 void print_iftype_list(const char *name, const char *pfx, struct nlattr *attr)
 {
 	struct nlattr *ift;
@@ -1293,6 +1408,80 @@ void print_he_capability(const uint8_t *
 	__print_he_capa(mac_cap, phy_cap - 1, mcs_set, mcs_len, NULL, 0, false);
 }
 
+void print_eht_info(struct nlattr *nl_iftype)
+{
+	struct nlattr *tb[NL80211_BAND_IFTYPE_ATTR_MAX + 1];
+	__u16 mac_cap[1] = { 0 };
+	__u16 phy_cap[4] = { 0 };
+	__u8 mcs_set[9] = { 0 };
+	__u8 ppet[62] = { 0 };
+	size_t len;
+	int mcs_len = 0, ppet_len = 0;
+
+	nla_parse(tb, NL80211_BAND_IFTYPE_ATTR_MAX,
+		  nla_data(nl_iftype), nla_len(nl_iftype), NULL);
+
+	if (tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_MAC]) {
+		len = nla_len(tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_MAC]);
+		if (len > sizeof(mac_cap))
+			len = sizeof(mac_cap);
+		memcpy(mac_cap,
+		       nla_data(tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_MAC]),
+		       len);
+	}
+
+	if (tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_PHY]) {
+		len = nla_len(tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_PHY]);
+
+		if (len > sizeof(phy_cap) - 1)
+			len = sizeof(phy_cap) - 1;
+		memcpy(&((__u8 *)phy_cap)[1],
+		       nla_data(tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_PHY]),
+		       len);
+	}
+
+	if (tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_MCS_SET]) {
+		len = nla_len(tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_MCS_SET]);
+		if (len > sizeof(mcs_set))
+			len = sizeof(mcs_set);
+		memcpy(mcs_set,
+		       nla_data(tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_MCS_SET]),
+		       len);
+		mcs_len = len;
+	}
+
+	if (tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_PPE]) {
+		len = nla_len(tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_PPE]);
+		if (len > sizeof(ppet))
+			len = sizeof(ppet);
+		memcpy(ppet,
+		       nla_data(tb[NL80211_BAND_IFTYPE_ATTR_EHT_CAP_PPE]),
+		       len);
+		ppet_len = len;
+	}
+
+	__print_eht_capa(mac_cap, phy_cap, mcs_set, mcs_len, ppet, ppet_len,
+			true);
+}
+
+void print_eht_capability(const uint8_t *ie, int len)
+{
+	const void *mac_cap, *phy_cap, *mcs_set;
+	int mcs_len;
+	int i = 0;
+
+	mac_cap = &ie[i];
+	i += 2;
+
+	phy_cap = &ie[i];
+	i += 8;
+
+	mcs_set = &ie[i];
+	mcs_len = len - i;
+
+	__print_eht_capa(mac_cap, phy_cap - 1, mcs_set, mcs_len, NULL, 0, false);
+}
+
 void iw_hexdump(const char *prefix, const __u8 *buf, size_t size)
 {
 	size_t i;
--- a/nl80211.h
+++ b/nl80211.h
@@ -3786,6 +3786,10 @@ enum nl80211_band_iftype_attr {
 	NL80211_BAND_IFTYPE_ATTR_HE_CAP_PPE,
 	NL80211_BAND_IFTYPE_ATTR_HE_6GHZ_CAPA,
 	NL80211_BAND_IFTYPE_ATTR_VENDOR_ELEMS,
+	NL80211_BAND_IFTYPE_ATTR_EHT_CAP_MAC,
+	NL80211_BAND_IFTYPE_ATTR_EHT_CAP_PHY,
+	NL80211_BAND_IFTYPE_ATTR_EHT_CAP_MCS_SET,
+	NL80211_BAND_IFTYPE_ATTR_EHT_CAP_PPE,
 
 	/* keep last */
 	__NL80211_BAND_IFTYPE_ATTR_AFTER_LAST,
